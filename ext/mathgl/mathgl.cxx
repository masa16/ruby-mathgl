/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGRUBY


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



#include <ruby.h>

/* Ruby 1.9.1 has a "memoisation optimisation" when compiling with GCC which
 * breaks using rb_intern as an lvalue, as SWIG does.  We work around this
 * issue for now by disabling this.
 * https://sourceforge.net/tracker/?func=detail&aid=2859614&group_id=1645&atid=101645
 */
#ifdef rb_intern
# undef rb_intern
#endif

/* Remove global macros defined in Ruby's win32.h */
#ifdef write
# undef write
#endif
#ifdef read
# undef read
#endif
#ifdef bind
# undef bind
#endif
#ifdef close
# undef close
#endif
#ifdef connect
# undef connect
#endif


/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RSTRING_END
# define RSTRING_END(x) (RSTRING_PTR(x) + RSTRING_LEN(x))
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif
#ifndef RFLOAT_VALUE
# define RFLOAT_VALUE(x) RFLOAT(x)->value
#endif
#ifndef DOUBLE2NUM
# define DOUBLE2NUM(x) rb_float_new(x)
#endif
#ifndef RHASH_TBL
# define RHASH_TBL(x) (RHASH(x)->tbl)
#endif
#ifndef RHASH_ITER_LEV
# define RHASH_ITER_LEV(x) (RHASH(x)->iter_lev)
#endif
#ifndef RHASH_IFNONE
# define RHASH_IFNONE(x) (RHASH(x)->ifnone)
#endif
#ifndef RHASH_SIZE
# define RHASH_SIZE(x) (RHASH(x)->tbl->num_entries)
#endif
#ifndef RHASH_EMPTY_P
# define RHASH_EMPTY_P(x) (RHASH_SIZE(x) == 0)
#endif
#ifndef RSTRUCT_LEN
# define RSTRUCT_LEN(x) RSTRUCT(x)->len
#endif
#ifndef RSTRUCT_PTR
# define RSTRUCT_PTR(x) RSTRUCT(x)->ptr
#endif



/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

static VALUE _mSWIG = Qnil;

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a function in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

SWIGINTERN VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}


/* This function is called when a user inputs a wrong argument to
   a method.
 */
SWIGINTERN 
const char* Ruby_Format_TypeError( const char* msg,
				   const char* type, 
				   const char* name, 
				   const int argn,
				   VALUE input )
{
  char buf[128];
  VALUE str;
  VALUE asStr;
  if ( msg && *msg )
    {
      str = rb_str_new2(msg);
    }
  else
    {
      str = rb_str_new(NULL, 0);
    }

  str = rb_str_cat2( str, "Expected argument " );
  sprintf( buf, "%d of type ", argn-1 );
  str = rb_str_cat2( str, buf );
  str = rb_str_cat2( str, type );
  str = rb_str_cat2( str, ", but got " );
  str = rb_str_cat2( str, rb_obj_classname(input) );
  str = rb_str_cat2( str, " " );
  asStr = rb_inspect(input);
  if ( RSTRING_LEN(asStr) > 30 )
    {
      str = rb_str_cat( str, StringValuePtr(asStr), 30 );
      str = rb_str_cat2( str, "..." );
    }
  else
    {
      str = rb_str_append( str, asStr );
    }

  if ( name )
    {
      str = rb_str_cat2( str, "\n\tin SWIG method '" );
      str = rb_str_cat2( str, name );
      str = rb_str_cat2( str, "'" );
    }

  return StringValuePtr( str );
}

/* This function is called when an overloaded method fails */
SWIGINTERN 
void Ruby_Format_OverloadedError(
				 const int argc,
				 const int maxargs,
				 const char* method, 
				 const char* prototypes 
				 )
{
  const char* msg = "Wrong # of arguments";
  if ( argc <= maxargs ) msg = "Wrong arguments";
  rb_raise(rb_eArgError,"%s for overloaded method '%s'.\n"  
	   "Possible C/C++ prototypes are:\n%s",
	   msg, method, prototypes);
}

/* -----------------------------------------------------------------------------
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from 
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* Ruby 1.8 actually assumes the first case. */
#if SIZEOF_VOIDP == SIZEOF_LONG
#  define SWIG2NUM(v) LONG2NUM((unsigned long)v)
#  define NUM2SWIG(x) (unsigned long)NUM2LONG(x)
#elif SIZEOF_VOIDP == SIZEOF_LONG_LONG
#  define SWIG2NUM(v) LL2NUM((unsigned long long)v)
#  define NUM2SWIG(x) (unsigned long long)NUM2LL(x)
#else
#  error sizeof(void*) is not the same as long or long long
#endif


/* Global Ruby hash table to store Trackings from C/C++
   structs to Ruby Objects. 
*/
static VALUE swig_ruby_trackings = Qnil;

/* Global variable that stores a reference to the ruby
   hash table delete function. */
static ID swig_ruby_hash_delete;

/* Setup a Ruby hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a ruby hash table to store Trackings from C++ 
     objects to Ruby objects. */

  /* Try to see if some other .so has already created a 
     tracking hash table, which we keep hidden in an instance var
     in the SWIG module.
     This is done to allow multiple DSOs to share the same
     tracking table.
  */
  ID trackings_id = rb_intern( "@__trackings__" );
  VALUE verbose = rb_gv_get("VERBOSE");
  rb_gv_set("VERBOSE", Qfalse);
  swig_ruby_trackings = rb_ivar_get( _mSWIG, trackings_id );
  rb_gv_set("VERBOSE", verbose);

  /* No, it hasn't.  Create one ourselves */ 
  if ( swig_ruby_trackings == Qnil )
    {
      swig_ruby_trackings = rb_hash_new();
      rb_ivar_set( _mSWIG, trackings_id, swig_ruby_trackings );
    }

  /* Now store a reference to the hash table delete function
     so that we only have to look it up once.*/
  swig_ruby_hash_delete = rb_intern("delete");
}

/* Get a Ruby number to reference a pointer */
SWIGRUNTIME VALUE SWIG_RubyPtrToReference(void* ptr) {
  /* We cast the pointer to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the pointer to a Ruby number */
  return SWIG2NUM(ptr);
}

/* Get a Ruby number to reference an object */
SWIGRUNTIME VALUE SWIG_RubyObjectToReference(VALUE object) {
  /* We cast the object to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the Object to a Ruby number */
  return SWIG2NUM(object);
}

/* Get a Ruby object from a previously stored reference */
SWIGRUNTIME VALUE SWIG_RubyReferenceToObject(VALUE reference) {
  /* The provided Ruby number object is a reference
     to the Ruby object we want.*/

  /* Convert the Ruby number to a Ruby object */
  return NUM2SWIG(reference);
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* In a Ruby hash table we store the pointer and
     the associated Ruby object.  The trick here is
     that we cannot store the Ruby object directly - if
     we do then it cannot be garbage collected.  So
     instead we typecast it as a unsigned long and
     convert it to a Ruby number object.*/

  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Get a reference to the Ruby object as a Ruby number */
  VALUE value = SWIG_RubyObjectToReference(object);

  /* Store the mapping to the global hash table. */
  rb_hash_aset(swig_ruby_trackings, key, value);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Now lookup the value stored in the global hash table */
  VALUE value = rb_hash_aref(swig_ruby_trackings, key);
	
  if (value == Qnil) {
    /* No object exists - return nil. */
    return Qnil;
  }
  else {
    /* Convert this value to Ruby object */
    return SWIG_RubyReferenceToObject(value);
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Delete the object from the hash table by calling Ruby's
     do this we need to call the Hash.delete method.*/
  rb_funcall(swig_ruby_trackings, swig_ruby_hash_delete, 1, key);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    DATA_PTR(object) = 0;
  }
}


#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

/* For ruby1.8.4 and earlier. */
#ifndef RUBY_INIT_STACK
   RUBY_EXTERN void Init_stack(VALUE* addr);
#  define RUBY_INIT_STACK \
   VALUE variable_in_this_stack_frame; \
   Init_stack(&variable_in_this_stack_frame);
#endif


#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), "%s", msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  

#include "assert.h"

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


/* Global pointer used to keep some internal SWIG stuff */
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Global IDs used to keep some internal SWIG stuff */
static ID swig_arity_id = 0;
static ID swig_call_id  = 0;

/*
  If your swig extension is to be run within an embedded ruby and has
  director callbacks, you should set -DRUBY_EMBEDDED during compilation.  
  This will reset ruby's stack frame on each entry point from the main 
  program the first time a virtual director function is invoked (in a 
  non-recursive way).
  If this is not done, you run the risk of Ruby trashing the stack.
*/

#ifdef RUBY_EMBEDDED

#  define SWIG_INIT_STACK                            \
      if ( !swig_virtual_calls ) { RUBY_INIT_STACK } \
      ++swig_virtual_calls;
#  define SWIG_RELEASE_STACK --swig_virtual_calls;
#  define Ruby_DirectorTypeMismatchException(x) \
          rb_raise( rb_eTypeError, "%s", x ); return c_result;

      static unsigned int swig_virtual_calls = 0;

#else  /* normal non-embedded extension */

#  define SWIG_INIT_STACK
#  define SWIG_RELEASE_STACK
#  define Ruby_DirectorTypeMismatchException(x) \
          throw Swig::DirectorTypeMismatchException( x );

#endif  /* RUBY_EMBEDDED */


SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
    swig_call_id  = rb_intern("call");
    swig_arity_id = rb_intern("arity");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  VALUE klass;
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  klass = rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  int track;
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;
  
  if (!ptr)
    return Qnil;
  
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    track = sklass->trackObjects;
    if (track) {
      obj = SWIG_RubyInstanceFor(ptr);
      
      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "@__swigtype__");
        const char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), 
			   ( own ? VOIDFUNC(sklass->destroy) : 
			     (track ? VOIDFUNC(SWIG_RubyRemoveTracking) : 0 )
			     ), ptr);

    /* If tracking is on for this class then track this object. */
    if (track) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  
  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "@__swigtype__");
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef void (*ruby_owntype)(void*);

SWIGRUNTIME ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, ruby_owntype own) {
  if (obj) {
    ruby_owntype oldown = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own;
    return oldown;
  } else {
    return 0;
  }
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    *ptr = 0;
    return SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) *own = RDATA(obj)->dfree;
    
  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }
		
    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
        *ptr = vptr;
        return SWIG_OK;
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    } else {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc, vptr, &newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  } else {
    *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void *SWIGUNUSEDPARM(clientdata))
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

/* This function can be used to check whether a proc or method or similarly
   callable function has been passed.  Usually used in a %typecheck, like:

   %typecheck(c_callback_t, precedence=SWIG_TYPECHECK_POINTER) {
        $result = SWIG_Ruby_isCallable( $input );
   }
 */
SWIGINTERN
int SWIG_Ruby_isCallable( VALUE proc )
{
  if ( rb_respond_to( proc, swig_call_id ) == Qtrue )
    return 1;
  return 0;
}

/* This function can be used to check the arity (number of arguments)
   a proc or method can take.  Usually used in a %typecheck.
   Valid arities will be that equal to minimal or those < 0
   which indicate a variable number of parameters at the end.
 */
SWIGINTERN
int SWIG_Ruby_arity( VALUE proc, int minimal )
{
  if ( rb_respond_to( proc, swig_arity_id ) == Qtrue )
    {
      VALUE num = rb_funcall( proc, swig_arity_id, 0 );
      int arity = NUM2INT(num);
      if ( arity < 0 && (arity+1) < -minimal ) return 1;
      if ( arity == minimal ) return 1;
      return 1;
    }
  return 0;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_FILE swig_types[0]
#define SWIGTYPE_p_HMGL swig_types[1]
#define SWIGTYPE_p_HMPR swig_types[2]
#define SWIGTYPE_p_char swig_types[3]
#define SWIGTYPE_p_double swig_types[4]
#define SWIGTYPE_p_f_p_void__void swig_types[5]
#define SWIGTYPE_p_float swig_types[6]
#define SWIGTYPE_p_gsl_matrix swig_types[7]
#define SWIGTYPE_p_gsl_vector swig_types[8]
#define SWIGTYPE_p_long swig_types[9]
#define SWIGTYPE_p_mglColor swig_types[10]
#define SWIGTYPE_p_mglData swig_types[11]
#define SWIGTYPE_p_mglDataA swig_types[12]
#define SWIGTYPE_p_mglDataC swig_types[13]
#define SWIGTYPE_p_mglExpr swig_types[14]
#define SWIGTYPE_p_mglGraph swig_types[15]
#define SWIGTYPE_p_mglParse swig_types[16]
#define SWIGTYPE_p_mglPoint swig_types[17]
#define SWIGTYPE_p_p_double swig_types[18]
#define SWIGTYPE_p_p_float swig_types[19]
#define SWIGTYPE_p_p_p_double swig_types[20]
#define SWIGTYPE_p_p_p_float swig_types[21]
#define SWIGTYPE_p_std__string swig_types[22]
#define SWIGTYPE_p_uint64_t swig_types[23]
#define SWIGTYPE_p_unsigned_char swig_types[24]
#define SWIGTYPE_p_wchar_t swig_types[25]
static swig_type_info *swig_types[27];
static swig_module_info swig_module = {swig_types, 26, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_MathGL
#define SWIG_name    "MathGL"

static VALUE mMathGL;

#define SWIG_RUBY_THREAD_BEGIN_BLOCK
#define SWIG_RUBY_THREAD_END_BLOCK


#define SWIGVERSION 0x020009 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#define SWIG_FILE_WITH_INIT
#include "mgl2/type.h"
#include "mgl2/data.h"
#include "mgl2/mgl.h"
const double Pi = M_PI;
const double NaN = NAN;
const double Inf = INFINITY;


#ifdef __cplusplus
extern "C" {
#endif

// Ruby 1.9 changed the file name of this header
#ifdef HAVE_RUBY_IO_H
#include "ruby/io.h"
#else
#include "rubyio.h"
#endif

#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
#ifdef HAVE_SYS_TIME_H
# include <sys/time.h>
struct timeval rb_time_timeval(VALUE);
#endif
#ifdef __cplusplus
}
#endif


extern "C" {
void Init_MathGL();
void Init_mathgl_qt();
void Init_mathgl_fltk();
void Init_mathgl_glut();

void Init_mathgl() {
    Init_MathGL();
#ifdef HAVE_QT
    Init_mathgl_qt();
#endif
#ifdef HAVE_FLTK
    Init_mathgl_fltk();
#endif
#ifdef HAVE_GLUT
    Init_mathgl_glut();
#endif
}
}


static mglPoint GetMglPoint(VALUE arg)
{
    if (TYPE(arg)==T_ARRAY) {
        mreal v[4] = {0,0,0,0};
        long len = RARRAY_LEN(arg);
        if (len < 1 || len > 4) {
            rb_raise(rb_eArgError, "wrong size array");
        }
        for (long i=0; i<len; i++) {
            VALUE x = rb_ary_entry(arg, i);
            v[i] = NUM2DBL(x);
        }
        return mglPoint(v[0],v[1],v[2],v[3]);
    } else {
        void *vptr = 0;
        SWIG_ConvertPtr(arg, &vptr, SWIGTYPE_p_mglPoint, 1);
        return *reinterpret_cast< mglPoint * >(vptr);
    }
}


static mglData *GetMglData(VALUE arg)
{
    if (TYPE(arg)==T_ARRAY) {
        long len = RARRAY_LEN(arg);
        mglData *d = new mglData(len);
        for (long i=0; i<len; i++) {
            VALUE x = rb_ary_entry(arg, i);
            d->SetVal(NUM2DBL(x), i);
        }
        return d;
    } else {
        void *vptr = 0;
        SWIG_ConvertPtr(arg, &vptr, SWIGTYPE_p_mglData, 1);
        mglData *src = reinterpret_cast< mglData * >(vptr);
        mglData *link = new mglData;
        link->Link(*src);
        return link;
    }
}


  #define SWIG_From_double   rb_float_new 


SWIGINTERNINLINE VALUE
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


#include <float.h>


SWIGINTERN VALUE
SWIG_ruby_failed(void)
{
  return Qnil;
} 


/*@SWIG:/usr/local/share/swig/2.0.9/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2DBL(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  double *res = (double *)(args[1]);
  *res = NUM2DBL(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_double (VALUE obj, double *val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FLOAT) || (type == T_FIXNUM) || (type == T_BIGNUM)) {
    double v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2DBL), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_float (VALUE obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_bool  (bool value)
{
  return value ? Qtrue : Qfalse;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


/*@SWIG:/usr/local/share/swig/2.0.9/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long (VALUE obj, long* val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2LONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (VALUE obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(VALUE obj, char** cptr, size_t* psize, int *alloc)
{
  if (TYPE(obj) == T_STRING) {
    char *cstr = StringValuePtr(obj); 
    size_t size = RSTRING_LEN(obj) + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy((new char[size]), cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *)vptr;
	if (psize) *psize = vptr ? (strlen((char*)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }  
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsCharArray(VALUE obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (VALUE obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


  #define SWIG_From_long   LONG2NUM 


SWIGINTERN int
SWIG_AsVal_bool (VALUE obj, bool *val)
{
  if (obj == Qtrue) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == Qfalse) {
    if (val) *val = false;
    return SWIG_OK;
  } else {
    int res = 0;
    if (SWIG_AsVal_int (obj, &res) == SWIG_OK) {    
      if (val) *val = res ? true : false;
      return SWIG_OK;
    }
  }  
  return SWIG_TypeError;
}





SWIGINTERNINLINE VALUE
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > LONG_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : Qnil;
    } else {
      return rb_str_new(carray, static_cast< long >(size));
    }
  } else {
    return Qnil;
  }
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}

SWIGINTERN mglData *new_mglData__SWIG_16(double const *d,int size,int rows,int cols){
      if (size != rows*cols) {
          rb_raise(rb_eArgError,"array size(%d) mismatches (rows=%d)*(cols=%d)",
                   size, rows, cols);
      }
      return new mglData(d, rows, cols);
  }
SWIGINTERN void mglData_Set__SWIG_14(mglData *self,double const *A,long size){   self->Set(A, size);  }
SWIGINTERN void mglData_Set__SWIG_15(mglData *self,double const *A,long size,long NX,long NY){
      if (size != NX*NY) {
          rb_raise(rb_eArgError,"array size(%ld) mismatches NX(%ld)*NY(%ld)",
                   size, NX, NY);
      }
      self->Set(A, NX, NY);
  }
SWIGINTERN void mglData_Set__SWIG_16(mglData *self,double const *A,long size,long NX,long NY,long NZ){
      if (size != NX*NY*NZ) {
          rb_raise(rb_eArgError,"array size(%ld) mismatches (NX=%ld)*(NY=%ld)*(NZ=%ld)",
                   size, NX, NY, NZ);
      }
      self->Set(A, NX, NY, NZ);
  }
SWIGINTERN mglData mglData_operator_Sm___SWIG_0(mglData *self,mglDataA const &d){       mglData a(self);  a*=d;   return a;       }
SWIGINTERN mglData mglData_operator_Sm___SWIG_1(mglData *self,double b){       mglData a(self);  a*=b;   return a;       }
SWIGINTERN mglData mglData_operator_Ss___SWIG_0(mglData *self,mglDataA const &d){       mglData a(self);  a-=d;   return a;       }
SWIGINTERN mglData mglData_operator_Ss___SWIG_1(mglData *self,double b){       mglData a(self);  a-=b;   return a;       }
SWIGINTERN mglData mglData_operator_Sa___SWIG_0(mglData *self,mglDataA const &d){       mglData a(self);  a+=d;   return a;       }
SWIGINTERN mglData mglData_operator_Sa___SWIG_1(mglData *self,double b){       mglData a(self);  a+=b;   return a;       }
SWIGINTERN mglData mglData_operator_Sd___SWIG_0(mglData *self,mglDataA const &d){       mglData a(self);  a/=d;   return a;       }
SWIGINTERN mglData mglData_operator_Sd___SWIG_1(mglData *self,double b){       mglData a(self);  a/=b;   return a;       }
SWIGINTERN mreal mglData___getitem__(mglData *self,int i){	return self->GetVal(i);	}
SWIGINTERN mreal mglData___paren(mglData *self,int i){	return self->GetVal(i);	}
SWIGINTERN void mglData___setitem__(mglData *self,int i,mreal y){	self->SetVal(y,i);	}
SWIGINTERN void mglData___paren_asgn(mglData *self,int i,mreal y){	self->SetVal(y,i);	}
SWIGINTERN void mglGraph_SetFunc__SWIG_1(mglGraph *self,char const *EqX,int EqY=0,int EqZ=0,int EqA=0){ self->SetFunc(EqX, 0, 0, 0); }
SWIGINTERN void mglGraph_SetFunc__SWIG_5(mglGraph *self,char const *EqX,char const *EqY,int EqZ=0,int EqA=0){ self->SetFunc(EqX, EqY, 0, 0); }
SWIGINTERN void mglGraph_SetFunc__SWIG_8(mglGraph *self,char const *EqX,char const *EqY,char const *EqZ=NULL,int EqA=0){ self->SetFunc(EqX, EqY, EqZ, 0); }

/*@SWIG:/usr/local/share/swig/2.0.9/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2ULONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  unsigned long *res = (unsigned long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2ULONG(obj) : rb_big2ulong(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (VALUE obj, unsigned long *val) 
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    unsigned long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2ULONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


/*
  Document-method: MathGL.Pi

  call-seq:
    Pi -> mreal const

Get value of attribute.

*/
SWIGINTERN VALUE
_wrap_Pi_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_float(static_cast< float >(Pi));
  return _val;
}



/*
  Document-method: MathGL.NaN

  call-seq:
    NaN -> mreal const

Get value of attribute.

*/
SWIGINTERN VALUE
_wrap_NaN_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_float(static_cast< float >(NaN));
  return _val;
}



/*
  Document-method: MathGL.Inf

  call-seq:
    Inf -> mreal const

Get value of attribute.

*/
SWIGINTERN VALUE
_wrap_Inf_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_float(static_cast< float >(Inf));
  return _val;
}



/*
  Document-method: MathGL.mgl_min_a

  call-seq:
    mgl_min_a -> mreal const

Get value of attribute.

*/
SWIGINTERN VALUE
_wrap_mgl_min_a_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_float(static_cast< float >(mgl_min_a));
  return _val;
}



/*
  Document-class: MathGL::MglPoint

  Proxy of C++ MathGL::MglPoint class


*/
static swig_class SwigClassMglPoint;


/*
  Document-method: MathGL::MglPoint.x

  call-seq:
    x -> mreal

Get value of attribute.

*/

/*
  Document-method: MathGL::MglPoint.x=

  call-seq:
    x=(x) -> mreal

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_MglPoint_x_set(int argc, VALUE *argv, VALUE self) {
  mglPoint *arg1 = (mglPoint *) 0 ;
  mreal arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglPoint *","x", 1, self )); 
  }
  arg1 = reinterpret_cast< mglPoint * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","x", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  if (arg1) (arg1)->x = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglPoint_x_get(int argc, VALUE *argv, VALUE self) {
  mglPoint *arg1 = (mglPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglPoint *","x", 1, self )); 
  }
  arg1 = reinterpret_cast< mglPoint * >(argp1);
  result = (mreal) ((arg1)->x);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglPoint.y

  call-seq:
    y -> mreal

Get value of attribute.

*/

/*
  Document-method: MathGL::MglPoint.y=

  call-seq:
    y=(x) -> mreal

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_MglPoint_y_set(int argc, VALUE *argv, VALUE self) {
  mglPoint *arg1 = (mglPoint *) 0 ;
  mreal arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglPoint *","y", 1, self )); 
  }
  arg1 = reinterpret_cast< mglPoint * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","y", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  if (arg1) (arg1)->y = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglPoint_y_get(int argc, VALUE *argv, VALUE self) {
  mglPoint *arg1 = (mglPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglPoint *","y", 1, self )); 
  }
  arg1 = reinterpret_cast< mglPoint * >(argp1);
  result = (mreal) ((arg1)->y);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglPoint.z

  call-seq:
    z -> mreal

Get value of attribute.

*/

/*
  Document-method: MathGL::MglPoint.z=

  call-seq:
    z=(x) -> mreal

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_MglPoint_z_set(int argc, VALUE *argv, VALUE self) {
  mglPoint *arg1 = (mglPoint *) 0 ;
  mreal arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglPoint *","z", 1, self )); 
  }
  arg1 = reinterpret_cast< mglPoint * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","z", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  if (arg1) (arg1)->z = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglPoint_z_get(int argc, VALUE *argv, VALUE self) {
  mglPoint *arg1 = (mglPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglPoint *","z", 1, self )); 
  }
  arg1 = reinterpret_cast< mglPoint * >(argp1);
  result = (mreal) ((arg1)->z);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglPoint.c

  call-seq:
    c -> mreal

Get value of attribute.

*/

/*
  Document-method: MathGL::MglPoint.c=

  call-seq:
    c=(x) -> mreal

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_MglPoint_c_set(int argc, VALUE *argv, VALUE self) {
  mglPoint *arg1 = (mglPoint *) 0 ;
  mreal arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglPoint *","c", 1, self )); 
  }
  arg1 = reinterpret_cast< mglPoint * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","c", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  if (arg1) (arg1)->c = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglPoint_c_get(int argc, VALUE *argv, VALUE self) {
  mglPoint *arg1 = (mglPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglPoint *","c", 1, self )); 
  }
  arg1 = reinterpret_cast< mglPoint * >(argp1);
  result = (mreal) ((arg1)->c);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglPoint.new

  call-seq:
    MglPoint.new(X=0, Y=0, Z=0, C=0)
    MglPoint.new(X=0, Y=0, Z=0)
    MglPoint.new(X=0, Y=0)
    MglPoint.new(X=0)
    MglPoint.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_MglPoint__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mreal arg1 ;
  mreal arg2 ;
  mreal arg3 ;
  mreal arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  mglPoint *result = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "mreal","mglPoint", 1, argv[0] ));
  } 
  arg1 = static_cast< mreal >(val1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","mglPoint", 2, argv[1] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_float(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","mglPoint", 3, argv[2] ));
  } 
  arg3 = static_cast< mreal >(val3);
  ecode4 = SWIG_AsVal_float(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","mglPoint", 4, argv[3] ));
  } 
  arg4 = static_cast< mreal >(val4);
  result = (mglPoint *)new mglPoint(arg1,arg2,arg3,arg4);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglPoint.new

  call-seq:
    MglPoint.new(X=0, Y=0, Z=0, C=0)
    MglPoint.new(X=0, Y=0, Z=0)
    MglPoint.new(X=0, Y=0)
    MglPoint.new(X=0)
    MglPoint.new()

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_MglPoint__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mreal arg1 ;
  mreal arg2 ;
  mreal arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  mglPoint *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "mreal","mglPoint", 1, argv[0] ));
  } 
  arg1 = static_cast< mreal >(val1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","mglPoint", 2, argv[1] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_float(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","mglPoint", 3, argv[2] ));
  } 
  arg3 = static_cast< mreal >(val3);
  result = (mglPoint *)new mglPoint(arg1,arg2,arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_MglPoint__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mreal arg1 ;
  mreal arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  mglPoint *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "mreal","mglPoint", 1, argv[0] ));
  } 
  arg1 = static_cast< mreal >(val1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","mglPoint", 2, argv[1] ));
  } 
  arg2 = static_cast< mreal >(val2);
  result = (mglPoint *)new mglPoint(arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_MglPoint__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mreal arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  mglPoint *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "mreal","mglPoint", 1, argv[0] ));
  } 
  arg1 = static_cast< mreal >(val1);
  result = (mglPoint *)new mglPoint(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_MglPoint_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_MglPoint_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_mglPoint);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_MglPoint__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglPoint *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (mglPoint *)new mglPoint();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_MglPoint(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs;
  if (argc > 4) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_MglPoint__SWIG_4(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_MglPoint__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_MglPoint__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_MglPoint__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_MglPoint__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "mglPoint.new", 
    "    mglPoint.new(mreal X, mreal Y, mreal Z, mreal C)\n"
    "    mglPoint.new(mreal X, mreal Y, mreal Z)\n"
    "    mglPoint.new(mreal X, mreal Y)\n"
    "    mglPoint.new(mreal X)\n"
    "    mglPoint.new()\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglPoint.is_nan

  call-seq:
    is_nan -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglPoint_is_nan(int argc, VALUE *argv, VALUE self) {
  mglPoint *arg1 = (mglPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglPoint *","IsNAN", 1, self )); 
  }
  arg1 = reinterpret_cast< mglPoint * >(argp1);
  result = (bool)(arg1)->IsNAN();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglPoint.val

  call-seq:
    val(i) -> mreal

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglPoint_val(int argc, VALUE *argv, VALUE self) {
  mglPoint *arg1 = (mglPoint *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglPoint *","val", 1, self )); 
  }
  arg1 = reinterpret_cast< mglPoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","val", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (mreal)(arg1)->val(arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglPoint.norm

  call-seq:
    norm -> mreal

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglPoint_norm(int argc, VALUE *argv, VALUE self) {
  mglPoint *arg1 = (mglPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglPoint *","norm", 1, self )); 
  }
  arg1 = reinterpret_cast< mglPoint * >(argp1);
  result = (mreal)(arg1)->norm();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglPoint.normalize

  call-seq:
    normalize

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglPoint_normalize(int argc, VALUE *argv, VALUE self) {
  mglPoint *arg1 = (mglPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglPoint *","Normalize", 1, self )); 
  }
  arg1 = reinterpret_cast< mglPoint * >(argp1);
  (arg1)->Normalize();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN void
free_mglPoint(mglPoint *arg1) {
    delete arg1;
}


/*
  Document-class: MathGL::MglColor

  Proxy of C++ MathGL::MglColor class


*/
static swig_class SwigClassMglColor;


/*
  Document-method: MathGL::MglColor.r

  call-seq:
    r -> float

Get value of attribute.

*/

/*
  Document-method: MathGL::MglColor.r=

  call-seq:
    r=(x) -> float

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_MglColor_r_set(int argc, VALUE *argv, VALUE self) {
  mglColor *arg1 = (mglColor *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglColor *","r", 1, self )); 
  }
  arg1 = reinterpret_cast< mglColor * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","r", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->r = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglColor_r_get(int argc, VALUE *argv, VALUE self) {
  mglColor *arg1 = (mglColor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglColor *","r", 1, self )); 
  }
  arg1 = reinterpret_cast< mglColor * >(argp1);
  result = (float) ((arg1)->r);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglColor.g

  call-seq:
    g -> float

Get value of attribute.

*/

/*
  Document-method: MathGL::MglColor.g=

  call-seq:
    g=(x) -> float

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_MglColor_g_set(int argc, VALUE *argv, VALUE self) {
  mglColor *arg1 = (mglColor *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglColor *","g", 1, self )); 
  }
  arg1 = reinterpret_cast< mglColor * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","g", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->g = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglColor_g_get(int argc, VALUE *argv, VALUE self) {
  mglColor *arg1 = (mglColor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglColor *","g", 1, self )); 
  }
  arg1 = reinterpret_cast< mglColor * >(argp1);
  result = (float) ((arg1)->g);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglColor.b

  call-seq:
    b -> float

Get value of attribute.

*/

/*
  Document-method: MathGL::MglColor.b=

  call-seq:
    b=(x) -> float

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_MglColor_b_set(int argc, VALUE *argv, VALUE self) {
  mglColor *arg1 = (mglColor *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglColor *","b", 1, self )); 
  }
  arg1 = reinterpret_cast< mglColor * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","b", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->b = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglColor_b_get(int argc, VALUE *argv, VALUE self) {
  mglColor *arg1 = (mglColor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglColor *","b", 1, self )); 
  }
  arg1 = reinterpret_cast< mglColor * >(argp1);
  result = (float) ((arg1)->b);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglColor.a

  call-seq:
    a -> float

Get value of attribute.

*/

/*
  Document-method: MathGL::MglColor.a=

  call-seq:
    a=(x) -> float

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_MglColor_a_set(int argc, VALUE *argv, VALUE self) {
  mglColor *arg1 = (mglColor *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglColor *","a", 1, self )); 
  }
  arg1 = reinterpret_cast< mglColor * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","a", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->a = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglColor_a_get(int argc, VALUE *argv, VALUE self) {
  mglColor *arg1 = (mglColor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglColor *","a", 1, self )); 
  }
  arg1 = reinterpret_cast< mglColor * >(argp1);
  result = (float) ((arg1)->a);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglColor.new

  call-seq:
    MglColor.new(R, G, B, A=1)
    MglColor.new(R, G, B)
    MglColor.new
    MglColor.new(c, bright=1)
    MglColor.new(c)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_MglColor__SWIG_0(int argc, VALUE *argv, VALUE self) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  mglColor *result = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "float","mglColor", 1, argv[0] ));
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","mglColor", 2, argv[1] ));
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float","mglColor", 3, argv[2] ));
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "float","mglColor", 4, argv[3] ));
  } 
  arg4 = static_cast< float >(val4);
  result = (mglColor *)new mglColor(arg1,arg2,arg3,arg4);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglColor.new

  call-seq:
    MglColor.new(R, G, B, A=1)
    MglColor.new(R, G, B)
    MglColor.new()
    MglColor.new(c, bright=1)
    MglColor.new(c)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_MglColor__SWIG_1(int argc, VALUE *argv, VALUE self) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  mglColor *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "float","mglColor", 1, argv[0] ));
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","mglColor", 2, argv[1] ));
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float","mglColor", 3, argv[2] ));
  } 
  arg3 = static_cast< float >(val3);
  result = (mglColor *)new mglColor(arg1,arg2,arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_MglColor__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglColor *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (mglColor *)new mglColor();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_MglColor__SWIG_3(int argc, VALUE *argv, VALUE self) {
  char arg1 ;
  float arg2 ;
  char val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  mglColor *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_char(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "char","mglColor", 1, argv[0] ));
  } 
  arg1 = static_cast< char >(val1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","mglColor", 2, argv[1] ));
  } 
  arg2 = static_cast< float >(val2);
  result = (mglColor *)new mglColor(arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_MglColor_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_MglColor_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_mglColor);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_MglColor__SWIG_4(int argc, VALUE *argv, VALUE self) {
  char arg1 ;
  char val1 ;
  int ecode1 = 0 ;
  mglColor *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_char(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "char","mglColor", 1, argv[0] ));
  } 
  arg1 = static_cast< char >(val1);
  result = (mglColor *)new mglColor(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_MglColor(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs;
  if (argc > 4) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_MglColor__SWIG_2(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_char(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_MglColor__SWIG_4(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_char(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_MglColor__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_MglColor__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_MglColor__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "mglColor.new", 
    "    mglColor.new(float R, float G, float B, float A)\n"
    "    mglColor.new(float R, float G, float B)\n"
    "    mglColor.new()\n"
    "    mglColor.new(char c, float bright)\n"
    "    mglColor.new(char c)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglColor.set

  call-seq:
    set(R, G, B, A=1)
    set(R, G, B)
    set(c, bright=1)
    set(c)
    set(p, bright=1)
    set(p)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglColor_set__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglColor *arg1 = (mglColor *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglColor *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< mglColor * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "float","Set", 4, argv[2] ));
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "float","Set", 5, argv[3] ));
  } 
  arg5 = static_cast< float >(val5);
  (arg1)->Set(arg2,arg3,arg4,arg5);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglColor_set__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglColor *arg1 = (mglColor *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglColor *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< mglColor * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "float","Set", 4, argv[2] ));
  } 
  arg4 = static_cast< float >(val4);
  (arg1)->Set(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglColor_set__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglColor *arg1 = (mglColor *) 0 ;
  mglColor arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglColor *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< mglColor * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_mglColor,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglColor","Set", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mglColor","Set", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< mglColor * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< float >(val3);
  (arg1)->Set(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglColor_set__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglColor *arg1 = (mglColor *) 0 ;
  mglColor arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglColor *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< mglColor * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_mglColor,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglColor","Set", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mglColor","Set", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< mglColor * >(argp2));
    }
  }
  (arg1)->Set(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglColor.valid

  call-seq:
    valid -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglColor_valid(int argc, VALUE *argv, VALUE self) {
  mglColor *arg1 = (mglColor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglColor *","Valid", 1, self )); 
  }
  arg1 = reinterpret_cast< mglColor * >(argp1);
  result = (bool)(arg1)->Valid();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglColor.norm

  call-seq:
    norm -> float

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglColor_norm(int argc, VALUE *argv, VALUE self) {
  mglColor *arg1 = (mglColor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglColor *","Norm", 1, self )); 
  }
  arg1 = reinterpret_cast< mglColor * >(argp1);
  result = (float)(arg1)->Norm();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglColor.norm_s

  call-seq:
    norm_s -> float

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglColor_norm_s(int argc, VALUE *argv, VALUE self) {
  mglColor *arg1 = (mglColor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglColor *","NormS", 1, self )); 
  }
  arg1 = reinterpret_cast< mglColor * >(argp1);
  result = (float)(arg1)->NormS();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglColor.set

  call-seq:
    set(R, G, B, A=1)
    set(R, G, B)
    set(c, bright=1)
    set(c)
    set(p, bright=1)
    set(p)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglColor_set__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglColor *arg1 = (mglColor *) 0 ;
  char arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglColor *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< mglColor * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< float >(val3);
  (arg1)->Set(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglColor_set__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglColor *arg1 = (mglColor *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglColor *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< mglColor * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  (arg1)->Set(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglColor_set(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglColor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglColor, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglColor_set__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglColor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglColor_set__SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglColor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglColor, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglColor_set__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglColor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglColor_set__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglColor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglColor_set__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglColor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglColor_set__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglColor.set", 
    "    void MglColor.set(float R, float G, float B, float A)\n"
    "    void MglColor.set(float R, float G, float B)\n"
    "    void MglColor.set(mglColor c, float bright)\n"
    "    void MglColor.set(mglColor c)\n"
    "    void MglColor.set(char p, float bright)\n"
    "    void MglColor.set(char p)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglColor.==

  call-seq:
    ==(c) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_MglColor___eq__(int argc, VALUE *argv, VALUE self) {
  mglColor *arg1 = (mglColor *) 0 ;
  mglColor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglColor const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< mglColor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_mglColor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglColor const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mglColor const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< mglColor * >(argp2);
  result = (bool)((mglColor const *)arg1)->operator ==((mglColor const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglColor.<

  call-seq:
    <(c) -> bool

Lower than comparison operator.
*/
SWIGINTERN VALUE
_wrap_MglColor___lt__(int argc, VALUE *argv, VALUE self) {
  mglColor *arg1 = (mglColor *) 0 ;
  mglColor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglColor const *","operator <", 1, self )); 
  }
  arg1 = reinterpret_cast< mglColor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_mglColor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglColor const &","operator <", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mglColor const &","operator <", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< mglColor * >(argp2);
  result = (bool)((mglColor const *)arg1)->operator <((mglColor const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_mglColor(mglColor *arg1) {
    delete arg1;
}


/*
  Document-class: MathGL::MglData

  Proxy of C++ MathGL::MglData class


*/
static swig_class SwigClassMglData;


/*
  Document-method: MathGL::MglData.nx

  call-seq:
    nx -> long

Get value of attribute.

*/

/*
  Document-method: MathGL::MglData.nx=

  call-seq:
    nx=(x) -> long

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_MglData_nx_set(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","nx", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","nx", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  if (arg1) (arg1)->nx = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_nx_get(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","nx", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  result = (long) ((arg1)->nx);
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglData.ny

  call-seq:
    ny -> long

Get value of attribute.

*/

/*
  Document-method: MathGL::MglData.ny=

  call-seq:
    ny=(x) -> long

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_MglData_ny_set(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","ny", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","ny", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  if (arg1) (arg1)->ny = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_ny_get(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","ny", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  result = (long) ((arg1)->ny);
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglData.nz

  call-seq:
    nz -> long

Get value of attribute.

*/

/*
  Document-method: MathGL::MglData.nz=

  call-seq:
    nz=(x) -> long

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_MglData_nz_set(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","nz", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","nz", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  if (arg1) (arg1)->nz = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_nz_get(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","nz", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  result = (long) ((arg1)->nz);
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglData.a

  call-seq:
    a -> mreal *

Get value of attribute.

*/

/*
  Document-method: MathGL::MglData.a=

  call-seq:
    a=(x) -> mreal *

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_MglData_a_set(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal *arg2 = (mreal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","a", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_float, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mreal *","a", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< mreal * >(argp2);
  if (arg1) (arg1)->a = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_a_get(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mreal *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","a", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  result = (mreal *) ((arg1)->a);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglData.id

  call-seq:
    id -> std::string

Get value of attribute.

*/

/*
  Document-method: MathGL::MglData.id=

  call-seq:
    id=(x) -> std::string

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_MglData_id_set(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","id", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string","id", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string","id", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< std::string * >(argp2));
    }
  }
  if (arg1) (arg1)->id = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_id_get(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","id", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  result =  ((arg1)->id);
  vresult = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglData.link

  call-seq:
    link -> bool

Get value of attribute.

*/

/*
  Document-method: MathGL::MglData.link=

  call-seq:
    link=(x) -> bool

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_MglData_link_set(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","link", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","link", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->link = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_link_get(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","link", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  result = (bool) ((arg1)->link);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglData.new

  call-seq:
    MglData.new(d)
    MglData.new(d)
    MglData.new(arg2, d)
    MglData.new(size, d)
    MglData.new(rows, cols, d)
    MglData.new(size, d)
    MglData.new(rows, cols, d)
    MglData.new(d)
    MglData.new(d, rows, cols)
    MglData.new(d, size)
    MglData.new(d, rows, cols)
    MglData.new(fname)
    MglData.new(xx=1, yy=1, zz=1)
    MglData.new(xx=1, yy=1)
    MglData.new(xx=1)
    MglData.new
    MglData.new(d, rows, cols)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_MglData__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = 0 ;
  mglData *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    arg1 = GetMglData(argv[0]);
  }
  result = (mglData *)new mglData((mglData const &)*arg1);
  DATA_PTR(self) = result;
  {
    delete arg1;
  }
  return self;
fail:
  {
    delete arg1;
  }
  return Qnil;
}



/*
  Document-method: MathGL::MglData.new

  call-seq:
    MglData.new(d)
    MglData.new(d)
    MglData.new(arg2, d)
    MglData.new(size, d)
    MglData.new(rows, cols, d)
    MglData.new(size, d)
    MglData.new(rows, cols, d)
    MglData.new(d)
    MglData.new(d, rows, cols)
    MglData.new(d, size)
    MglData.new(d, rows, cols)
    MglData.new(fname)
    MglData.new(xx=1, yy=1, zz=1)
    MglData.new(xx=1, yy=1)
    MglData.new(xx=1)
    MglData.new()
    MglData.new(d, rows, cols)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_MglData__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mglData *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","mglData", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  result = (mglData *)new mglData((mglData const *)arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_MglData__SWIG_2(int argc, VALUE *argv, VALUE self) {
  bool arg1 ;
  mglData *arg2 = (mglData *) 0 ;
  bool val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mglData *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_bool(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "bool","mglData", 1, argv[0] ));
  } 
  arg1 = static_cast< bool >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglData *","mglData", 2, argv[1] )); 
  }
  arg2 = reinterpret_cast< mglData * >(argp2);
  result = (mglData *)new mglData(arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_MglData__SWIG_3(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  float *arg2 = (float *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mglData *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","mglData", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "float const *","mglData", 2, argv[1] )); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  result = (mglData *)new mglData(arg1,(float const *)arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_MglData__SWIG_4(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mglData *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","mglData", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","mglData", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "float const *","mglData", 3, argv[2] )); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  result = (mglData *)new mglData(arg1,arg2,(float const *)arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_MglData__SWIG_5(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  double *arg2 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mglData *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","mglData", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "double const *","mglData", 2, argv[1] )); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  result = (mglData *)new mglData(arg1,(double const *)arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_MglData__SWIG_6(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mglData *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","mglData", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","mglData", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "double const *","mglData", 3, argv[2] )); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  result = (mglData *)new mglData(arg1,arg2,(double const *)arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_MglData__SWIG_7(int argc, VALUE *argv, VALUE self) {
  double *arg1 = (double *) 0 ;
  int arg2 ;
  mglData *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    if (TYPE(argv[0])!=T_ARRAY) {
      rb_raise(rb_eArgError,"argument is not Array");
    }
    //Check_Type(argv[0], T_ARRAY);
    arg2 = RARRAY_LEN(argv[0]);
    arg1 = ALLOC_N(double,arg2);
    for (long i=0; i<arg2; i++) {
      arg1[i] = NUM2DBL(RARRAY_PTR(argv[0])[i]);
    }
  }
  result = (mglData *)new mglData((double const *)arg1,arg2);
  DATA_PTR(self) = result;
  {
    xfree(arg1);
  }
  return self;
fail:
  {
    xfree(arg1);
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_MglData__SWIG_8(int argc, VALUE *argv, VALUE self) {
  double *arg1 = (double *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mglData *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "double const *","mglData", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","mglData", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","mglData", 3, argv[2] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (mglData *)new mglData((double const *)arg1,arg2,arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_MglData__SWIG_9(int argc, VALUE *argv, VALUE self) {
  float *arg1 = (float *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mglData *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "float const *","mglData", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< float * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","mglData", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (mglData *)new mglData((float const *)arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_MglData__SWIG_10(int argc, VALUE *argv, VALUE self) {
  float *arg1 = (float *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mglData *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "float const *","mglData", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< float * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","mglData", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","mglData", 3, argv[2] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (mglData *)new mglData((float const *)arg1,arg2,arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_MglData__SWIG_11(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  mglData *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","mglData", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (mglData *)new mglData((char const *)arg1);
  DATA_PTR(self) = result;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_MglData__SWIG_12(int argc, VALUE *argv, VALUE self) {
  long arg1 ;
  long arg2 ;
  long arg3 ;
  long val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  mglData *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_long(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "long","mglData", 1, argv[0] ));
  } 
  arg1 = static_cast< long >(val1);
  ecode2 = SWIG_AsVal_long(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","mglData", 2, argv[1] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","mglData", 3, argv[2] ));
  } 
  arg3 = static_cast< long >(val3);
  result = (mglData *)new mglData(arg1,arg2,arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_MglData__SWIG_13(int argc, VALUE *argv, VALUE self) {
  long arg1 ;
  long arg2 ;
  long val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  mglData *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_long(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "long","mglData", 1, argv[0] ));
  } 
  arg1 = static_cast< long >(val1);
  ecode2 = SWIG_AsVal_long(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","mglData", 2, argv[1] ));
  } 
  arg2 = static_cast< long >(val2);
  result = (mglData *)new mglData(arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_MglData__SWIG_14(int argc, VALUE *argv, VALUE self) {
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  mglData *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_long(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "long","mglData", 1, argv[0] ));
  } 
  arg1 = static_cast< long >(val1);
  result = (mglData *)new mglData(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_MglData__SWIG_15(int argc, VALUE *argv, VALUE self) {
  mglData *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (mglData *)new mglData();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_mglData(mglData *arg1) {
    delete arg1;
}


/*
  Document-method: MathGL::MglData.get_val

  call-seq:
    get_val(i, j=0, k=0) -> mreal
    get_val(i, j=0) -> mreal
    get_val(i) -> mreal

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_get_val__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","GetVal", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","GetVal", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","GetVal", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","GetVal", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  result = (mreal)((mglData const *)arg1)->GetVal(arg2,arg3,arg4);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_get_val__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","GetVal", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","GetVal", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","GetVal", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  result = (mreal)((mglData const *)arg1)->GetVal(arg2,arg3);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_get_val__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","GetVal", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","GetVal", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  result = (mreal)((mglData const *)arg1)->GetVal(arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_get_val(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglData_get_val__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_get_val__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_get_val__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglData.get_val", 
    "    mreal MglData.get_val(long i, long j, long k)\n"
    "    mreal MglData.get_val(long i, long j)\n"
    "    mreal MglData.get_val(long i)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.set_val

  call-seq:
    set_val(f, i, j=0, k=0)
    set_val(f, i, j=0)
    set_val(f, i)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_set_val__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","SetVal", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","SetVal", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","SetVal", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","SetVal", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "long","SetVal", 5, argv[3] ));
  } 
  arg5 = static_cast< long >(val5);
  (arg1)->SetVal(arg2,arg3,arg4,arg5);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_set_val__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  long arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","SetVal", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","SetVal", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","SetVal", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","SetVal", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  (arg1)->SetVal(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_set_val__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","SetVal", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","SetVal", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","SetVal", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  (arg1)->SetVal(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_set_val(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_set_val__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_set_val__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglData_set_val__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglData.set_val", 
    "    void MglData.set_val(mreal f, long i, long j, long k)\n"
    "    void MglData.set_val(mreal f, long i, long j)\n"
    "    void MglData.set_val(mreal f, long i)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.get_nx

  call-seq:
    get_nx -> long

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_get_nx(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","GetNx", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  result = (long)((mglData const *)arg1)->GetNx();
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglData.get_ny

  call-seq:
    get_ny -> long

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_get_ny(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","GetNy", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  result = (long)((mglData const *)arg1)->GetNy();
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglData.get_nz

  call-seq:
    get_nz -> long

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_get_nz(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","GetNz", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  result = (long)((mglData const *)arg1)->GetNz();
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglData.set

  call-seq:
    set(m)
    set(m)
    set(A, NX, NY=1, NZ=1)
    set(A, NX, NY=1)
    set(A, NX)
    set(A, NX, NY=1)
    set(A, N1, N2)
    set(A, N1, N2)
    set(A, N1, N2, N3)
    set(A, N1, N2, N3)
    set(str, NX, NY=1, NZ=1)
    set(str, NX, NY=1)
    set(str, NX)
    set(dat)
    set(A)
    set(A, NX, NY)
    set(A, NX, NY, NZ)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_set__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  gsl_vector *arg2 = (gsl_vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_gsl_vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gsl_vector *","Set", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< gsl_vector * >(argp2);
  (arg1)->Set(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_set__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  gsl_matrix *arg2 = (gsl_matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_gsl_matrix, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gsl_matrix *","Set", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< gsl_matrix * >(argp2);
  (arg1)->Set(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_set__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  float *arg2 = (float *) 0 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "float const *","Set", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Set", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "long","Set", 5, argv[3] ));
  } 
  arg5 = static_cast< long >(val5);
  (arg1)->Set((float const *)arg2,arg3,arg4,arg5);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_set__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  float *arg2 = (float *) 0 ;
  long arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "float const *","Set", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Set", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  (arg1)->Set((float const *)arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_set__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  float *arg2 = (float *) 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "float const *","Set", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  (arg1)->Set((float const *)arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_set__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  double *arg2 = (double *) 0 ;
  long arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "double const *","Set", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Set", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  (arg1)->Set((double const *)arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_set__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  float **arg2 = (float **) 0 ;
  long arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "float const *const *","Set", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< float ** >(argp2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Set", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  (arg1)->Set((float const *const *)arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_set__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  double **arg2 = (double **) 0 ;
  long arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "double const *const *","Set", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< double ** >(argp2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Set", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  (arg1)->Set((double const *const *)arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_set__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  float ***arg2 = (float ***) 0 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_p_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "float const *const *const *","Set", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< float *** >(argp2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Set", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "long","Set", 5, argv[3] ));
  } 
  arg5 = static_cast< long >(val5);
  (arg1)->Set((float const *const *const *)arg2,arg3,arg4,arg5);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_set__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  double ***arg2 = (double ***) 0 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "double const *const *const *","Set", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< double *** >(argp2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Set", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "long","Set", 5, argv[3] ));
  } 
  arg5 = static_cast< long >(val5);
  (arg1)->Set((double const *const *const *)arg2,arg3,arg4,arg5);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_set__SWIG_10(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Set", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Set", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "long","Set", 5, argv[3] ));
  } 
  arg5 = static_cast< long >(val5);
  (arg1)->Set((char const *)arg2,arg3,arg4,arg5);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_set__SWIG_11(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Set", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Set", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  (arg1)->Set((char const *)arg2,arg3,arg4);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_set__SWIG_12(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Set", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  (arg1)->Set((char const *)arg2,arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_set__SWIG_13(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Set((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}



/*
  Document-method: MathGL::MglData.create

  call-seq:
    create(mx, my=1, mz=1)
    create(mx, my=1)
    create(mx)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_create__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Create", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Create", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Create", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Create", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  (arg1)->Create(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_create__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Create", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Create", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Create", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  (arg1)->Create(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_create__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Create", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Create", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  (arg1)->Create(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_create(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglData_create__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_create__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_create__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglData.create", 
    "    void MglData.create(long mx, long my, long mz)\n"
    "    void MglData.create(long mx, long my)\n"
    "    void MglData.create(long mx)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.rearrange

  call-seq:
    rearrange(mx, my=0, mz=0)
    rearrange(mx, my=0)
    rearrange(mx)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_rearrange__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Rearrange", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Rearrange", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Rearrange", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Rearrange", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  (arg1)->Rearrange(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_rearrange__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Rearrange", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Rearrange", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Rearrange", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  (arg1)->Rearrange(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_rearrange__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Rearrange", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Rearrange", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  (arg1)->Rearrange(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_rearrange(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglData_rearrange__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_rearrange__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_rearrange__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglData.rearrange", 
    "    void MglData.rearrange(long mx, long my, long mz)\n"
    "    void MglData.rearrange(long mx, long my)\n"
    "    void MglData.rearrange(long mx)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.transpose

  call-seq:
    transpose(dim="yx")
    transpose

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_transpose__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Transpose", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Transpose", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->Transpose((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_transpose__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Transpose", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  (arg1)->Transpose();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_transpose(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MglData_transpose__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglData_transpose__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MglData.transpose", 
    "    void MglData.transpose(char const *dim)\n"
    "    void MglData.transpose()\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.extend

  call-seq:
    extend(n1, n2=0)
    extend(n1)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_extend__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Extend", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Extend", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Extend", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  (arg1)->Extend(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_extend__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Extend", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Extend", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  (arg1)->Extend(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_extend(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglData_extend__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_extend__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglData.extend", 
    "    void MglData.extend(long n1, long n2)\n"
    "    void MglData.extend(long n1)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.squeeze

  call-seq:
    squeeze(rx, ry=1, rz=1, smooth=false)
    squeeze(rx, ry=1, rz=1)
    squeeze(rx, ry=1)
    squeeze(rx)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_squeeze__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Squeeze", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Squeeze", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Squeeze", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Squeeze", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_bool(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "bool","Squeeze", 5, argv[3] ));
  } 
  arg5 = static_cast< bool >(val5);
  (arg1)->Squeeze(arg2,arg3,arg4,arg5);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_squeeze__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Squeeze", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Squeeze", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Squeeze", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Squeeze", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  (arg1)->Squeeze(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_squeeze__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Squeeze", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Squeeze", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Squeeze", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  (arg1)->Squeeze(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_squeeze__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Squeeze", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Squeeze", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  (arg1)->Squeeze(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_squeeze(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglData_squeeze__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_squeeze__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_squeeze__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglData_squeeze__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglData.squeeze", 
    "    void MglData.squeeze(long rx, long ry, long rz, bool smooth)\n"
    "    void MglData.squeeze(long rx, long ry, long rz)\n"
    "    void MglData.squeeze(long rx, long ry)\n"
    "    void MglData.squeeze(long rx)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.crop

  call-seq:
    crop(n1, n2, dir='x')
    crop(n1, n2)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_crop__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  long arg3 ;
  char arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Crop", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Crop", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Crop", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_char(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "char","Crop", 4, argv[2] ));
  } 
  arg4 = static_cast< char >(val4);
  (arg1)->Crop(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_crop__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Crop", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Crop", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Crop", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  (arg1)->Crop(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_crop(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_crop__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_crop__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglData.crop", 
    "    void MglData.crop(long n1, long n2, char dir)\n"
    "    void MglData.crop(long n1, long n2)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.insert

  call-seq:
    insert(dir, at=0, num=1)
    insert(dir, at=0)
    insert(dir)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char arg2 ;
  long arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Insert", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","Insert", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Insert", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Insert", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  (arg1)->Insert(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Insert", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","Insert", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Insert", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  (arg1)->Insert(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_insert__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Insert", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","Insert", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  (arg1)->Insert(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglData_insert__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_insert__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_insert__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglData.insert", 
    "    void MglData.insert(char dir, long at, long num)\n"
    "    void MglData.insert(char dir, long at)\n"
    "    void MglData.insert(char dir)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.delete

  call-seq:
    delete(dir, at=0, num=1)
    delete(dir, at=0)
    delete(dir)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_delete__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char arg2 ;
  long arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Delete", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","Delete", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Delete", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Delete", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  (arg1)->Delete(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_delete__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Delete", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","Delete", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Delete", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  (arg1)->Delete(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_delete__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Delete", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","Delete", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  (arg1)->Delete(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_delete(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglData_delete__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_delete__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_delete__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglData.delete", 
    "    void MglData.delete(char dir, long at, long num)\n"
    "    void MglData.delete(char dir, long at)\n"
    "    void MglData.delete(char dir)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.clean

  call-seq:
    clean(id)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_clean(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Clean", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Clean", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  (arg1)->Clean(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglData.join

  call-seq:
    join(d)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_join(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Join", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Join((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}



/*
  Document-method: MathGL::MglData.modify

  call-seq:
    modify(eq, dim=0)
    modify(eq)
    modify(eq, vdat, wdat)
    modify(eq, vdat)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_modify__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Modify", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Modify", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Modify", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  (arg1)->Modify((char const *)arg2,arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_modify__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Modify", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Modify", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->Modify((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_modify__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Modify", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Modify", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Modify((char const *)arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_modify__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Modify", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Modify", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->Modify((char const *)arg2,(mglData const &)*arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete arg3;
  }
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_modify(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglData_modify__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_modify__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglData_modify__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglData_modify__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglData.modify", 
    "    void MglData.modify(char const *eq, long dim)\n"
    "    void MglData.modify(char const *eq)\n"
    "    void MglData.modify(char const *eq, mglData const &vdat, mglData const &wdat)\n"
    "    void MglData.modify(char const *eq, mglData const &vdat)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.fill

  call-seq:
    fill(gr, eq, opt="")
    fill(gr, eq)
    fill(gr, eq, vdat, opt="")
    fill(gr, eq, vdat)
    fill(gr, eq, vdat, wdat, opt="")
    fill(gr, eq, vdat, wdat)
    fill(x1, x2=NaN, dir='x')
    fill(x1, x2=NaN)
    fill(x1)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_fill__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  HMGL arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Fill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_HMGL,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "HMGL","Fill", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "HMGL","Fill", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< HMGL * >(argp2));
    }
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fill", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Fill", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Fill(arg2,(char const *)arg3,(char const *)arg4);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_fill__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  HMGL arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Fill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_HMGL,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "HMGL","Fill", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "HMGL","Fill", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< HMGL * >(argp2));
    }
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fill", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Fill(arg2,(char const *)arg3);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_fill__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  HMGL arg2 ;
  char *arg3 = (char *) 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Fill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_HMGL,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "HMGL","Fill", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "HMGL","Fill", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< HMGL * >(argp2));
    }
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fill", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Fill", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Fill(arg2,(char const *)arg3,(mglData const &)*arg4,(char const *)arg5);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_fill__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  HMGL arg2 ;
  char *arg3 = (char *) 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Fill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_HMGL,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "HMGL","Fill", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "HMGL","Fill", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< HMGL * >(argp2));
    }
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fill", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Fill(arg2,(char const *)arg3,(mglData const &)*arg4);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete arg4;
  }
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_fill__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  HMGL arg2 ;
  char *arg3 = (char *) 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Fill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_HMGL,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "HMGL","Fill", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "HMGL","Fill", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< HMGL * >(argp2));
    }
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fill", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Fill", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Fill(arg2,(char const *)arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_fill__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  HMGL arg2 ;
  char *arg3 = (char *) 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Fill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_HMGL,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "HMGL","Fill", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "HMGL","Fill", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< HMGL * >(argp2));
    }
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fill", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->Fill(arg2,(char const *)arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_fill__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  mreal arg3 ;
  char arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Fill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Fill", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Fill", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  ecode4 = SWIG_AsVal_char(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "char","Fill", 4, argv[2] ));
  } 
  arg4 = static_cast< char >(val4);
  (arg1)->Fill(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_fill__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  mreal arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Fill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Fill", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Fill", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  (arg1)->Fill(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_fill__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Fill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Fill", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  (arg1)->Fill(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_fill(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglData_fill__SWIG_8(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_HMGL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglData_fill__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_fill__SWIG_7(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_HMGL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglData_fill__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_HMGL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglData_fill__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_fill__SWIG_6(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_HMGL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglData_fill__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_HMGL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglData_fill__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_HMGL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglData_fill__SWIG_4(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglData.fill", 
    "    void MglData.fill(HMGL gr, char const *eq, char const *opt)\n"
    "    void MglData.fill(HMGL gr, char const *eq)\n"
    "    void MglData.fill(HMGL gr, char const *eq, mglData const &vdat, char const *opt)\n"
    "    void MglData.fill(HMGL gr, char const *eq, mglData const &vdat)\n"
    "    void MglData.fill(HMGL gr, char const *eq, mglData const &vdat, mglData const &wdat, char const *opt)\n"
    "    void MglData.fill(HMGL gr, char const *eq, mglData const &vdat, mglData const &wdat)\n"
    "    void MglData.fill(mreal x1, mreal x2, char dir)\n"
    "    void MglData.fill(mreal x1, mreal x2)\n"
    "    void MglData.fill(mreal x1)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.refill_gs

  call-seq:
    refill_gs(xdat, vdat, x1, x2, sl=-1)
    refill_gs(xdat, vdat, x1, x2)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_refill_gs__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mreal arg4 ;
  mreal arg5 ;
  long arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","RefillGS", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","RefillGS", 4, argv[2] ));
  } 
  arg4 = static_cast< mreal >(val4);
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "mreal","RefillGS", 5, argv[3] ));
  } 
  arg5 = static_cast< mreal >(val5);
  ecode6 = SWIG_AsVal_long(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "long","RefillGS", 6, argv[4] ));
  } 
  arg6 = static_cast< long >(val6);
  (arg1)->RefillGS((mglData const &)*arg2,(mglData const &)*arg3,arg4,arg5,arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_refill_gs__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mreal arg4 ;
  mreal arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","RefillGS", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","RefillGS", 4, argv[2] ));
  } 
  arg4 = static_cast< mreal >(val4);
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "mreal","RefillGS", 5, argv[3] ));
  } 
  arg5 = static_cast< mreal >(val5);
  (arg1)->RefillGS((mglData const &)*arg2,(mglData const &)*arg3,arg4,arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_refill_gs(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglData_refill_gs__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_long(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglData_refill_gs__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglData.refill_gs", 
    "    void MglData.refill_gs(mglData const &xdat, mglData const &vdat, mreal x1, mreal x2, long sl)\n"
    "    void MglData.refill_gs(mglData const &xdat, mglData const &vdat, mreal x1, mreal x2)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.refill

  call-seq:
    refill(xdat, vdat, x1, x2, sl=-1)
    refill(xdat, vdat, x1, x2)
    refill(xdat, vdat, p1, p2, sl=-1)
    refill(xdat, vdat, p1, p2)
    refill(xdat, ydat, vdat, p1, p2, sl=-1)
    refill(xdat, ydat, vdat, p1, p2)
    refill(xdat, ydat, zdat, vdat, p1, p2)
    refill(gr, xdat, vdat, sl=-1, opt="")
    refill(gr, xdat, vdat, sl=-1)
    refill(gr, xdat, vdat)
    refill(gr, xdat, ydat, vdat, sl=-1, opt="")
    refill(gr, xdat, ydat, vdat, sl=-1)
    refill(gr, xdat, ydat, vdat)
    refill(gr, xdat, ydat, zdat, vdat, opt="")
    refill(gr, xdat, ydat, zdat, vdat)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_refill__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mreal arg4 ;
  mreal arg5 ;
  long arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Refill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","Refill", 4, argv[2] ));
  } 
  arg4 = static_cast< mreal >(val4);
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "mreal","Refill", 5, argv[3] ));
  } 
  arg5 = static_cast< mreal >(val5);
  ecode6 = SWIG_AsVal_long(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "long","Refill", 6, argv[4] ));
  } 
  arg6 = static_cast< long >(val6);
  (arg1)->Refill((mglData const &)*arg2,(mglData const &)*arg3,arg4,arg5,arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_refill__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mreal arg4 ;
  mreal arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Refill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","Refill", 4, argv[2] ));
  } 
  arg4 = static_cast< mreal >(val4);
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "mreal","Refill", 5, argv[3] ));
  } 
  arg5 = static_cast< mreal >(val5);
  (arg1)->Refill((mglData const &)*arg2,(mglData const &)*arg3,arg4,arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_refill__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglPoint arg4 ;
  mglPoint arg5 ;
  long arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Refill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglPoint(argv[2]);
  }
  {
    arg5 = GetMglPoint(argv[3]);
  }
  ecode6 = SWIG_AsVal_long(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "long","Refill", 6, argv[4] ));
  } 
  arg6 = static_cast< long >(val6);
  (arg1)->Refill((mglData const &)*arg2,(mglData const &)*arg3,arg4,arg5,arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_refill__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglPoint arg4 ;
  mglPoint arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Refill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglPoint(argv[2]);
  }
  {
    arg5 = GetMglPoint(argv[3]);
  }
  (arg1)->Refill((mglData const &)*arg2,(mglData const &)*arg3,arg4,arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_refill__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglPoint arg5 ;
  mglPoint arg6 ;
  long arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val7 ;
  int ecode7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Refill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglPoint(argv[3]);
  }
  {
    arg6 = GetMglPoint(argv[4]);
  }
  ecode7 = SWIG_AsVal_long(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "long","Refill", 7, argv[5] ));
  } 
  arg7 = static_cast< long >(val7);
  (arg1)->Refill((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,arg5,arg6,arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_refill__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglPoint arg5 ;
  mglPoint arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Refill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglPoint(argv[3]);
  }
  {
    arg6 = GetMglPoint(argv[4]);
  }
  (arg1)->Refill((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,arg5,arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_refill__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglPoint arg6 ;
  mglPoint arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Refill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglPoint(argv[4]);
  }
  {
    arg7 = GetMglPoint(argv[5]);
  }
  (arg1)->Refill((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,arg6,arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_refill__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  HMGL arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  long arg5 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Refill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_HMGL,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "HMGL","Refill", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "HMGL","Refill", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< HMGL * >(argp2));
    }
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  ecode5 = SWIG_AsVal_long(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "long","Refill", 5, argv[3] ));
  } 
  arg5 = static_cast< long >(val5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Refill", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Refill(arg2,(mglData const &)*arg3,(mglData const &)*arg4,arg5,(char const *)arg6);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_refill__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  HMGL arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  long arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Refill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_HMGL,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "HMGL","Refill", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "HMGL","Refill", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< HMGL * >(argp2));
    }
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  ecode5 = SWIG_AsVal_long(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "long","Refill", 5, argv[3] ));
  } 
  arg5 = static_cast< long >(val5);
  (arg1)->Refill(arg2,(mglData const &)*arg3,(mglData const &)*arg4,arg5);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_refill__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  HMGL arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Refill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_HMGL,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "HMGL","Refill", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "HMGL","Refill", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< HMGL * >(argp2));
    }
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Refill(arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_refill__SWIG_10(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  HMGL arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  long arg6 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Refill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_HMGL,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "HMGL","Refill", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "HMGL","Refill", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< HMGL * >(argp2));
    }
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  ecode6 = SWIG_AsVal_long(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "long","Refill", 6, argv[4] ));
  } 
  arg6 = static_cast< long >(val6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Refill", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Refill(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,arg6,(char const *)arg7);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_refill__SWIG_11(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  HMGL arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  long arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Refill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_HMGL,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "HMGL","Refill", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "HMGL","Refill", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< HMGL * >(argp2));
    }
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  ecode6 = SWIG_AsVal_long(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "long","Refill", 6, argv[4] ));
  } 
  arg6 = static_cast< long >(val6);
  (arg1)->Refill(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,arg6);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_refill__SWIG_12(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  HMGL arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Refill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_HMGL,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "HMGL","Refill", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "HMGL","Refill", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< HMGL * >(argp2));
    }
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->Refill(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_refill__SWIG_13(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  HMGL arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Refill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_HMGL,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "HMGL","Refill", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "HMGL","Refill", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< HMGL * >(argp2));
    }
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Refill", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Refill(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_refill__SWIG_14(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  HMGL arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Refill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_HMGL,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "HMGL","Refill", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "HMGL","Refill", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< HMGL * >(argp2));
    }
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  (arg1)->Refill(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_refill(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_HMGL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglData_refill__SWIG_9(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_HMGL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglData_refill__SWIG_8(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_HMGL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglData_refill__SWIG_12(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglData_refill__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglPoint, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglPoint, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglData_refill__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_HMGL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglData_refill__SWIG_7(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_HMGL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                int res = SWIG_AsVal_long(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglData_refill__SWIG_11(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_HMGL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                return _wrap_MglData_refill__SWIG_14(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_long(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglData_refill__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglPoint, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglPoint, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                int res = SWIG_AsVal_long(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglData_refill__SWIG_2(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglPoint, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglPoint, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                return _wrap_MglData_refill__SWIG_5(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_HMGL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                int res = SWIG_AsVal_long(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglData_refill__SWIG_10(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_HMGL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglData_refill__SWIG_13(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglPoint, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglPoint, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_long(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_MglData_refill__SWIG_4(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglPoint, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglPoint, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  return _wrap_MglData_refill__SWIG_6(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglData.refill", 
    "    void MglData.refill(mglData const &xdat, mglData const &vdat, mreal x1, mreal x2, long sl)\n"
    "    void MglData.refill(mglData const &xdat, mglData const &vdat, mreal x1, mreal x2)\n"
    "    void MglData.refill(mglData const &xdat, mglData const &vdat, mglPoint p1, mglPoint p2, long sl)\n"
    "    void MglData.refill(mglData const &xdat, mglData const &vdat, mglPoint p1, mglPoint p2)\n"
    "    void MglData.refill(mglData const &xdat, mglData const &ydat, mglData const &vdat, mglPoint p1, mglPoint p2, long sl)\n"
    "    void MglData.refill(mglData const &xdat, mglData const &ydat, mglData const &vdat, mglPoint p1, mglPoint p2)\n"
    "    void MglData.refill(mglData const &xdat, mglData const &ydat, mglData const &zdat, mglData const &vdat, mglPoint p1, mglPoint p2)\n"
    "    void MglData.refill(HMGL gr, mglData const &xdat, mglData const &vdat, long sl, char const *opt)\n"
    "    void MglData.refill(HMGL gr, mglData const &xdat, mglData const &vdat, long sl)\n"
    "    void MglData.refill(HMGL gr, mglData const &xdat, mglData const &vdat)\n"
    "    void MglData.refill(HMGL gr, mglData const &xdat, mglData const &ydat, mglData const &vdat, long sl, char const *opt)\n"
    "    void MglData.refill(HMGL gr, mglData const &xdat, mglData const &ydat, mglData const &vdat, long sl)\n"
    "    void MglData.refill(HMGL gr, mglData const &xdat, mglData const &ydat, mglData const &vdat)\n"
    "    void MglData.refill(HMGL gr, mglData const &xdat, mglData const &ydat, mglData const &zdat, mglData const &vdat, char const *opt)\n"
    "    void MglData.refill(HMGL gr, mglData const &xdat, mglData const &ydat, mglData const &zdat, mglData const &vdat)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.grid

  call-seq:
    grid(gr, x, y, z, opt="")
    grid(gr, x, y, z)
    grid(xdat, ydat, vdat, p1, p2)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_grid__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  HMGL arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Grid", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_HMGL,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "HMGL","Grid", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "HMGL","Grid", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< HMGL * >(argp2));
    }
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Grid", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Grid(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_grid__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  HMGL arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Grid", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_HMGL,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "HMGL","Grid", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "HMGL","Grid", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< HMGL * >(argp2));
    }
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->Grid(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_grid__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglPoint arg5 ;
  mglPoint arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Grid", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglPoint(argv[3]);
  }
  {
    arg6 = GetMglPoint(argv[4]);
  }
  (arg1)->Grid((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,arg5,arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_grid(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_HMGL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglData_grid__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_HMGL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglData_grid__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglPoint, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglPoint, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                return _wrap_MglData_grid__SWIG_2(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglData.grid", 
    "    void MglData.grid(HMGL gr, mglData const &x, mglData const &y, mglData const &z, char const *opt)\n"
    "    void MglData.grid(HMGL gr, mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglData.grid(mglData const &xdat, mglData const &ydat, mglData const &vdat, mglPoint p1, mglPoint p2)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.put

  call-seq:
    put(val, i=-1, j=-1, k=-1)
    put(val, i=-1, j=-1)
    put(val, i=-1)
    put(val)
    put(dat, i=-1, j=-1, k=-1)
    put(dat, i=-1, j=-1)
    put(dat, i=-1)
    put(dat)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_put__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Put", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Put", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Put", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Put", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "long","Put", 5, argv[3] ));
  } 
  arg5 = static_cast< long >(val5);
  (arg1)->Put(arg2,arg3,arg4,arg5);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_put__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  long arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Put", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Put", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Put", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Put", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  (arg1)->Put(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_put__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Put", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Put", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Put", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  (arg1)->Put(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_put__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Put", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Put", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  (arg1)->Put(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_put__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Put", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Put", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Put", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "long","Put", 5, argv[3] ));
  } 
  arg5 = static_cast< long >(val5);
  (arg1)->Put((mglData const &)*arg2,arg3,arg4,arg5);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_put__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  long arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Put", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Put", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Put", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  (arg1)->Put((mglData const &)*arg2,arg3,arg4);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_put__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Put", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Put", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  (arg1)->Put((mglData const &)*arg2,arg3);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_put__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Put", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Put((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_put(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglData_put__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglData_put__SWIG_7(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_put__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_put__SWIG_6(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_put__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_put__SWIG_5(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglData_put__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglData_put__SWIG_4(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglData.put", 
    "    void MglData.put(mreal val, long i, long j, long k)\n"
    "    void MglData.put(mreal val, long i, long j)\n"
    "    void MglData.put(mreal val, long i)\n"
    "    void MglData.put(mreal val)\n"
    "    void MglData.put(mglData const &dat, long i, long j, long k)\n"
    "    void MglData.put(mglData const &dat, long i, long j)\n"
    "    void MglData.put(mglData const &dat, long i)\n"
    "    void MglData.put(mglData const &dat)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.set_column_id

  call-seq:
    set_column_id(ids)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_set_column_id(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","SetColumnId", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SetColumnId", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->SetColumnId((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: MathGL::MglData.new_id

  call-seq:
    new_id

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_new_id(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","NewId", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  (arg1)->NewId();
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglData.read

  call-seq:
    read(fname) -> bool
    read(fname, mx, my=1, mz=1) -> bool
    read(fname, mx, my=1) -> bool
    read(fname, mx) -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_read__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Read", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Read", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (bool)(arg1)->Read((char const *)arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_read__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Read", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Read", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Read", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Read", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "long","Read", 5, argv[3] ));
  } 
  arg5 = static_cast< long >(val5);
  result = (bool)(arg1)->Read((char const *)arg2,arg3,arg4,arg5);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_read__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Read", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Read", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Read", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Read", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  result = (bool)(arg1)->Read((char const *)arg2,arg3,arg4);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_read__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Read", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Read", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Read", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  result = (bool)(arg1)->Read((char const *)arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_read(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglData_read__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_read__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_read__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglData_read__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglData.read", 
    "    bool MglData.read(char const *fname)\n"
    "    bool MglData.read(char const *fname, long mx, long my, long mz)\n"
    "    bool MglData.read(char const *fname, long mx, long my)\n"
    "    bool MglData.read(char const *fname, long mx)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.save

  call-seq:
    save(fname, ns=-1)
    save(fname)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_save__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Save", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Save", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Save", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ((mglData const *)arg1)->Save((char const *)arg2,arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_save__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Save", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Save", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ((mglData const *)arg1)->Save((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_save(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglData_save__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_save__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglData.save", 
    "    void MglData.save(char const *fname, long ns)\n"
    "    void MglData.save(char const *fname)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.export

  call-seq:
    export(fname, scheme, v1=0, v2=0, ns=-1)
    export(fname, scheme, v1=0, v2=0)
    export(fname, scheme, v1=0)
    export(fname, scheme)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_export__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  mreal arg4 ;
  mreal arg5 ;
  long arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Export", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Export", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Export", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","Export", 4, argv[2] ));
  } 
  arg4 = static_cast< mreal >(val4);
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "mreal","Export", 5, argv[3] ));
  } 
  arg5 = static_cast< mreal >(val5);
  ecode6 = SWIG_AsVal_long(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "long","Export", 6, argv[4] ));
  } 
  arg6 = static_cast< long >(val6);
  ((mglData const *)arg1)->Export((char const *)arg2,(char const *)arg3,arg4,arg5,arg6);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_export__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  mreal arg4 ;
  mreal arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Export", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Export", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Export", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","Export", 4, argv[2] ));
  } 
  arg4 = static_cast< mreal >(val4);
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "mreal","Export", 5, argv[3] ));
  } 
  arg5 = static_cast< mreal >(val5);
  ((mglData const *)arg1)->Export((char const *)arg2,(char const *)arg3,arg4,arg5);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_export__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  mreal arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Export", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Export", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Export", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","Export", 4, argv[2] ));
  } 
  arg4 = static_cast< mreal >(val4);
  ((mglData const *)arg1)->Export((char const *)arg2,(char const *)arg3,arg4);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_export__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Export", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Export", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Export", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ((mglData const *)arg1)->Export((char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_export(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglData_export__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_export__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglData_export__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_long(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglData_export__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglData.export", 
    "    void MglData.export(char const *fname, char const *scheme, mreal v1, mreal v2, long ns)\n"
    "    void MglData.export(char const *fname, char const *scheme, mreal v1, mreal v2)\n"
    "    void MglData.export(char const *fname, char const *scheme, mreal v1)\n"
    "    void MglData.export(char const *fname, char const *scheme)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.import

  call-seq:
    import(fname, scheme, v1=0, v2=1)
    import(fname, scheme, v1=0)
    import(fname, scheme)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_import__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  mreal arg4 ;
  mreal arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Import", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Import", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Import", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","Import", 4, argv[2] ));
  } 
  arg4 = static_cast< mreal >(val4);
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "mreal","Import", 5, argv[3] ));
  } 
  arg5 = static_cast< mreal >(val5);
  (arg1)->Import((char const *)arg2,(char const *)arg3,arg4,arg5);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_import__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  mreal arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Import", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Import", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Import", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","Import", 4, argv[2] ));
  } 
  arg4 = static_cast< mreal >(val4);
  (arg1)->Import((char const *)arg2,(char const *)arg3,arg4);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_import__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Import", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Import", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Import", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Import((char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_import(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglData_import__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_import__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglData_import__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglData.import", 
    "    void MglData.import(char const *fname, char const *scheme, mreal v1, mreal v2)\n"
    "    void MglData.import(char const *fname, char const *scheme, mreal v1)\n"
    "    void MglData.import(char const *fname, char const *scheme)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.read_range

  call-seq:
    read_range(templ, from, to, step=1, as_slice=false) -> bool
    read_range(templ, from, to, step=1) -> bool
    read_range(templ, from, to) -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_read_range__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","ReadRange", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","ReadRange", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","ReadRange", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","ReadRange", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","ReadRange", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_bool(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "bool","ReadRange", 6, argv[4] ));
  } 
  arg6 = static_cast< bool >(val6);
  result = (bool)(arg1)->ReadRange((char const *)arg2,arg3,arg4,arg5,arg6);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_read_range__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","ReadRange", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","ReadRange", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","ReadRange", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","ReadRange", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","ReadRange", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  result = (bool)(arg1)->ReadRange((char const *)arg2,arg3,arg4,arg5);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_read_range__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","ReadRange", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","ReadRange", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","ReadRange", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","ReadRange", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  result = (bool)(arg1)->ReadRange((char const *)arg2,arg3,arg4);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_read_range(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_read_range__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglData_read_range__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglData_read_range__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglData.read_range", 
    "    bool MglData.read_range(char const *templ, double from, double to, double step, bool as_slice)\n"
    "    bool MglData.read_range(char const *templ, double from, double to, double step)\n"
    "    bool MglData.read_range(char const *templ, double from, double to)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.read_all

  call-seq:
    read_all(templ, as_slice=false) -> bool
    read_all(templ) -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_read_all__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","ReadAll", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","ReadAll", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","ReadAll", 3, argv[1] ));
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->ReadAll((char const *)arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_read_all__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","ReadAll", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","ReadAll", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (bool)(arg1)->ReadAll((char const *)arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_read_all(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglData_read_all__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_read_all__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglData.read_all", 
    "    bool MglData.read_all(char const *templ, bool as_slice)\n"
    "    bool MglData.read_all(char const *templ)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.read_mat

  call-seq:
    read_mat(fname, dim=2) -> bool
    read_mat(fname) -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_read_mat__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","ReadMat", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","ReadMat", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","ReadMat", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  result = (bool)(arg1)->ReadMat((char const *)arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_read_mat__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","ReadMat", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","ReadMat", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (bool)(arg1)->ReadMat((char const *)arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_read_mat(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglData_read_mat__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_read_mat__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglData.read_mat", 
    "    bool MglData.read_mat(char const *fname, long dim)\n"
    "    bool MglData.read_mat(char const *fname)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.read_hdf

  call-seq:
    read_hdf(fname, data) -> int

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_read_hdf(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","ReadHDF", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","ReadHDF", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","ReadHDF", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (int)(arg1)->ReadHDF((char const *)arg2,(char const *)arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}



/*
  Document-method: MathGL::MglData.save_hdf

  call-seq:
    save_hdf(fname, data, rewrite=false)
    save_hdf(fname, data)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_save_hdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","SaveHDF", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SaveHDF", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","SaveHDF", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_bool(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "bool","SaveHDF", 4, argv[2] ));
  } 
  arg4 = static_cast< bool >(val4);
  ((mglData const *)arg1)->SaveHDF((char const *)arg2,(char const *)arg3,arg4);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_save_hdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","SaveHDF", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SaveHDF", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","SaveHDF", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ((mglData const *)arg1)->SaveHDF((char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_save_hdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglData_save_hdf__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_save_hdf__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglData.save_hdf", 
    "    void MglData.save_hdf(char const *fname, char const *data, bool rewrite)\n"
    "    void MglData.save_hdf(char const *fname, char const *data)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.datas_hdf

  call-seq:
    datas_hdf(fname, buf, size) -> int

A class method.

*/
SWIGINTERN VALUE
_wrap_MglData_datas_hdf(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","mglData::DatasHDF", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","mglData::DatasHDF", 2, argv[1] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_long(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","mglData::DatasHDF", 3, argv[2] ));
  } 
  arg3 = static_cast< long >(val3);
  result = (int)mglData::DatasHDF((char const *)arg1,arg2,arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: MathGL::MglData.column

  call-seq:
    column(eq) -> MglData

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_column(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Column", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Column", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = ((mglData const *)arg1)->Column((char const *)arg2);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: MathGL::MglData.momentum

  call-seq:
    momentum(dir, how) -> MglData
    momentum(dir, m, w) -> mreal
    momentum(dir, m, w, s, k) -> mreal

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_momentum__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Momentum", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","Momentum", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Momentum", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = ((mglData const *)arg1)->Momentum(arg2,(char const *)arg3);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return vresult;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}



/*
  Document-method: MathGL::MglData.sub_data

  call-seq:
    sub_data(xx, yy=-1, zz=-1) -> MglData
    sub_data(xx, yy=-1) -> MglData
    sub_data(xx) -> MglData
    sub_data(xx, yy, zz) -> MglData
    sub_data(xx, yy) -> MglData
    sub_data(xx) -> MglData

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_sub_data__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","SubData", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","SubData", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","SubData", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","SubData", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  result = ((mglData const *)arg1)->SubData(arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_sub_data__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","SubData", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","SubData", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","SubData", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  result = ((mglData const *)arg1)->SubData(arg2,arg3);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_sub_data__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","SubData", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","SubData", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  result = ((mglData const *)arg1)->SubData(arg2);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_sub_data__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","SubData", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  result = ((mglData const *)arg1)->SubData((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_sub_data__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","SubData", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  result = ((mglData const *)arg1)->SubData((mglData const &)*arg2,(mglData const &)*arg3);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_sub_data__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","SubData", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  result = ((mglData const *)arg1)->SubData((mglData const &)*arg2);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_sub_data(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglData_sub_data__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglData_sub_data__SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_sub_data__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglData_sub_data__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_sub_data__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglData_sub_data__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglData.sub_data", 
    "    mglData MglData.sub_data(long xx, long yy, long zz)\n"
    "    mglData MglData.sub_data(long xx, long yy)\n"
    "    mglData MglData.sub_data(long xx)\n"
    "    mglData MglData.sub_data(mglData const &xx, mglData const &yy, mglData const &zz)\n"
    "    mglData MglData.sub_data(mglData const &xx, mglData const &yy)\n"
    "    mglData MglData.sub_data(mglData const &xx)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.trace

  call-seq:
    trace -> MglData

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_trace(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Trace", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  result = ((mglData const *)arg1)->Trace();
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglData.hist

  call-seq:
    hist(n, v1=0, v2=1, nsub=0) -> MglData
    hist(n, v1=0, v2=1) -> MglData
    hist(n, v1=0) -> MglData
    hist(n) -> MglData
    hist(w, n, v1=0, v2=1, nsub=0) -> MglData
    hist(w, n, v1=0, v2=1) -> MglData
    hist(w, n, v1=0) -> MglData
    hist(w, n) -> MglData

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_hist__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  mreal arg3 ;
  mreal arg4 ;
  long arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Hist", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Hist", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Hist", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","Hist", 4, argv[2] ));
  } 
  arg4 = static_cast< mreal >(val4);
  ecode5 = SWIG_AsVal_long(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "long","Hist", 5, argv[3] ));
  } 
  arg5 = static_cast< long >(val5);
  result = ((mglData const *)arg1)->Hist(arg2,arg3,arg4,arg5);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_hist__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  mreal arg3 ;
  mreal arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Hist", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Hist", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Hist", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","Hist", 4, argv[2] ));
  } 
  arg4 = static_cast< mreal >(val4);
  result = ((mglData const *)arg1)->Hist(arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_hist__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  mreal arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Hist", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Hist", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Hist", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  result = ((mglData const *)arg1)->Hist(arg2,arg3);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_hist__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Hist", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Hist", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  result = ((mglData const *)arg1)->Hist(arg2);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_hist__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  long arg3 ;
  mreal arg4 ;
  mreal arg5 ;
  long arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Hist", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Hist", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","Hist", 4, argv[2] ));
  } 
  arg4 = static_cast< mreal >(val4);
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "mreal","Hist", 5, argv[3] ));
  } 
  arg5 = static_cast< mreal >(val5);
  ecode6 = SWIG_AsVal_long(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "long","Hist", 6, argv[4] ));
  } 
  arg6 = static_cast< long >(val6);
  result = ((mglData const *)arg1)->Hist((mglData const &)*arg2,arg3,arg4,arg5,arg6);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_hist__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  long arg3 ;
  mreal arg4 ;
  mreal arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Hist", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Hist", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","Hist", 4, argv[2] ));
  } 
  arg4 = static_cast< mreal >(val4);
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "mreal","Hist", 5, argv[3] ));
  } 
  arg5 = static_cast< mreal >(val5);
  result = ((mglData const *)arg1)->Hist((mglData const &)*arg2,arg3,arg4,arg5);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_hist__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  long arg3 ;
  mreal arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Hist", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Hist", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","Hist", 4, argv[2] ));
  } 
  arg4 = static_cast< mreal >(val4);
  result = ((mglData const *)arg1)->Hist((mglData const &)*arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_hist__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Hist", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Hist", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  result = ((mglData const *)arg1)->Hist((mglData const &)*arg2,arg3);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_hist(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglData_hist__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_hist__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_hist__SWIG_7(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_hist__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_hist__SWIG_6(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglData_hist__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglData_hist__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_long(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglData_hist__SWIG_4(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglData.hist", 
    "    mglData MglData.hist(long n, mreal v1, mreal v2, long nsub)\n"
    "    mglData MglData.hist(long n, mreal v1, mreal v2)\n"
    "    mglData MglData.hist(long n, mreal v1)\n"
    "    mglData MglData.hist(long n)\n"
    "    mglData MglData.hist(mglData const &w, long n, mreal v1, mreal v2, long nsub)\n"
    "    mglData MglData.hist(mglData const &w, long n, mreal v1, mreal v2)\n"
    "    mglData MglData.hist(mglData const &w, long n, mreal v1)\n"
    "    mglData MglData.hist(mglData const &w, long n)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.sum

  call-seq:
    sum(dir) -> MglData

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_sum(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Sum", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Sum", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = ((mglData const *)arg1)->Sum((char const *)arg2);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: MathGL::MglData.max

  call-seq:
    max(dir) -> MglData

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_max(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Max", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Max", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = ((mglData const *)arg1)->Max((char const *)arg2);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: MathGL::MglData.min

  call-seq:
    min(dir) -> MglData

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_min(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Min", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Min", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = ((mglData const *)arg1)->Min((char const *)arg2);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: MathGL::MglData.combine

  call-seq:
    combine(dat) -> MglData

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_combine(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Combine", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  result = ((mglData const *)arg1)->Combine((mglData const &)*arg2);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  return Qnil;
}



/*
  Document-method: MathGL::MglData.resize

  call-seq:
    resize(mx, my=0, mz=0, x1=0, x2=1, y1=0, y2=1, z1=0, z2=1) -> MglData
    resize(mx, my=0, mz=0, x1=0, x2=1, y1=0, y2=1, z1=0) -> MglData
    resize(mx, my=0, mz=0, x1=0, x2=1, y1=0, y2=1) -> MglData
    resize(mx, my=0, mz=0, x1=0, x2=1, y1=0) -> MglData
    resize(mx, my=0, mz=0, x1=0, x2=1) -> MglData
    resize(mx, my=0, mz=0, x1=0) -> MglData
    resize(mx, my=0, mz=0) -> MglData
    resize(mx, my=0) -> MglData
    resize(mx) -> MglData

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_resize__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  mreal arg5 ;
  mreal arg6 ;
  mreal arg7 ;
  mreal arg8 ;
  mreal arg9 ;
  mreal arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 9) || (argc > 9)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 9)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Resize", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Resize", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Resize", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Resize", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "mreal","Resize", 5, argv[3] ));
  } 
  arg5 = static_cast< mreal >(val5);
  ecode6 = SWIG_AsVal_float(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "mreal","Resize", 6, argv[4] ));
  } 
  arg6 = static_cast< mreal >(val6);
  ecode7 = SWIG_AsVal_float(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "mreal","Resize", 7, argv[5] ));
  } 
  arg7 = static_cast< mreal >(val7);
  ecode8 = SWIG_AsVal_float(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), Ruby_Format_TypeError( "", "mreal","Resize", 8, argv[6] ));
  } 
  arg8 = static_cast< mreal >(val8);
  ecode9 = SWIG_AsVal_float(argv[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), Ruby_Format_TypeError( "", "mreal","Resize", 9, argv[7] ));
  } 
  arg9 = static_cast< mreal >(val9);
  ecode10 = SWIG_AsVal_float(argv[8], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), Ruby_Format_TypeError( "", "mreal","Resize", 10, argv[8] ));
  } 
  arg10 = static_cast< mreal >(val10);
  result = ((mglData const *)arg1)->Resize(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_resize__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  mreal arg5 ;
  mreal arg6 ;
  mreal arg7 ;
  mreal arg8 ;
  mreal arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Resize", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Resize", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Resize", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Resize", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "mreal","Resize", 5, argv[3] ));
  } 
  arg5 = static_cast< mreal >(val5);
  ecode6 = SWIG_AsVal_float(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "mreal","Resize", 6, argv[4] ));
  } 
  arg6 = static_cast< mreal >(val6);
  ecode7 = SWIG_AsVal_float(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "mreal","Resize", 7, argv[5] ));
  } 
  arg7 = static_cast< mreal >(val7);
  ecode8 = SWIG_AsVal_float(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), Ruby_Format_TypeError( "", "mreal","Resize", 8, argv[6] ));
  } 
  arg8 = static_cast< mreal >(val8);
  ecode9 = SWIG_AsVal_float(argv[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), Ruby_Format_TypeError( "", "mreal","Resize", 9, argv[7] ));
  } 
  arg9 = static_cast< mreal >(val9);
  result = ((mglData const *)arg1)->Resize(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_resize__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  mreal arg5 ;
  mreal arg6 ;
  mreal arg7 ;
  mreal arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Resize", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Resize", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Resize", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Resize", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "mreal","Resize", 5, argv[3] ));
  } 
  arg5 = static_cast< mreal >(val5);
  ecode6 = SWIG_AsVal_float(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "mreal","Resize", 6, argv[4] ));
  } 
  arg6 = static_cast< mreal >(val6);
  ecode7 = SWIG_AsVal_float(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "mreal","Resize", 7, argv[5] ));
  } 
  arg7 = static_cast< mreal >(val7);
  ecode8 = SWIG_AsVal_float(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), Ruby_Format_TypeError( "", "mreal","Resize", 8, argv[6] ));
  } 
  arg8 = static_cast< mreal >(val8);
  result = ((mglData const *)arg1)->Resize(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_resize__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  mreal arg5 ;
  mreal arg6 ;
  mreal arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Resize", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Resize", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Resize", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Resize", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "mreal","Resize", 5, argv[3] ));
  } 
  arg5 = static_cast< mreal >(val5);
  ecode6 = SWIG_AsVal_float(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "mreal","Resize", 6, argv[4] ));
  } 
  arg6 = static_cast< mreal >(val6);
  ecode7 = SWIG_AsVal_float(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "mreal","Resize", 7, argv[5] ));
  } 
  arg7 = static_cast< mreal >(val7);
  result = ((mglData const *)arg1)->Resize(arg2,arg3,arg4,arg5,arg6,arg7);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_resize__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  mreal arg5 ;
  mreal arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Resize", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Resize", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Resize", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Resize", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "mreal","Resize", 5, argv[3] ));
  } 
  arg5 = static_cast< mreal >(val5);
  ecode6 = SWIG_AsVal_float(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "mreal","Resize", 6, argv[4] ));
  } 
  arg6 = static_cast< mreal >(val6);
  result = ((mglData const *)arg1)->Resize(arg2,arg3,arg4,arg5,arg6);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_resize__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  mreal arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Resize", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Resize", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Resize", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Resize", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "mreal","Resize", 5, argv[3] ));
  } 
  arg5 = static_cast< mreal >(val5);
  result = ((mglData const *)arg1)->Resize(arg2,arg3,arg4,arg5);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_resize__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Resize", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Resize", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Resize", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Resize", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  result = ((mglData const *)arg1)->Resize(arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_resize__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Resize", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Resize", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Resize", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  result = ((mglData const *)arg1)->Resize(arg2,arg3);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_resize__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Resize", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Resize", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  result = ((mglData const *)arg1)->Resize(arg2);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_resize(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[11];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 11) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglData_resize__SWIG_8(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_resize__SWIG_7(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_resize__SWIG_6(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglData_resize__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglData_resize__SWIG_4(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_float(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_MglData_resize__SWIG_3(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_float(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_float(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_MglData_resize__SWIG_2(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_float(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_float(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_float(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_MglData_resize__SWIG_1(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_float(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_float(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_float(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_float(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        return _wrap_MglData_resize__SWIG_0(nargs, args, self);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 11, "MglData.resize", 
    "    mglData MglData.resize(long mx, long my, long mz, mreal x1, mreal x2, mreal y1, mreal y2, mreal z1, mreal z2)\n"
    "    mglData MglData.resize(long mx, long my, long mz, mreal x1, mreal x2, mreal y1, mreal y2, mreal z1)\n"
    "    mglData MglData.resize(long mx, long my, long mz, mreal x1, mreal x2, mreal y1, mreal y2)\n"
    "    mglData MglData.resize(long mx, long my, long mz, mreal x1, mreal x2, mreal y1)\n"
    "    mglData MglData.resize(long mx, long my, long mz, mreal x1, mreal x2)\n"
    "    mglData MglData.resize(long mx, long my, long mz, mreal x1)\n"
    "    mglData MglData.resize(long mx, long my, long mz)\n"
    "    mglData MglData.resize(long mx, long my)\n"
    "    mglData MglData.resize(long mx)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.evaluate

  call-seq:
    evaluate(idat, norm=true) -> MglData
    evaluate(idat) -> MglData
    evaluate(idat, jdat, norm=true) -> MglData
    evaluate(idat, jdat) -> MglData
    evaluate(idat, jdat, kdat, norm=true) -> MglData
    evaluate(idat, jdat, kdat) -> MglData

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_evaluate__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Evaluate", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","Evaluate", 3, argv[1] ));
  } 
  arg3 = static_cast< bool >(val3);
  result = ((mglData const *)arg1)->Evaluate((mglData const &)*arg2,arg3);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_evaluate__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Evaluate", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  result = ((mglData const *)arg1)->Evaluate((mglData const &)*arg2);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_evaluate__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Evaluate", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  ecode4 = SWIG_AsVal_bool(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "bool","Evaluate", 4, argv[2] ));
  } 
  arg4 = static_cast< bool >(val4);
  result = ((mglData const *)arg1)->Evaluate((mglData const &)*arg2,(mglData const &)*arg3,arg4);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_evaluate__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Evaluate", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  result = ((mglData const *)arg1)->Evaluate((mglData const &)*arg2,(mglData const &)*arg3);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_evaluate__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Evaluate", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  ecode5 = SWIG_AsVal_bool(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "bool","Evaluate", 5, argv[3] ));
  } 
  arg5 = static_cast< bool >(val5);
  result = ((mglData const *)arg1)->Evaluate((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,arg5);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_evaluate__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Evaluate", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  result = ((mglData const *)arg1)->Evaluate((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_evaluate(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglData_evaluate__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglData_evaluate__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_evaluate__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglData_evaluate__SWIG_5(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_evaluate__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglData_evaluate__SWIG_4(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglData.evaluate", 
    "    mglData MglData.evaluate(mglData const &idat, bool norm)\n"
    "    mglData MglData.evaluate(mglData const &idat)\n"
    "    mglData MglData.evaluate(mglData const &idat, mglData const &jdat, bool norm)\n"
    "    mglData MglData.evaluate(mglData const &idat, mglData const &jdat)\n"
    "    mglData MglData.evaluate(mglData const &idat, mglData const &jdat, mglData const &kdat, bool norm)\n"
    "    mglData MglData.evaluate(mglData const &idat, mglData const &jdat, mglData const &kdat)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.roots

  call-seq:
    roots(func, var='x') -> MglData
    roots(func) -> MglData

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_roots__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Roots", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Roots", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_char(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "char","Roots", 3, argv[1] ));
  } 
  arg3 = static_cast< char >(val3);
  result = ((mglData const *)arg1)->Roots((char const *)arg2,arg3);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_roots__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Roots", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Roots", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = ((mglData const *)arg1)->Roots((char const *)arg2);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_roots(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglData_roots__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_roots__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglData.roots", 
    "    mglData MglData.roots(char const *func, char var)\n"
    "    mglData MglData.roots(char const *func)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.correl

  call-seq:
    correl(dat, dir) -> MglData

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_correl(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Correl", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Correl", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = ((mglData const *)arg1)->Correl((mglData const &)*arg2,(char const *)arg3);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return vresult;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}



/*
  Document-method: MathGL::MglData.auto_correl

  call-seq:
    auto_correl(dir) -> MglData

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_auto_correl(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","AutoCorrel", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","AutoCorrel", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = ((mglData const *)arg1)->AutoCorrel((char const *)arg2);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: MathGL::MglData.cum_sum

  call-seq:
    cum_sum(dir)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_cum_sum(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","CumSum", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","CumSum", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->CumSum((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: MathGL::MglData.integral

  call-seq:
    integral(dir)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_integral(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Integral", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Integral", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->Integral((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: MathGL::MglData.diff

  call-seq:
    diff(dir)
    diff(v1, v2)
    diff(v1, v2, v3)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_diff__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Diff", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Diff", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->Diff((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_diff__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Diff", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->Diff((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_diff__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Diff", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Diff((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_diff(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglData_diff__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglData_diff__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglData_diff__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglData.diff", 
    "    void MglData.diff(char const *dir)\n"
    "    void MglData.diff(mglData const &v1, mglData const &v2)\n"
    "    void MglData.diff(mglData const &v1, mglData const &v2, mglData const &v3)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.diff2

  call-seq:
    diff2(dir)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_diff2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Diff2", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Diff2", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->Diff2((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: MathGL::MglData.swap

  call-seq:
    swap(dir)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_swap(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Swap", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Swap", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->Swap((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: MathGL::MglData.roll

  call-seq:
    roll(dir, num)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_roll(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Roll", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","Roll", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Roll", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  (arg1)->Roll(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglData.mirror

  call-seq:
    mirror(dir)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_mirror(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Mirror", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Mirror", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->Mirror((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: MathGL::MglData.sort

  call-seq:
    sort(idx, idy=-1)
    sort(idx)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_sort__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Sort", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Sort", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Sort", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  (arg1)->Sort(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_sort__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Sort", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","Sort", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  (arg1)->Sort(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_sort(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglData_sort__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_sort__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglData.sort", 
    "    void MglData.sort(long idx, long idy)\n"
    "    void MglData.sort(long idx)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.envelop

  call-seq:
    envelop(dir='x')
    envelop

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_envelop__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Envelop", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","Envelop", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  (arg1)->Envelop(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_envelop__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Envelop", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  (arg1)->Envelop();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_envelop(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MglData_envelop__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglData_envelop__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MglData.envelop", 
    "    void MglData.envelop(char dir)\n"
    "    void MglData.envelop()\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.sew

  call-seq:
    sew(dirs="xyz", da=2*Pi)
    sew(dirs="xyz")
    sew

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_sew__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  mreal arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Sew", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Sew", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Sew", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  (arg1)->Sew((char const *)arg2,arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_sew__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Sew", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Sew", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->Sew((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_sew__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Sew", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  (arg1)->Sew();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_sew(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MglData_sew__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglData_sew__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_sew__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglData.sew", 
    "    void MglData.sew(char const *dirs, mreal da)\n"
    "    void MglData.sew(char const *dirs)\n"
    "    void MglData.sew()\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.smooth

  call-seq:
    smooth(dirs="xyz", delta=0)
    smooth(dirs="xyz")
    smooth

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_smooth__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  mreal arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Smooth", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Smooth", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Smooth", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  (arg1)->Smooth((char const *)arg2,arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_smooth__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Smooth", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Smooth", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->Smooth((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_smooth__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Smooth", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  (arg1)->Smooth();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_smooth(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MglData_smooth__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglData_smooth__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_smooth__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglData.smooth", 
    "    void MglData.smooth(char const *dirs, mreal delta)\n"
    "    void MglData.smooth(char const *dirs)\n"
    "    void MglData.smooth()\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.norm

  call-seq:
    norm(v1=0, v2=1, sym=false, dim=0)
    norm(v1=0, v2=1, sym=false)
    norm(v1=0, v2=1)
    norm(v1=0)
    norm

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_norm__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  mreal arg3 ;
  bool arg4 ;
  long arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Norm", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Norm", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Norm", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  ecode4 = SWIG_AsVal_bool(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "bool","Norm", 4, argv[2] ));
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_long(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "long","Norm", 5, argv[3] ));
  } 
  arg5 = static_cast< long >(val5);
  (arg1)->Norm(arg2,arg3,arg4,arg5);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_norm__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  mreal arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Norm", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Norm", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Norm", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  ecode4 = SWIG_AsVal_bool(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "bool","Norm", 4, argv[2] ));
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->Norm(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_norm__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  mreal arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Norm", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Norm", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Norm", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  (arg1)->Norm(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_norm__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Norm", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Norm", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  (arg1)->Norm(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_norm__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Norm", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  (arg1)->Norm();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_norm(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MglData_norm__SWIG_4(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglData_norm__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_norm__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_norm__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglData_norm__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglData.norm", 
    "    void MglData.norm(mreal v1, mreal v2, bool sym, long dim)\n"
    "    void MglData.norm(mreal v1, mreal v2, bool sym)\n"
    "    void MglData.norm(mreal v1, mreal v2)\n"
    "    void MglData.norm(mreal v1)\n"
    "    void MglData.norm()\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.norm_sl

  call-seq:
    norm_sl(v1=0, v2=1, dir='z', keep_en=true, sym=false)
    norm_sl(v1=0, v2=1, dir='z', keep_en=true)
    norm_sl(v1=0, v2=1, dir='z')
    norm_sl(v1=0, v2=1)
    norm_sl(v1=0)
    norm_sl

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_norm_sl__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  mreal arg3 ;
  char arg4 ;
  bool arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","NormSl", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","NormSl", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","NormSl", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  ecode4 = SWIG_AsVal_char(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "char","NormSl", 4, argv[2] ));
  } 
  arg4 = static_cast< char >(val4);
  ecode5 = SWIG_AsVal_bool(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "bool","NormSl", 5, argv[3] ));
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "bool","NormSl", 6, argv[4] ));
  } 
  arg6 = static_cast< bool >(val6);
  (arg1)->NormSl(arg2,arg3,arg4,arg5,arg6);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_norm_sl__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  mreal arg3 ;
  char arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","NormSl", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","NormSl", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","NormSl", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  ecode4 = SWIG_AsVal_char(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "char","NormSl", 4, argv[2] ));
  } 
  arg4 = static_cast< char >(val4);
  ecode5 = SWIG_AsVal_bool(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "bool","NormSl", 5, argv[3] ));
  } 
  arg5 = static_cast< bool >(val5);
  (arg1)->NormSl(arg2,arg3,arg4,arg5);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_norm_sl__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  mreal arg3 ;
  char arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","NormSl", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","NormSl", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","NormSl", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  ecode4 = SWIG_AsVal_char(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "char","NormSl", 4, argv[2] ));
  } 
  arg4 = static_cast< char >(val4);
  (arg1)->NormSl(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_norm_sl__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  mreal arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","NormSl", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","NormSl", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","NormSl", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  (arg1)->NormSl(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_norm_sl__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","NormSl", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","NormSl", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  (arg1)->NormSl(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_norm_sl__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","NormSl", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  (arg1)->NormSl();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_norm_sl(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MglData_norm_sl__SWIG_5(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglData_norm_sl__SWIG_4(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_norm_sl__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_norm_sl__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglData_norm_sl__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglData_norm_sl__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglData.norm_sl", 
    "    void MglData.norm_sl(mreal v1, mreal v2, char dir, bool keep_en, bool sym)\n"
    "    void MglData.norm_sl(mreal v1, mreal v2, char dir, bool keep_en)\n"
    "    void MglData.norm_sl(mreal v1, mreal v2, char dir)\n"
    "    void MglData.norm_sl(mreal v1, mreal v2)\n"
    "    void MglData.norm_sl(mreal v1)\n"
    "    void MglData.norm_sl()\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.hankel

  call-seq:
    hankel(dir)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_hankel(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Hankel", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Hankel", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->Hankel((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: MathGL::MglData.sin_fft

  call-seq:
    sin_fft(dir)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_sin_fft(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","SinFFT", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SinFFT", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->SinFFT((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: MathGL::MglData.cos_fft

  call-seq:
    cos_fft(dir)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_cos_fft(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","CosFFT", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","CosFFT", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->CosFFT((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: MathGL::MglData.fill_sample

  call-seq:
    fill_sample(how)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_fill_sample(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","FillSample", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","FillSample", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->FillSample((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: MathGL::MglData.solve

  call-seq:
    solve(val, use_spline=true, i0=0) -> mreal
    solve(val, use_spline=true) -> mreal
    solve(val) -> mreal
    solve(val, dir, norm=true) -> MglData
    solve(val, dir) -> MglData
    solve(val, dir, i0, norm=true) -> MglData
    solve(val, dir, i0) -> MglData

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_solve__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  bool arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Solve", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Solve", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","Solve", 3, argv[1] ));
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Solve", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  result = (mreal)((mglData const *)arg1)->Solve(arg2,arg3,arg4);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_solve__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Solve", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Solve", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","Solve", 3, argv[1] ));
  } 
  arg3 = static_cast< bool >(val3);
  result = (mreal)((mglData const *)arg1)->Solve(arg2,arg3);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_solve__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Solve", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Solve", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  result = (mreal)((mglData const *)arg1)->Solve(arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_solve__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  char arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Solve", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Solve", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_char(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "char","Solve", 3, argv[1] ));
  } 
  arg3 = static_cast< char >(val3);
  ecode4 = SWIG_AsVal_bool(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "bool","Solve", 4, argv[2] ));
  } 
  arg4 = static_cast< bool >(val4);
  result = ((mglData const *)arg1)->Solve(arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_solve__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Solve", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Solve", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_char(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "char","Solve", 3, argv[1] ));
  } 
  arg3 = static_cast< char >(val3);
  result = ((mglData const *)arg1)->Solve(arg2,arg3);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_solve__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  char arg3 ;
  mglData *arg4 = 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Solve", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Solve", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_char(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "char","Solve", 3, argv[1] ));
  } 
  arg3 = static_cast< char >(val3);
  {
    arg4 = GetMglData(argv[2]);
  }
  ecode5 = SWIG_AsVal_bool(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "bool","Solve", 5, argv[3] ));
  } 
  arg5 = static_cast< bool >(val5);
  result = ((mglData const *)arg1)->Solve(arg2,arg3,(mglData const &)*arg4,arg5);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg4;
  }
  return vresult;
fail:
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_solve__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  char arg3 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Solve", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Solve", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_char(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "char","Solve", 3, argv[1] ));
  } 
  arg3 = static_cast< char >(val3);
  {
    arg4 = GetMglData(argv[2]);
  }
  result = ((mglData const *)arg1)->Solve(arg2,arg3,(mglData const &)*arg4);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg4;
  }
  return vresult;
fail:
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_solve(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglData_solve__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_solve__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_solve__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglData_solve__SWIG_6(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_solve__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_solve__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglData_solve__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglData.solve", 
    "    mglData MglData.solve(mreal val, bool use_spline, long i0)\n"
    "    mglData MglData.solve(mreal val, bool use_spline)\n"
    "    mglData MglData.solve(mreal val)\n"
    "    mglData MglData.solve(mreal val, char dir, bool norm)\n"
    "    mglData MglData.solve(mreal val, char dir)\n"
    "    mglData MglData.solve(mreal val, char dir, mglData const &i0, bool norm)\n"
    "    mglData MglData.solve(mreal val, char dir, mglData const &i0)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.spline

  call-seq:
    spline(x, y=0, z=0) -> mreal
    spline(x, y=0) -> mreal
    spline(x) -> mreal
    spline(dif, x, y=0, z=0) -> mreal
    spline(dif, x, y=0) -> mreal
    spline(dif, x) -> mreal

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_spline__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  mreal arg3 ;
  mreal arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Spline", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Spline", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Spline", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","Spline", 4, argv[2] ));
  } 
  arg4 = static_cast< mreal >(val4);
  result = (mreal)((mglData const *)arg1)->Spline(arg2,arg3,arg4);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_spline__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  mreal arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Spline", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Spline", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Spline", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  result = (mreal)((mglData const *)arg1)->Spline(arg2,arg3);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_spline__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Spline", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Spline", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  result = (mreal)((mglData const *)arg1)->Spline(arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglData.spline1

  call-seq:
    spline1(x, y=0, z=0) -> mreal
    spline1(x, y=0) -> mreal
    spline1(x) -> mreal
    spline1(dif, x, y=0, z=0) -> mreal
    spline1(dif, x, y=0) -> mreal
    spline1(dif, x) -> mreal

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_spline1__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  mreal arg3 ;
  mreal arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Spline1", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Spline1", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Spline1", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","Spline1", 4, argv[2] ));
  } 
  arg4 = static_cast< mreal >(val4);
  result = (mreal)((mglData const *)arg1)->Spline1(arg2,arg3,arg4);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_spline1__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  mreal arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Spline1", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Spline1", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Spline1", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  result = (mreal)((mglData const *)arg1)->Spline1(arg2,arg3);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_spline1__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Spline1", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Spline1", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  result = (mreal)((mglData const *)arg1)->Spline1(arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglData.linear

  call-seq:
    linear(x, y=0, z=0) -> mreal
    linear(x, y=0) -> mreal
    linear(x) -> mreal
    linear(dif, x, y=0, z=0) -> mreal
    linear(dif, x, y=0) -> mreal
    linear(dif, x) -> mreal

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_linear__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  mreal arg3 ;
  mreal arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Linear", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Linear", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Linear", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","Linear", 4, argv[2] ));
  } 
  arg4 = static_cast< mreal >(val4);
  result = (mreal)((mglData const *)arg1)->Linear(arg2,arg3,arg4);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_linear__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  mreal arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Linear", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Linear", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Linear", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  result = (mreal)((mglData const *)arg1)->Linear(arg2,arg3);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_linear__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Linear", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Linear", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  result = (mreal)((mglData const *)arg1)->Linear(arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglData.linear1

  call-seq:
    linear1(x, y=0, z=0) -> mreal
    linear1(x, y=0) -> mreal
    linear1(x) -> mreal
    linear1(dif, x, y=0, z=0) -> mreal
    linear1(dif, x, y=0) -> mreal
    linear1(dif, x) -> mreal

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_linear1__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  mreal arg3 ;
  mreal arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Linear1", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Linear1", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Linear1", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","Linear1", 4, argv[2] ));
  } 
  arg4 = static_cast< mreal >(val4);
  result = (mreal)((mglData const *)arg1)->Linear1(arg2,arg3,arg4);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_linear1__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  mreal arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Linear1", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Linear1", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Linear1", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  result = (mreal)((mglData const *)arg1)->Linear1(arg2,arg3);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_linear1__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Linear1", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","Linear1", 2, argv[0] ));
  } 
  arg2 = static_cast< mreal >(val2);
  result = (mreal)((mglData const *)arg1)->Linear1(arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglData.spline

  call-seq:
    spline(x, y=0, z=0) -> mreal
    spline(x, y=0) -> mreal
    spline(x) -> mreal
    spline(dif, x, y=0, z=0) -> mreal
    spline(dif, x, y=0) -> mreal
    spline(dif, x) -> mreal

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_spline__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglPoint *arg2 = 0 ;
  mreal arg3 ;
  mreal arg4 ;
  mreal arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Spline", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_mglPoint,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglPoint &","Spline", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mglPoint &","Spline", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< mglPoint * >(argp2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Spline", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","Spline", 4, argv[2] ));
  } 
  arg4 = static_cast< mreal >(val4);
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "mreal","Spline", 5, argv[3] ));
  } 
  arg5 = static_cast< mreal >(val5);
  result = (mreal)((mglData const *)arg1)->Spline(*arg2,arg3,arg4,arg5);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_spline__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglPoint *arg2 = 0 ;
  mreal arg3 ;
  mreal arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Spline", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_mglPoint,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglPoint &","Spline", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mglPoint &","Spline", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< mglPoint * >(argp2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Spline", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","Spline", 4, argv[2] ));
  } 
  arg4 = static_cast< mreal >(val4);
  result = (mreal)((mglData const *)arg1)->Spline(*arg2,arg3,arg4);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_spline__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglPoint *arg2 = 0 ;
  mreal arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Spline", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_mglPoint,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglPoint &","Spline", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mglPoint &","Spline", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< mglPoint * >(argp2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Spline", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  result = (mreal)((mglData const *)arg1)->Spline(*arg2,arg3);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_spline(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglData_spline__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_spline__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_spline__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_spline__SWIG_4(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_spline__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglData_spline__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglData.spline", 
    "    mreal MglData.spline(mreal x, mreal y, mreal z)\n"
    "    mreal MglData.spline(mreal x, mreal y)\n"
    "    mreal MglData.spline(mreal x)\n"
    "    mreal MglData.spline(mglPoint &dif, mreal x, mreal y, mreal z)\n"
    "    mreal MglData.spline(mglPoint &dif, mreal x, mreal y)\n"
    "    mreal MglData.spline(mglPoint &dif, mreal x)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.spline1

  call-seq:
    spline1(x, y=0, z=0) -> mreal
    spline1(x, y=0) -> mreal
    spline1(x) -> mreal
    spline1(dif, x, y=0, z=0) -> mreal
    spline1(dif, x, y=0) -> mreal
    spline1(dif, x) -> mreal

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_spline1__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglPoint *arg2 = 0 ;
  mreal arg3 ;
  mreal arg4 ;
  mreal arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Spline1", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_mglPoint,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglPoint &","Spline1", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mglPoint &","Spline1", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< mglPoint * >(argp2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Spline1", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","Spline1", 4, argv[2] ));
  } 
  arg4 = static_cast< mreal >(val4);
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "mreal","Spline1", 5, argv[3] ));
  } 
  arg5 = static_cast< mreal >(val5);
  result = (mreal)((mglData const *)arg1)->Spline1(*arg2,arg3,arg4,arg5);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_spline1__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglPoint *arg2 = 0 ;
  mreal arg3 ;
  mreal arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Spline1", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_mglPoint,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglPoint &","Spline1", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mglPoint &","Spline1", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< mglPoint * >(argp2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Spline1", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","Spline1", 4, argv[2] ));
  } 
  arg4 = static_cast< mreal >(val4);
  result = (mreal)((mglData const *)arg1)->Spline1(*arg2,arg3,arg4);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_spline1__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglPoint *arg2 = 0 ;
  mreal arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Spline1", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_mglPoint,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglPoint &","Spline1", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mglPoint &","Spline1", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< mglPoint * >(argp2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Spline1", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  result = (mreal)((mglData const *)arg1)->Spline1(*arg2,arg3);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_spline1(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglData_spline1__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_spline1__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_spline1__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_spline1__SWIG_4(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_spline1__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglData_spline1__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglData.spline1", 
    "    mreal MglData.spline1(mreal x, mreal y, mreal z)\n"
    "    mreal MglData.spline1(mreal x, mreal y)\n"
    "    mreal MglData.spline1(mreal x)\n"
    "    mreal MglData.spline1(mglPoint &dif, mreal x, mreal y, mreal z)\n"
    "    mreal MglData.spline1(mglPoint &dif, mreal x, mreal y)\n"
    "    mreal MglData.spline1(mglPoint &dif, mreal x)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.linear

  call-seq:
    linear(x, y=0, z=0) -> mreal
    linear(x, y=0) -> mreal
    linear(x) -> mreal
    linear(dif, x, y=0, z=0) -> mreal
    linear(dif, x, y=0) -> mreal
    linear(dif, x) -> mreal

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_linear__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglPoint *arg2 = 0 ;
  mreal arg3 ;
  mreal arg4 ;
  mreal arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Linear", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_mglPoint,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglPoint &","Linear", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mglPoint &","Linear", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< mglPoint * >(argp2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Linear", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","Linear", 4, argv[2] ));
  } 
  arg4 = static_cast< mreal >(val4);
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "mreal","Linear", 5, argv[3] ));
  } 
  arg5 = static_cast< mreal >(val5);
  result = (mreal)((mglData const *)arg1)->Linear(*arg2,arg3,arg4,arg5);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_linear__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglPoint *arg2 = 0 ;
  mreal arg3 ;
  mreal arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Linear", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_mglPoint,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglPoint &","Linear", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mglPoint &","Linear", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< mglPoint * >(argp2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Linear", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","Linear", 4, argv[2] ));
  } 
  arg4 = static_cast< mreal >(val4);
  result = (mreal)((mglData const *)arg1)->Linear(*arg2,arg3,arg4);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_linear__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglPoint *arg2 = 0 ;
  mreal arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Linear", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_mglPoint,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglPoint &","Linear", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mglPoint &","Linear", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< mglPoint * >(argp2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Linear", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  result = (mreal)((mglData const *)arg1)->Linear(*arg2,arg3);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_linear(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglData_linear__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_linear__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_linear__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_linear__SWIG_4(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_linear__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglData_linear__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglData.linear", 
    "    mreal MglData.linear(mreal x, mreal y, mreal z)\n"
    "    mreal MglData.linear(mreal x, mreal y)\n"
    "    mreal MglData.linear(mreal x)\n"
    "    mreal MglData.linear(mglPoint &dif, mreal x, mreal y, mreal z)\n"
    "    mreal MglData.linear(mglPoint &dif, mreal x, mreal y)\n"
    "    mreal MglData.linear(mglPoint &dif, mreal x)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.linear1

  call-seq:
    linear1(x, y=0, z=0) -> mreal
    linear1(x, y=0) -> mreal
    linear1(x) -> mreal
    linear1(dif, x, y=0, z=0) -> mreal
    linear1(dif, x, y=0) -> mreal
    linear1(dif, x) -> mreal

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_linear1__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglPoint *arg2 = 0 ;
  mreal arg3 ;
  mreal arg4 ;
  mreal arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Linear1", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_mglPoint,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglPoint &","Linear1", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mglPoint &","Linear1", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< mglPoint * >(argp2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Linear1", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","Linear1", 4, argv[2] ));
  } 
  arg4 = static_cast< mreal >(val4);
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "mreal","Linear1", 5, argv[3] ));
  } 
  arg5 = static_cast< mreal >(val5);
  result = (mreal)((mglData const *)arg1)->Linear1(*arg2,arg3,arg4,arg5);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_linear1__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglPoint *arg2 = 0 ;
  mreal arg3 ;
  mreal arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Linear1", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_mglPoint,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglPoint &","Linear1", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mglPoint &","Linear1", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< mglPoint * >(argp2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Linear1", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","Linear1", 4, argv[2] ));
  } 
  arg4 = static_cast< mreal >(val4);
  result = (mreal)((mglData const *)arg1)->Linear1(*arg2,arg3,arg4);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_linear1__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglPoint *arg2 = 0 ;
  mreal arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Linear1", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_mglPoint,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglPoint &","Linear1", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mglPoint &","Linear1", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< mglPoint * >(argp2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","Linear1", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  result = (mreal)((mglData const *)arg1)->Linear1(*arg2,arg3);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_linear1(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglData_linear1__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_linear1__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_linear1__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_linear1__SWIG_4(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_linear1__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglData_linear1__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglData.linear1", 
    "    mreal MglData.linear1(mreal x, mreal y, mreal z)\n"
    "    mreal MglData.linear1(mreal x, mreal y)\n"
    "    mreal MglData.linear1(mreal x)\n"
    "    mreal MglData.linear1(mglPoint &dif, mreal x, mreal y, mreal z)\n"
    "    mreal MglData.linear1(mglPoint &dif, mreal x, mreal y)\n"
    "    mreal MglData.linear1(mglPoint &dif, mreal x)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.print_info

  call-seq:
    print_info -> char const *
    print_info(fp)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_print_info__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","PrintInfo", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  result = (char *)((mglData const *)arg1)->PrintInfo();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_print_info__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","PrintInfo", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "FILE *","PrintInfo", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< FILE * >(argp2);
  ((mglData const *)arg1)->PrintInfo(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_print_info(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MglData_print_info__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_FILE, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglData_print_info__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MglData.print_info", 
    "    void MglData.print_info()\n"
    "    void MglData.print_info(FILE *fp)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.maximal

  call-seq:
    maximal -> mreal
    maximal(i, j, k) -> mreal
    maximal(x, y, z) -> mreal

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_maximal__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Maximal", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  result = (mreal)((mglData const *)arg1)->Maximal();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglData.minimal

  call-seq:
    minimal -> mreal
    minimal(i, j, k) -> mreal
    minimal(x, y, z) -> mreal

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_minimal__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Minimal", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  result = (mreal)((mglData const *)arg1)->Minimal();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglData.maximal_neg

  call-seq:
    maximal_neg -> mreal

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_maximal_neg(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","MaximalNeg", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  result = (mreal)((mglData const *)arg1)->MaximalNeg();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglData.minimal_pos

  call-seq:
    minimal_pos -> mreal

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_minimal_pos(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","MinimalPos", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  result = (mreal)((mglData const *)arg1)->MinimalPos();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglData.maximal

  call-seq:
    maximal -> mreal
    maximal(i, j, k) -> mreal
    maximal(x, y, z) -> mreal

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_maximal__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long *arg2 = 0 ;
  long *arg3 = 0 ;
  long *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Maximal", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "long &","Maximal", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "long &","Maximal", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_long,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "long &","Maximal", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "long &","Maximal", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_long,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "long &","Maximal", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "long &","Maximal", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< long * >(argp4);
  result = (mreal)((mglData const *)arg1)->Maximal(*arg2,*arg3,*arg4);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglData.minimal

  call-seq:
    minimal -> mreal
    minimal(i, j, k) -> mreal
    minimal(x, y, z) -> mreal

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_minimal__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  long *arg2 = 0 ;
  long *arg3 = 0 ;
  long *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Minimal", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "long &","Minimal", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "long &","Minimal", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_long,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "long &","Minimal", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "long &","Minimal", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_long,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "long &","Minimal", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "long &","Minimal", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< long * >(argp4);
  result = (mreal)((mglData const *)arg1)->Minimal(*arg2,*arg3,*arg4);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglData.maximal

  call-seq:
    maximal -> mreal
    maximal(i, j, k) -> mreal
    maximal(x, y, z) -> mreal

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_maximal__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal *arg2 = 0 ;
  mreal *arg3 = 0 ;
  mreal *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Maximal", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mreal &","Maximal", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mreal &","Maximal", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< mreal * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "mreal &","Maximal", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mreal &","Maximal", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< mreal * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "mreal &","Maximal", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mreal &","Maximal", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< mreal * >(argp4);
  result = (mreal)((mglData const *)arg1)->Maximal(*arg2,*arg3,*arg4);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_maximal(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MglData_maximal__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_long, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_long, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglData_maximal__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_float, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_float, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglData_maximal__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglData.maximal", 
    "    mreal MglData.maximal()\n"
    "    mreal MglData.maximal(long &i, long &j, long &k)\n"
    "    mreal MglData.maximal(mreal &x, mreal &y, mreal &z)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.minimal

  call-seq:
    minimal -> mreal
    minimal(i, j, k) -> mreal
    minimal(x, y, z) -> mreal

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_minimal__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mreal *arg2 = 0 ;
  mreal *arg3 = 0 ;
  mreal *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Minimal", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mreal &","Minimal", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mreal &","Minimal", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< mreal * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "mreal &","Minimal", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mreal &","Minimal", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< mreal * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "mreal &","Minimal", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mreal &","Minimal", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< mreal * >(argp4);
  result = (mreal)((mglData const *)arg1)->Minimal(*arg2,*arg3,*arg4);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_minimal(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MglData_minimal__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_long, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_long, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglData_minimal__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_float, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_float, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglData_minimal__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglData.minimal", 
    "    mreal MglData.minimal()\n"
    "    mreal MglData.minimal(long &i, long &j, long &k)\n"
    "    mreal MglData.minimal(mreal &x, mreal &y, mreal &z)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.momentum

  call-seq:
    momentum(dir, how) -> MglData
    momentum(dir, m, w) -> mreal
    momentum(dir, m, w, s, k) -> mreal

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_momentum__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char arg2 ;
  mreal *arg3 = 0 ;
  mreal *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Momentum", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","Momentum", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "mreal &","Momentum", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mreal &","Momentum", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< mreal * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "mreal &","Momentum", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mreal &","Momentum", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< mreal * >(argp4);
  result = (mreal)((mglData const *)arg1)->Momentum(arg2,*arg3,*arg4);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_momentum__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char arg2 ;
  mreal *arg3 = 0 ;
  mreal *arg4 = 0 ;
  mreal *arg5 = 0 ;
  mreal *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Momentum", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","Momentum", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "mreal &","Momentum", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mreal &","Momentum", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< mreal * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "mreal &","Momentum", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mreal &","Momentum", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< mreal * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "mreal &","Momentum", 5, argv[3] )); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mreal &","Momentum", 5, argv[3])); 
  }
  arg5 = reinterpret_cast< mreal * >(argp5);
  res6 = SWIG_ConvertPtr(argv[4], &argp6, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "mreal &","Momentum", 6, argv[4] )); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mreal &","Momentum", 6, argv[4])); 
  }
  arg6 = reinterpret_cast< mreal * >(argp6);
  result = (mreal)((mglData const *)arg1)->Momentum(arg2,*arg3,*arg4,*arg5,*arg6);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_momentum(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglData_momentum__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_float, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_float, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglData_momentum__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_float, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_float, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_float, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_float, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglData_momentum__SWIG_2(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglData.momentum", 
    "    mreal MglData.momentum(char dir, char const *how)\n"
    "    mreal MglData.momentum(char dir, mreal &m, mreal &w)\n"
    "    mreal MglData.momentum(char dir, mreal &m, mreal &w, mreal &s, mreal &k)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.find

  call-seq:
    find(cond, i, j, k) -> mreal
    find(cond, dir, i=0, j=0, k=0) -> long
    find(cond, dir, i=0, j=0) -> long
    find(cond, dir, i=0) -> long
    find(cond, dir) -> long

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_find__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  long *arg3 = 0 ;
  long *arg4 = 0 ;
  long *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Find", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Find", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_long,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "long &","Find", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "long &","Find", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_long,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "long &","Find", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "long &","Find", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< long * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_long,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "long &","Find", 5, argv[3] )); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "long &","Find", 5, argv[3])); 
  }
  arg5 = reinterpret_cast< long * >(argp5);
  result = (mreal)((mglData const *)arg1)->Find((char const *)arg2,*arg3,*arg4,*arg5);
  vresult = SWIG_From_float(static_cast< float >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: MathGL::MglData.last

  call-seq:
    last(cond, i, j, k) -> mreal

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_last(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  long *arg3 = 0 ;
  long *arg4 = 0 ;
  long *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Last", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Last", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_long,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "long &","Last", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "long &","Last", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_long,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "long &","Last", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "long &","Last", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< long * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_long,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "long &","Last", 5, argv[3] )); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "long &","Last", 5, argv[3])); 
  }
  arg5 = reinterpret_cast< long * >(argp5);
  result = (mreal)((mglData const *)arg1)->Last((char const *)arg2,*arg3,*arg4,*arg5);
  vresult = SWIG_From_float(static_cast< float >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: MathGL::MglData.find

  call-seq:
    find(cond, i, j, k) -> mreal
    find(cond, dir, i=0, j=0, k=0) -> long
    find(cond, dir, i=0, j=0) -> long
    find(cond, dir, i=0) -> long
    find(cond, dir) -> long

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_find__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  long arg4 ;
  long arg5 ;
  long arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Find", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Find", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_char(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "char","Find", 3, argv[1] ));
  } 
  arg3 = static_cast< char >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Find", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "long","Find", 5, argv[3] ));
  } 
  arg5 = static_cast< long >(val5);
  ecode6 = SWIG_AsVal_long(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "long","Find", 6, argv[4] ));
  } 
  arg6 = static_cast< long >(val6);
  result = (long)((mglData const *)arg1)->Find((char const *)arg2,arg3,arg4,arg5,arg6);
  vresult = SWIG_From_long(static_cast< long >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_find__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  long arg4 ;
  long arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Find", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Find", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_char(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "char","Find", 3, argv[1] ));
  } 
  arg3 = static_cast< char >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Find", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "long","Find", 5, argv[3] ));
  } 
  arg5 = static_cast< long >(val5);
  result = (long)((mglData const *)arg1)->Find((char const *)arg2,arg3,arg4,arg5);
  vresult = SWIG_From_long(static_cast< long >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_find__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Find", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Find", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_char(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "char","Find", 3, argv[1] ));
  } 
  arg3 = static_cast< char >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Find", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  result = (long)((mglData const *)arg1)->Find((char const *)arg2,arg3,arg4);
  vresult = SWIG_From_long(static_cast< long >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_find__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","Find", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Find", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_char(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "char","Find", 3, argv[1] ));
  } 
  arg3 = static_cast< char >(val3);
  result = (long)((mglData const *)arg1)->Find((char const *)arg2,arg3);
  vresult = SWIG_From_long(static_cast< long >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_find(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_find__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_find__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_long, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_long, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_long, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglData_find__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglData_find__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_long(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglData_find__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglData.find", 
    "    long MglData.find(char const *cond, long &i, long &j, long &k)\n"
    "    long MglData.find(char const *cond, char dir, long i, long j, long k)\n"
    "    long MglData.find(char const *cond, char dir, long i, long j)\n"
    "    long MglData.find(char const *cond, char dir, long i)\n"
    "    long MglData.find(char const *cond, char dir)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.find_any

  call-seq:
    find_any(cond) -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_find_any(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData const *","FindAny", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","FindAny", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (bool)((mglData const *)arg1)->FindAny((char const *)arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_MglData_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_MglData_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_mglData);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: MathGL::MglData.new

  call-seq:
    MglData.new(d)
    MglData.new(d)
    MglData.new(arg2, d)
    MglData.new(size, d)
    MglData.new(rows, cols, d)
    MglData.new(size, d)
    MglData.new(rows, cols, d)
    MglData.new(d)
    MglData.new(d, rows, cols)
    MglData.new(d, size)
    MglData.new(d, rows, cols)
    MglData.new(fname)
    MglData.new(xx=1, yy=1, zz=1)
    MglData.new(xx=1, yy=1)
    MglData.new(xx=1)
    MglData.new()
    MglData.new(d, rows, cols)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_MglData__SWIG_16(int argc, VALUE *argv, VALUE self) {
  double *arg1 = (double *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  mglData *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    if (TYPE(argv[0])!=T_ARRAY) {
      rb_raise(rb_eArgError,"argument is not Array");
    }
    //Check_Type(argv[0], T_ARRAY);
    arg2 = RARRAY_LEN(argv[0]);
    arg1 = ALLOC_N(double,arg2);
    for (long i=0; i<arg2; i++) {
      arg1[i] = NUM2DBL(RARRAY_PTR(argv[0])[i]);
    }
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","mglData", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","mglData", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  result = (mglData *)new_mglData__SWIG_16((double const *)arg1,arg2,arg3,arg4);
  DATA_PTR(self) = result;
  {
    xfree(arg1);
  }
  return self;
fail:
  {
    xfree(arg1);
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_MglData(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_MglData__SWIG_15(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MglData__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_MglData__SWIG_14(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MglData__SWIG_11(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = (TYPE(argv[0])==T_ARRAY);
    }
    if (_v) {
      if (argc <= 1) {
        return _wrap_new_MglData__SWIG_7(nargs, args, self);
      }
      return _wrap_new_MglData__SWIG_7(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = (TYPE(argv[0])==T_ARRAY);
      if (!(_v)) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
        _v = SWIG_CheckState(res);
      }
    }
    if (_v) {
      return _wrap_new_MglData__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_float, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_MglData__SWIG_9(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_MglData__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_MglData__SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_MglData__SWIG_13(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_MglData__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_MglData__SWIG_8(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_float, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_MglData__SWIG_10(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_MglData__SWIG_6(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_float, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_MglData__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_MglData__SWIG_12(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = (TYPE(argv[0])==T_ARRAY);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_MglData__SWIG_16(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "mglData.new", 
    "    mglData.new(mglData const &d)\n"
    "    mglData.new(mglData const *d)\n"
    "    mglData.new(bool, mglData *d)\n"
    "    mglData.new(int size, float const *d)\n"
    "    mglData.new(int rows, int cols, float const *d)\n"
    "    mglData.new(int size, double const *d)\n"
    "    mglData.new(int rows, int cols, double const *d)\n"
    "    mglData.new(double const *d, int size)\n"
    "    mglData.new(double const *d, int rows, int cols)\n"
    "    mglData.new(float const *d, int size)\n"
    "    mglData.new(float const *d, int rows, int cols)\n"
    "    mglData.new(char const *fname)\n"
    "    mglData.new(long xx, long yy, long zz)\n"
    "    mglData.new(long xx, long yy)\n"
    "    mglData.new(long xx)\n"
    "    mglData.new()\n"
    "    mglData.new(double const *d, int size, int rows, int cols)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.set

  call-seq:
    set(m)
    set(m)
    set(A, NX, NY=1, NZ=1)
    set(A, NX, NY=1)
    set(A, NX)
    set(A, NX, NY=1)
    set(A, N1, N2)
    set(A, N1, N2)
    set(A, N1, N2, N3)
    set(A, N1, N2, N3)
    set(str, NX, NY=1, NZ=1)
    set(str, NX, NY=1)
    set(str, NX)
    set(dat)
    set(A)
    set(A, NX, NY)
    set(A, NX, NY, NZ)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData_set__SWIG_14(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  double *arg2 = (double *) 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    if (TYPE(argv[0])!=T_ARRAY) {
      rb_raise(rb_eArgError,"argument is not Array");
    }
    //Check_Type(argv[0], T_ARRAY);
    arg3 = RARRAY_LEN(argv[0]);
    arg2 = ALLOC_N(double,arg3);
    for (long i=0; i<arg3; i++) {
      arg2[i] = NUM2DBL(RARRAY_PTR(argv[0])[i]);
    }
  }
  mglData_Set__SWIG_14(arg1,(double const *)arg2,arg3);
  {
    xfree(arg2);
  }
  return Qnil;
fail:
  {
    xfree(arg2);
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_set__SWIG_15(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  double *arg2 = (double *) 0 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    if (TYPE(argv[0])!=T_ARRAY) {
      rb_raise(rb_eArgError,"argument is not Array");
    }
    //Check_Type(argv[0], T_ARRAY);
    arg3 = RARRAY_LEN(argv[0]);
    arg2 = ALLOC_N(double,arg3);
    for (long i=0; i<arg3; i++) {
      arg2[i] = NUM2DBL(RARRAY_PTR(argv[0])[i]);
    }
  }
  ecode4 = SWIG_AsVal_long(argv[1], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Set", 4, argv[1] ));
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(argv[2], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "long","Set", 5, argv[2] ));
  } 
  arg5 = static_cast< long >(val5);
  mglData_Set__SWIG_15(arg1,(double const *)arg2,arg3,arg4,arg5);
  {
    xfree(arg2);
  }
  return Qnil;
fail:
  {
    xfree(arg2);
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData_set__SWIG_16(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  double *arg2 = (double *) 0 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  long arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    if (TYPE(argv[0])!=T_ARRAY) {
      rb_raise(rb_eArgError,"argument is not Array");
    }
    //Check_Type(argv[0], T_ARRAY);
    arg3 = RARRAY_LEN(argv[0]);
    arg2 = ALLOC_N(double,arg3);
    for (long i=0; i<arg3; i++) {
      arg2[i] = NUM2DBL(RARRAY_PTR(argv[0])[i]);
    }
  }
  ecode4 = SWIG_AsVal_long(argv[1], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","Set", 4, argv[1] ));
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(argv[2], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "long","Set", 5, argv[2] ));
  } 
  arg5 = static_cast< long >(val5);
  ecode6 = SWIG_AsVal_long(argv[3], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "long","Set", 6, argv[3] ));
  } 
  arg6 = static_cast< long >(val6);
  mglData_Set__SWIG_16(arg1,(double const *)arg2,arg3,arg4,arg5,arg6);
  {
    xfree(arg2);
  }
  return Qnil;
fail:
  {
    xfree(arg2);
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData_set(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gsl_vector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglData_set__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gsl_matrix, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglData_set__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglData_set__SWIG_13(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_MglData_set__SWIG_14(nargs, args, self);
        }
        return _wrap_MglData_set__SWIG_14(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_set__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglData_set__SWIG_12(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_set__SWIG_7(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_set__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_set__SWIG_5(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_float, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_set__SWIG_6(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_set__SWIG_11(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglData_set__SWIG_15(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_p_float, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglData_set__SWIG_8(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglData_set__SWIG_9(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglData_set__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglData_set__SWIG_10(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglData_set__SWIG_16(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglData.set", 
    "    void MglData.set(gsl_vector *m)\n"
    "    void MglData.set(gsl_matrix *m)\n"
    "    void MglData.set(float const *A, long NX, long NY, long NZ)\n"
    "    void MglData.set(float const *A, long NX, long NY)\n"
    "    void MglData.set(float const *A, long NX)\n"
    "    void MglData.set(double const *A, long NX, long NY)\n"
    "    void MglData.set(float const *const *A, long N1, long N2)\n"
    "    void MglData.set(double const *const *A, long N1, long N2)\n"
    "    void MglData.set(float const *const *const *A, long N1, long N2, long N3)\n"
    "    void MglData.set(double const *const *const *A, long N1, long N2, long N3)\n"
    "    void MglData.set(char const *str, long NX, long NY, long NZ)\n"
    "    void MglData.set(char const *str, long NX, long NY)\n"
    "    void MglData.set(char const *str, long NX)\n"
    "    void MglData.set(mglData const &dat)\n"
    "    void MglData.set(double const *A, long size)\n"
    "    void MglData.set(double const *A, long size, long NX, long NY)\n"
    "    void MglData.set(double const *A, long size, long NX, long NY, long NZ)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.*

  call-seq:
    *(d) -> MglData
    *(b) -> MglData

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglDataA *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  result = mglData_operator_Sm___SWIG_0(arg1,(mglDataA const &)*arg2);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator *", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  result = mglData_operator_Sm___SWIG_1(arg1,arg2);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglData___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglDataA, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglData___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__mul__", 
    "    mglData __mul__(mglDataA const &d)\n"
    "    mglData __mul__(double b)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.-

  call-seq:
    -(d) -> MglData
    -(b) -> MglData

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_MglData___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglDataA *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  result = mglData_operator_Ss___SWIG_0(arg1,(mglDataA const &)*arg2);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator -", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  result = mglData_operator_Ss___SWIG_1(arg1,arg2);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglData___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglDataA, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglData___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__sub__", 
    "    mglData __sub__(mglDataA const &d)\n"
    "    mglData __sub__(double b)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.+

  call-seq:
    +(d) -> MglData
    +(b) -> MglData

Add operator.
*/
SWIGINTERN VALUE
_wrap_MglData___add____SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglDataA *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  result = mglData_operator_Sa___SWIG_0(arg1,(mglDataA const &)*arg2);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData___add____SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator +", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  result = mglData_operator_Sa___SWIG_1(arg1,arg2);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData___add__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglData___add____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglDataA, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglData___add____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__add__", 
    "    mglData __add__(mglDataA const &d)\n"
    "    mglData __add__(double b)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData./

  call-seq:
    /(d) -> MglData
    /(b) -> MglData

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData___div____SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  mglDataA *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  result = mglData_operator_Sd___SWIG_0(arg1,(mglDataA const &)*arg2);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglData___div____SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator /", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  result = mglData_operator_Sd___SWIG_1(arg1,arg2);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglData___div__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglData___div____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglDataA, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglData___div____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__div__", 
    "    mglData __div__(mglDataA const &d)\n"
    "    mglData __div__(double b)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglData.[]

  call-seq:
    [](i) -> mreal

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_MglData___getitem__(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (mreal)mglData___getitem__(arg1,arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglData.__paren

  call-seq:
    __paren(i) -> mreal

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData___paren(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","__paren", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__paren", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (mreal)mglData___paren(arg1,arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglData.[]=

  call-seq:
    []=(i, y)

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_MglData___setitem__(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  int arg2 ;
  mreal arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  mglData___setitem__(arg1,arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglData.__paren_asgn

  call-seq:
    __paren_asgn(i, y)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglData___paren_asgn(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = (mglData *) 0 ;
  int arg2 ;
  mreal arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglData *","__paren_asgn", 1, self )); 
  }
  arg1 = reinterpret_cast< mglData * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__paren_asgn", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "mreal","__paren_asgn", 3, argv[1] ));
  } 
  arg3 = static_cast< mreal >(val3);
  mglData___paren_asgn(arg1,arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL.mgl_transform_a

  call-seq:
    mgl_transform_a(am, ph, tr) -> MglData

A module function.

*/
SWIGINTERN VALUE
_wrap_mgl_transform_a(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    arg1 = GetMglData(argv[0]);
  }
  {
    arg2 = GetMglData(argv[1]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","mglTransformA", 3, argv[2] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = mglTransformA((mglData const &)*arg1,(mglData const &)*arg2,(char const *)arg3);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return vresult;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}



/*
  Document-method: MathGL.mgl_transform

  call-seq:
    mgl_transform(re, im, tr) -> MglData

A module function.

*/
SWIGINTERN VALUE
_wrap_mgl_transform(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    arg1 = GetMglData(argv[0]);
  }
  {
    arg2 = GetMglData(argv[1]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","mglTransform", 3, argv[2] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = mglTransform((mglData const &)*arg1,(mglData const &)*arg2,(char const *)arg3);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return vresult;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}



/*
  Document-method: MathGL.mgl_fourier

  call-seq:
    mgl_fourier(re, im, dir)

A module function.

*/
SWIGINTERN VALUE
_wrap_mgl_fourier(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    arg1 = GetMglData(argv[0]);
  }
  {
    arg2 = GetMglData(argv[1]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","mglFourier", 3, argv[2] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  mglFourier(*arg1,*arg2,(char const *)arg3);
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}



/*
  Document-method: MathGL.mgl_stfa

  call-seq:
    mgl_stfa(re, im, dn, dir='x') -> MglData
    mgl_stfa(re, im, dn) -> MglData

A module function.

*/
SWIGINTERN VALUE
_wrap_mgl_stfa__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = 0 ;
  mglData *arg2 = 0 ;
  long arg3 ;
  char arg4 ;
  long val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  {
    arg1 = GetMglData(argv[0]);
  }
  {
    arg2 = GetMglData(argv[1]);
  }
  ecode3 = SWIG_AsVal_long(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","mglSTFA", 3, argv[2] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_char(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "char","mglSTFA", 4, argv[3] ));
  } 
  arg4 = static_cast< char >(val4);
  result = mglSTFA((mglData const &)*arg1,(mglData const &)*arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return vresult;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_mgl_stfa__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = 0 ;
  mglData *arg2 = 0 ;
  long arg3 ;
  long val3 ;
  int ecode3 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    arg1 = GetMglData(argv[0]);
  }
  {
    arg2 = GetMglData(argv[1]);
  }
  ecode3 = SWIG_AsVal_long(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","mglSTFA", 3, argv[2] ));
  } 
  arg3 = static_cast< long >(val3);
  result = mglSTFA((mglData const &)*arg1,(mglData const &)*arg2,arg3);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return vresult;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_mgl_stfa(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs;
  if (argc > 4) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 3) {
    int _v;
    {
      _v = (TYPE(argv[0])==T_ARRAY);
      if (!(_v)) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
        _v = SWIG_CheckState(res);
      }
    }
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_mgl_stfa__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = (TYPE(argv[0])==T_ARRAY);
      if (!(_v)) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
        _v = SWIG_CheckState(res);
      }
    }
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_mgl_stfa__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "mgl_stfa", 
    "    mglData mgl_stfa(mglData const &re, mglData const &im, long dn, char dir)\n"
    "    mglData mgl_stfa(mglData const &re, mglData const &im, long dn)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL.mgl_pde

  call-seq:
    mgl_pde(gr, ham, ini_re, ini_im, dz=0.1, k0=100, opt="") -> MglData
    mgl_pde(gr, ham, ini_re, ini_im, dz=0.1, k0=100) -> MglData
    mgl_pde(gr, ham, ini_re, ini_im, dz=0.1) -> MglData
    mgl_pde(gr, ham, ini_re, ini_im) -> MglData

A module function.

*/
SWIGINTERN VALUE
_wrap_mgl_pde__SWIG_0(int argc, VALUE *argv, VALUE self) {
  HMGL arg1 ;
  char *arg2 = (char *) 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mreal arg5 ;
  mreal arg6 ;
  char *arg7 = (char *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_HMGL,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "HMGL","mglPDE", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "HMGL","mglPDE", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< HMGL * >(argp1));
    }
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","mglPDE", 2, argv[1] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    arg3 = GetMglData(argv[2]);
  }
  {
    arg4 = GetMglData(argv[3]);
  }
  ecode5 = SWIG_AsVal_float(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "mreal","mglPDE", 5, argv[4] ));
  } 
  arg5 = static_cast< mreal >(val5);
  ecode6 = SWIG_AsVal_float(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "mreal","mglPDE", 6, argv[5] ));
  } 
  arg6 = static_cast< mreal >(val6);
  res7 = SWIG_AsCharPtrAndSize(argv[6], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","mglPDE", 7, argv[6] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  result = mglPDE(arg1,(char const *)arg2,(mglData const &)*arg3,(mglData const &)*arg4,arg5,arg6,(char const *)arg7);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_mgl_pde__SWIG_1(int argc, VALUE *argv, VALUE self) {
  HMGL arg1 ;
  char *arg2 = (char *) 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mreal arg5 ;
  mreal arg6 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_HMGL,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "HMGL","mglPDE", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "HMGL","mglPDE", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< HMGL * >(argp1));
    }
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","mglPDE", 2, argv[1] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    arg3 = GetMglData(argv[2]);
  }
  {
    arg4 = GetMglData(argv[3]);
  }
  ecode5 = SWIG_AsVal_float(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "mreal","mglPDE", 5, argv[4] ));
  } 
  arg5 = static_cast< mreal >(val5);
  ecode6 = SWIG_AsVal_float(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "mreal","mglPDE", 6, argv[5] ));
  } 
  arg6 = static_cast< mreal >(val6);
  result = mglPDE(arg1,(char const *)arg2,(mglData const &)*arg3,(mglData const &)*arg4,arg5,arg6);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_mgl_pde__SWIG_2(int argc, VALUE *argv, VALUE self) {
  HMGL arg1 ;
  char *arg2 = (char *) 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mreal arg5 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_HMGL,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "HMGL","mglPDE", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "HMGL","mglPDE", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< HMGL * >(argp1));
    }
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","mglPDE", 2, argv[1] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    arg3 = GetMglData(argv[2]);
  }
  {
    arg4 = GetMglData(argv[3]);
  }
  ecode5 = SWIG_AsVal_float(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "mreal","mglPDE", 5, argv[4] ));
  } 
  arg5 = static_cast< mreal >(val5);
  result = mglPDE(arg1,(char const *)arg2,(mglData const &)*arg3,(mglData const &)*arg4,arg5);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_mgl_pde__SWIG_3(int argc, VALUE *argv, VALUE self) {
  HMGL arg1 ;
  char *arg2 = (char *) 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_HMGL,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "HMGL","mglPDE", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "HMGL","mglPDE", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< HMGL * >(argp1));
    }
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","mglPDE", 2, argv[1] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    arg3 = GetMglData(argv[2]);
  }
  {
    arg4 = GetMglData(argv[3]);
  }
  result = mglPDE(arg1,(char const *)arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_mgl_pde(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs;
  if (argc > 7) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HMGL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_mgl_pde__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HMGL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_mgl_pde__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HMGL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_mgl_pde__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HMGL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_mgl_pde__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "mgl_pde", 
    "    mglData mgl_pde(HMGL gr, char const *ham, mglData const &ini_re, mglData const &ini_im, mreal dz, mreal k0, char const *opt)\n"
    "    mglData mgl_pde(HMGL gr, char const *ham, mglData const &ini_re, mglData const &ini_im, mreal dz, mreal k0)\n"
    "    mglData mgl_pde(HMGL gr, char const *ham, mglData const &ini_re, mglData const &ini_im, mreal dz)\n"
    "    mglData mgl_pde(HMGL gr, char const *ham, mglData const &ini_re, mglData const &ini_im)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL.mgl_qo_2d

  call-seq:
    mgl_qo_2d(ham, ini_re, ini_im, ray, r=1, k0=100) -> MglData
    mgl_qo_2d(ham, ini_re, ini_im, ray, r=1) -> MglData
    mgl_qo_2d(ham, ini_re, ini_im, ray) -> MglData
    mgl_qo_2d(ham, ini_re, ini_im, ray, xx, yy, r=1, k0=100) -> MglData
    mgl_qo_2d(ham, ini_re, ini_im, ray, xx, yy, r=1) -> MglData
    mgl_qo_2d(ham, ini_re, ini_im, ray, xx, yy) -> MglData

A module function.

*/
SWIGINTERN VALUE
_wrap_mgl_qo_2d__SWIG_0(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mreal arg5 ;
  mreal arg6 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","mglQO2d", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    arg2 = GetMglData(argv[1]);
  }
  {
    arg3 = GetMglData(argv[2]);
  }
  {
    arg4 = GetMglData(argv[3]);
  }
  ecode5 = SWIG_AsVal_float(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "mreal","mglQO2d", 5, argv[4] ));
  } 
  arg5 = static_cast< mreal >(val5);
  ecode6 = SWIG_AsVal_float(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "mreal","mglQO2d", 6, argv[5] ));
  } 
  arg6 = static_cast< mreal >(val6);
  result = mglQO2d((char const *)arg1,(mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,arg5,arg6);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_mgl_qo_2d__SWIG_1(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mreal arg5 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","mglQO2d", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    arg2 = GetMglData(argv[1]);
  }
  {
    arg3 = GetMglData(argv[2]);
  }
  {
    arg4 = GetMglData(argv[3]);
  }
  ecode5 = SWIG_AsVal_float(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "mreal","mglQO2d", 5, argv[4] ));
  } 
  arg5 = static_cast< mreal >(val5);
  result = mglQO2d((char const *)arg1,(mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,arg5);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_mgl_qo_2d__SWIG_2(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","mglQO2d", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    arg2 = GetMglData(argv[1]);
  }
  {
    arg3 = GetMglData(argv[2]);
  }
  {
    arg4 = GetMglData(argv[3]);
  }
  result = mglQO2d((char const *)arg1,(mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_mgl_qo_2d__SWIG_3(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mreal arg7 ;
  mreal arg8 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","mglQO2d", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    arg2 = GetMglData(argv[1]);
  }
  {
    arg3 = GetMglData(argv[2]);
  }
  {
    arg4 = GetMglData(argv[3]);
  }
  {
    arg5 = GetMglData(argv[4]);
  }
  {
    arg6 = GetMglData(argv[5]);
  }
  ecode7 = SWIG_AsVal_float(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "mreal","mglQO2d", 7, argv[6] ));
  } 
  arg7 = static_cast< mreal >(val7);
  ecode8 = SWIG_AsVal_float(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), Ruby_Format_TypeError( "", "mreal","mglQO2d", 8, argv[7] ));
  } 
  arg8 = static_cast< mreal >(val8);
  result = mglQO2d((char const *)arg1,(mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,*arg5,*arg6,arg7,arg8);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_mgl_qo_2d__SWIG_4(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mreal arg7 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","mglQO2d", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    arg2 = GetMglData(argv[1]);
  }
  {
    arg3 = GetMglData(argv[2]);
  }
  {
    arg4 = GetMglData(argv[3]);
  }
  {
    arg5 = GetMglData(argv[4]);
  }
  {
    arg6 = GetMglData(argv[5]);
  }
  ecode7 = SWIG_AsVal_float(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "mreal","mglQO2d", 7, argv[6] ));
  } 
  arg7 = static_cast< mreal >(val7);
  result = mglQO2d((char const *)arg1,(mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,*arg5,*arg6,arg7);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_mgl_qo_2d__SWIG_5(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","mglQO2d", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    arg2 = GetMglData(argv[1]);
  }
  {
    arg3 = GetMglData(argv[2]);
  }
  {
    arg4 = GetMglData(argv[3]);
  }
  {
    arg5 = GetMglData(argv[4]);
  }
  {
    arg6 = GetMglData(argv[5]);
  }
  result = mglQO2d((char const *)arg1,(mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,*arg5,*arg6);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_mgl_qo_2d(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs;
  if (argc > 8) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_mgl_qo_2d__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_mgl_qo_2d__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_mgl_qo_2d__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                return _wrap_mgl_qo_2d__SWIG_5(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_float(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_mgl_qo_2d__SWIG_4(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_float(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_float(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_mgl_qo_2d__SWIG_3(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "mgl_qo_2d", 
    "    mglData mgl_qo_2d(char const *ham, mglData const &ini_re, mglData const &ini_im, mglData const &ray, mreal r, mreal k0)\n"
    "    mglData mgl_qo_2d(char const *ham, mglData const &ini_re, mglData const &ini_im, mglData const &ray, mreal r)\n"
    "    mglData mgl_qo_2d(char const *ham, mglData const &ini_re, mglData const &ini_im, mglData const &ray)\n"
    "    mglData mgl_qo_2d(char const *ham, mglData const &ini_re, mglData const &ini_im, mglData const &ray, mglData &xx, mglData &yy, mreal r, mreal k0)\n"
    "    mglData mgl_qo_2d(char const *ham, mglData const &ini_re, mglData const &ini_im, mglData const &ray, mglData &xx, mglData &yy, mreal r)\n"
    "    mglData mgl_qo_2d(char const *ham, mglData const &ini_re, mglData const &ini_im, mglData const &ray, mglData &xx, mglData &yy)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL.mgl_qo_3d

  call-seq:
    mgl_qo_3d(ham, ini_re, ini_im, ray, r=1, k0=100) -> MglData
    mgl_qo_3d(ham, ini_re, ini_im, ray, r=1) -> MglData
    mgl_qo_3d(ham, ini_re, ini_im, ray) -> MglData
    mgl_qo_3d(ham, ini_re, ini_im, ray, xx, yy, zz, r=1, k0=100) -> MglData
    mgl_qo_3d(ham, ini_re, ini_im, ray, xx, yy, zz, r=1) -> MglData
    mgl_qo_3d(ham, ini_re, ini_im, ray, xx, yy, zz) -> MglData

A module function.

*/
SWIGINTERN VALUE
_wrap_mgl_qo_3d__SWIG_0(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mreal arg5 ;
  mreal arg6 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","mglQO3d", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    arg2 = GetMglData(argv[1]);
  }
  {
    arg3 = GetMglData(argv[2]);
  }
  {
    arg4 = GetMglData(argv[3]);
  }
  ecode5 = SWIG_AsVal_float(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "mreal","mglQO3d", 5, argv[4] ));
  } 
  arg5 = static_cast< mreal >(val5);
  ecode6 = SWIG_AsVal_float(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "mreal","mglQO3d", 6, argv[5] ));
  } 
  arg6 = static_cast< mreal >(val6);
  result = mglQO3d((char const *)arg1,(mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,arg5,arg6);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_mgl_qo_3d__SWIG_1(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mreal arg5 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","mglQO3d", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    arg2 = GetMglData(argv[1]);
  }
  {
    arg3 = GetMglData(argv[2]);
  }
  {
    arg4 = GetMglData(argv[3]);
  }
  ecode5 = SWIG_AsVal_float(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "mreal","mglQO3d", 5, argv[4] ));
  } 
  arg5 = static_cast< mreal >(val5);
  result = mglQO3d((char const *)arg1,(mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,arg5);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_mgl_qo_3d__SWIG_2(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","mglQO3d", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    arg2 = GetMglData(argv[1]);
  }
  {
    arg3 = GetMglData(argv[2]);
  }
  {
    arg4 = GetMglData(argv[3]);
  }
  result = mglQO3d((char const *)arg1,(mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_mgl_qo_3d__SWIG_3(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  mreal arg8 ;
  mreal arg9 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 9) || (argc > 9)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 9)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","mglQO3d", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    arg2 = GetMglData(argv[1]);
  }
  {
    arg3 = GetMglData(argv[2]);
  }
  {
    arg4 = GetMglData(argv[3]);
  }
  {
    arg5 = GetMglData(argv[4]);
  }
  {
    arg6 = GetMglData(argv[5]);
  }
  {
    arg7 = GetMglData(argv[6]);
  }
  ecode8 = SWIG_AsVal_float(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), Ruby_Format_TypeError( "", "mreal","mglQO3d", 8, argv[7] ));
  } 
  arg8 = static_cast< mreal >(val8);
  ecode9 = SWIG_AsVal_float(argv[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), Ruby_Format_TypeError( "", "mreal","mglQO3d", 9, argv[8] ));
  } 
  arg9 = static_cast< mreal >(val9);
  result = mglQO3d((char const *)arg1,(mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,*arg5,*arg6,*arg7,arg8,arg9);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_mgl_qo_3d__SWIG_4(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  mreal arg8 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","mglQO3d", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    arg2 = GetMglData(argv[1]);
  }
  {
    arg3 = GetMglData(argv[2]);
  }
  {
    arg4 = GetMglData(argv[3]);
  }
  {
    arg5 = GetMglData(argv[4]);
  }
  {
    arg6 = GetMglData(argv[5]);
  }
  {
    arg7 = GetMglData(argv[6]);
  }
  ecode8 = SWIG_AsVal_float(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), Ruby_Format_TypeError( "", "mreal","mglQO3d", 8, argv[7] ));
  } 
  arg8 = static_cast< mreal >(val8);
  result = mglQO3d((char const *)arg1,(mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,*arg5,*arg6,*arg7,arg8);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_mgl_qo_3d__SWIG_5(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","mglQO3d", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    arg2 = GetMglData(argv[1]);
  }
  {
    arg3 = GetMglData(argv[2]);
  }
  {
    arg4 = GetMglData(argv[3]);
  }
  {
    arg5 = GetMglData(argv[4]);
  }
  {
    arg6 = GetMglData(argv[5]);
  }
  {
    arg7 = GetMglData(argv[6]);
  }
  result = mglQO3d((char const *)arg1,(mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,*arg5,*arg6,*arg7);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_mgl_qo_3d(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[9];
  int ii;
  
  argc = nargs;
  if (argc > 9) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_mgl_qo_3d__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_mgl_qo_3d__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_mgl_qo_3d__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  return _wrap_mgl_qo_3d__SWIG_5(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_float(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_mgl_qo_3d__SWIG_4(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_float(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_float(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_mgl_qo_3d__SWIG_3(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 9, "mgl_qo_3d", 
    "    mglData mgl_qo_3d(char const *ham, mglData const &ini_re, mglData const &ini_im, mglData const &ray, mreal r, mreal k0)\n"
    "    mglData mgl_qo_3d(char const *ham, mglData const &ini_re, mglData const &ini_im, mglData const &ray, mreal r)\n"
    "    mglData mgl_qo_3d(char const *ham, mglData const &ini_re, mglData const &ini_im, mglData const &ray)\n"
    "    mglData mgl_qo_3d(char const *ham, mglData const &ini_re, mglData const &ini_im, mglData const &ray, mglData &xx, mglData &yy, mglData &zz, mreal r, mreal k0)\n"
    "    mglData mgl_qo_3d(char const *ham, mglData const &ini_re, mglData const &ini_im, mglData const &ray, mglData &xx, mglData &yy, mglData &zz, mreal r)\n"
    "    mglData mgl_qo_3d(char const *ham, mglData const &ini_re, mglData const &ini_im, mglData const &ray, mglData &xx, mglData &yy, mglData &zz)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL.mgl_ray

  call-seq:
    mgl_ray(ham, r0, p0, dt=0.1, tmax=10) -> MglData
    mgl_ray(ham, r0, p0, dt=0.1) -> MglData
    mgl_ray(ham, r0, p0) -> MglData

A module function.

*/
SWIGINTERN VALUE
_wrap_mgl_ray__SWIG_0(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  mreal arg4 ;
  mreal arg5 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","mglRay", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    arg2 = GetMglPoint(argv[1]);
  }
  {
    arg3 = GetMglPoint(argv[2]);
  }
  ecode4 = SWIG_AsVal_float(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","mglRay", 4, argv[3] ));
  } 
  arg4 = static_cast< mreal >(val4);
  ecode5 = SWIG_AsVal_float(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "mreal","mglRay", 5, argv[4] ));
  } 
  arg5 = static_cast< mreal >(val5);
  result = mglRay((char const *)arg1,arg2,arg3,arg4,arg5);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_mgl_ray__SWIG_1(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  mreal arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","mglRay", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    arg2 = GetMglPoint(argv[1]);
  }
  {
    arg3 = GetMglPoint(argv[2]);
  }
  ecode4 = SWIG_AsVal_float(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","mglRay", 4, argv[3] ));
  } 
  arg4 = static_cast< mreal >(val4);
  result = mglRay((char const *)arg1,arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_mgl_ray__SWIG_2(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","mglRay", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    arg2 = GetMglPoint(argv[1]);
  }
  {
    arg3 = GetMglPoint(argv[2]);
  }
  result = mglRay((char const *)arg1,arg2,arg3);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE _wrap_mgl_ray(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs;
  if (argc > 5) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_mgl_ray__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_mgl_ray__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_mgl_ray__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "mgl_ray", 
    "    mglData mgl_ray(char const *ham, mglPoint r0, mglPoint p0, mreal dt, mreal tmax)\n"
    "    mglData mgl_ray(char const *ham, mglPoint r0, mglPoint p0, mreal dt)\n"
    "    mglData mgl_ray(char const *ham, mglPoint r0, mglPoint p0)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL.mgl_ode

  call-seq:
    mgl_ode(df, var, ini, dt=0.1, tmax=10) -> MglData
    mgl_ode(df, var, ini, dt=0.1) -> MglData
    mgl_ode(df, var, ini) -> MglData

A module function.

*/
SWIGINTERN VALUE
_wrap_mgl_ode__SWIG_0(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  mglData *arg3 = 0 ;
  mreal arg4 ;
  mreal arg5 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","mglODE", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","mglODE", 2, argv[1] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    arg3 = GetMglData(argv[2]);
  }
  ecode4 = SWIG_AsVal_float(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","mglODE", 4, argv[3] ));
  } 
  arg4 = static_cast< mreal >(val4);
  ecode5 = SWIG_AsVal_float(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "mreal","mglODE", 5, argv[4] ));
  } 
  arg5 = static_cast< mreal >(val5);
  result = mglODE((char const *)arg1,(char const *)arg2,(mglData const &)*arg3,arg4,arg5);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete arg3;
  }
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_mgl_ode__SWIG_1(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  mglData *arg3 = 0 ;
  mreal arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","mglODE", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","mglODE", 2, argv[1] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    arg3 = GetMglData(argv[2]);
  }
  ecode4 = SWIG_AsVal_float(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "mreal","mglODE", 4, argv[3] ));
  } 
  arg4 = static_cast< mreal >(val4);
  result = mglODE((char const *)arg1,(char const *)arg2,(mglData const &)*arg3,arg4);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete arg3;
  }
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_mgl_ode__SWIG_2(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  mglData *arg3 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","mglODE", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","mglODE", 2, argv[1] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    arg3 = GetMglData(argv[2]);
  }
  result = mglODE((char const *)arg1,(char const *)arg2,(mglData const &)*arg3);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete arg3;
  }
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_mgl_ode(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs;
  if (argc > 5) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_mgl_ode__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_mgl_ode__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_mgl_ode__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "mgl_ode", 
    "    mglData mgl_ode(char const *df, char const *var, mglData const &ini, mreal dt, mreal tmax)\n"
    "    mglData mgl_ode(char const *df, char const *var, mglData const &ini, mreal dt)\n"
    "    mglData mgl_ode(char const *df, char const *var, mglData const &ini)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL.mgl_jacobian

  call-seq:
    mgl_jacobian(x, y) -> MglData
    mgl_jacobian(x, y, z) -> MglData

A module function.

*/
SWIGINTERN VALUE
_wrap_mgl_jacobian__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = 0 ;
  mglData *arg2 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    arg1 = GetMglData(argv[0]);
  }
  {
    arg2 = GetMglData(argv[1]);
  }
  result = mglJacobian((mglData const &)*arg1,(mglData const &)*arg2);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return vresult;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_mgl_jacobian__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    arg1 = GetMglData(argv[0]);
  }
  {
    arg2 = GetMglData(argv[1]);
  }
  {
    arg3 = GetMglData(argv[2]);
  }
  result = mglJacobian((mglData const &)*arg1,(mglData const &)*arg2,(mglData const &)*arg3);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return vresult;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_mgl_jacobian(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    {
      _v = (TYPE(argv[0])==T_ARRAY);
      if (!(_v)) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
        _v = SWIG_CheckState(res);
      }
    }
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_mgl_jacobian__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = (TYPE(argv[0])==T_ARRAY);
      if (!(_v)) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
        _v = SWIG_CheckState(res);
      }
    }
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_mgl_jacobian__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "mgl_jacobian", 
    "    mglData mgl_jacobian(mglData const &x, mglData const &y)\n"
    "    mglData mgl_jacobian(mglData const &x, mglData const &y, mglData const &z)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL.mgl_triangulation

  call-seq:
    mgl_triangulation(x, y, z) -> MglData
    mgl_triangulation(x, y) -> MglData

A module function.

*/
SWIGINTERN VALUE
_wrap_mgl_triangulation__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    arg1 = GetMglData(argv[0]);
  }
  {
    arg2 = GetMglData(argv[1]);
  }
  {
    arg3 = GetMglData(argv[2]);
  }
  result = mglTriangulation((mglData const &)*arg1,(mglData const &)*arg2,(mglData const &)*arg3);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return vresult;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_mgl_triangulation__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = 0 ;
  mglData *arg2 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    arg1 = GetMglData(argv[0]);
  }
  {
    arg2 = GetMglData(argv[1]);
  }
  result = mglTriangulation((mglData const &)*arg1,(mglData const &)*arg2);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return vresult;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_mgl_triangulation(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    {
      _v = (TYPE(argv[0])==T_ARRAY);
      if (!(_v)) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
        _v = SWIG_CheckState(res);
      }
    }
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_mgl_triangulation__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = (TYPE(argv[0])==T_ARRAY);
      if (!(_v)) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
        _v = SWIG_CheckState(res);
      }
    }
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_mgl_triangulation__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "mgl_triangulation", 
    "    mglData mgl_triangulation(mglData const &x, mglData const &y, mglData const &z)\n"
    "    mglData mgl_triangulation(mglData const &x, mglData const &y)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL.mgl_sub_data

  call-seq:
    mgl_sub_data(dat, xx, yy=-1, zz=-1) -> MglData
    mgl_sub_data(dat, xx, yy=-1) -> MglData
    mgl_sub_data(dat, xx) -> MglData
    mgl_sub_data(dat, xx, yy, zz) -> MglData
    mgl_sub_data(dat, xx, yy) -> MglData
    mgl_sub_data(dat, xx) -> MglData

A module function.

*/
SWIGINTERN VALUE
_wrap_mgl_sub_data__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  {
    arg1 = GetMglData(argv[0]);
  }
  ecode2 = SWIG_AsVal_long(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","mglSubData", 2, argv[1] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","mglSubData", 3, argv[2] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","mglSubData", 4, argv[3] ));
  } 
  arg4 = static_cast< long >(val4);
  result = mglSubData((mglData const &)*arg1,arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg1;
  }
  return vresult;
fail:
  {
    delete arg1;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_mgl_sub_data__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    arg1 = GetMglData(argv[0]);
  }
  ecode2 = SWIG_AsVal_long(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","mglSubData", 2, argv[1] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","mglSubData", 3, argv[2] ));
  } 
  arg3 = static_cast< long >(val3);
  result = mglSubData((mglData const &)*arg1,arg2,arg3);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg1;
  }
  return vresult;
fail:
  {
    delete arg1;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_mgl_sub_data__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = 0 ;
  long arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    arg1 = GetMglData(argv[0]);
  }
  ecode2 = SWIG_AsVal_long(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","mglSubData", 2, argv[1] ));
  } 
  arg2 = static_cast< long >(val2);
  result = mglSubData((mglData const &)*arg1,arg2);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg1;
  }
  return vresult;
fail:
  {
    delete arg1;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_mgl_sub_data__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  {
    arg1 = GetMglData(argv[0]);
  }
  {
    arg2 = GetMglData(argv[1]);
  }
  {
    arg3 = GetMglData(argv[2]);
  }
  {
    arg4 = GetMglData(argv[3]);
  }
  result = mglSubData((mglData const &)*arg1,(mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return vresult;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_mgl_sub_data__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    arg1 = GetMglData(argv[0]);
  }
  {
    arg2 = GetMglData(argv[1]);
  }
  {
    arg3 = GetMglData(argv[2]);
  }
  result = mglSubData((mglData const &)*arg1,(mglData const &)*arg2,(mglData const &)*arg3);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return vresult;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_mgl_sub_data__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = 0 ;
  mglData *arg2 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    arg1 = GetMglData(argv[0]);
  }
  {
    arg2 = GetMglData(argv[1]);
  }
  result = mglSubData((mglData const &)*arg1,(mglData const &)*arg2);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return vresult;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_mgl_sub_data(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs;
  if (argc > 4) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    {
      _v = (TYPE(argv[0])==T_ARRAY);
      if (!(_v)) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
        _v = SWIG_CheckState(res);
      }
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_mgl_sub_data__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = (TYPE(argv[0])==T_ARRAY);
      if (!(_v)) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
        _v = SWIG_CheckState(res);
      }
    }
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_mgl_sub_data__SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = (TYPE(argv[0])==T_ARRAY);
      if (!(_v)) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
        _v = SWIG_CheckState(res);
      }
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_mgl_sub_data__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = (TYPE(argv[0])==T_ARRAY);
      if (!(_v)) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
        _v = SWIG_CheckState(res);
      }
    }
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_mgl_sub_data__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = (TYPE(argv[0])==T_ARRAY);
      if (!(_v)) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
        _v = SWIG_CheckState(res);
      }
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_mgl_sub_data__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = (TYPE(argv[0])==T_ARRAY);
      if (!(_v)) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
        _v = SWIG_CheckState(res);
      }
    }
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_mgl_sub_data__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "mgl_sub_data", 
    "    mglData mgl_sub_data(mglData const &dat, long xx, long yy, long zz)\n"
    "    mglData mgl_sub_data(mglData const &dat, long xx, long yy)\n"
    "    mglData mgl_sub_data(mglData const &dat, long xx)\n"
    "    mglData mgl_sub_data(mglData const &dat, mglData const &xx, mglData const &yy, mglData const &zz)\n"
    "    mglData mgl_sub_data(mglData const &dat, mglData const &xx, mglData const &yy)\n"
    "    mglData mgl_sub_data(mglData const &dat, mglData const &xx)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL.mgl_gspline_init

  call-seq:
    mgl_gspline_init(xdat, ydat) -> MglData

A module function.

*/
SWIGINTERN VALUE
_wrap_mgl_gspline_init(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = 0 ;
  mglData *arg2 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    arg1 = GetMglData(argv[0]);
  }
  {
    arg2 = GetMglData(argv[1]);
  }
  result = mglGSplineInit((mglData const &)*arg1,(mglData const &)*arg2);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return vresult;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return Qnil;
}



/*
  Document-method: MathGL.mgl_gspline

  call-seq:
    mgl_gspline(coef, dx, d1=None, d2=None) -> mreal
    mgl_gspline(coef, dx, d1=None) -> mreal
    mgl_gspline(coef, dx) -> mreal

A module function.

*/
SWIGINTERN VALUE
_wrap_mgl_gspline__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = 0 ;
  mreal arg2 ;
  mreal *arg3 = (mreal *) 0 ;
  mreal *arg4 = (mreal *) 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  {
    arg1 = GetMglData(argv[0]);
  }
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","mglGSpline", 2, argv[1] ));
  } 
  arg2 = static_cast< mreal >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "mreal *","mglGSpline", 3, argv[2] )); 
  }
  arg3 = reinterpret_cast< mreal * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "mreal *","mglGSpline", 4, argv[3] )); 
  }
  arg4 = reinterpret_cast< mreal * >(argp4);
  result = (mreal)mglGSpline((mglData const &)*arg1,arg2,arg3,arg4);
  vresult = SWIG_From_float(static_cast< float >(result));
  {
    delete arg1;
  }
  return vresult;
fail:
  {
    delete arg1;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_mgl_gspline__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = 0 ;
  mreal arg2 ;
  mreal *arg3 = (mreal *) 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    arg1 = GetMglData(argv[0]);
  }
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","mglGSpline", 2, argv[1] ));
  } 
  arg2 = static_cast< mreal >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "mreal *","mglGSpline", 3, argv[2] )); 
  }
  arg3 = reinterpret_cast< mreal * >(argp3);
  result = (mreal)mglGSpline((mglData const &)*arg1,arg2,arg3);
  vresult = SWIG_From_float(static_cast< float >(result));
  {
    delete arg1;
  }
  return vresult;
fail:
  {
    delete arg1;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_mgl_gspline__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglData *arg1 = 0 ;
  mreal arg2 ;
  float val2 ;
  int ecode2 = 0 ;
  mreal result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    arg1 = GetMglData(argv[0]);
  }
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "mreal","mglGSpline", 2, argv[1] ));
  } 
  arg2 = static_cast< mreal >(val2);
  result = (mreal)mglGSpline((mglData const &)*arg1,arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  {
    delete arg1;
  }
  return vresult;
fail:
  {
    delete arg1;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_mgl_gspline(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs;
  if (argc > 4) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    {
      _v = (TYPE(argv[0])==T_ARRAY);
      if (!(_v)) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
        _v = SWIG_CheckState(res);
      }
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_mgl_gspline__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = (TYPE(argv[0])==T_ARRAY);
      if (!(_v)) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
        _v = SWIG_CheckState(res);
      }
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_float, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_mgl_gspline__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = (TYPE(argv[0])==T_ARRAY);
      if (!(_v)) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglData, 0);
        _v = SWIG_CheckState(res);
      }
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_float, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_float, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_mgl_gspline__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "mgl_gspline", 
    "    mreal mgl_gspline(mglData const &coef, mreal dx, mreal *d1, mreal *d2)\n"
    "    mreal mgl_gspline(mglData const &coef, mreal dx, mreal *d1)\n"
    "    mreal mgl_gspline(mglData const &coef, mreal dx)\n");
  
  return Qnil;
}



/*
  Document-class: MathGL::MglExpr

  Proxy of C++ MathGL::MglExpr class


*/
static swig_class SwigClassMglExpr;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_MglExpr_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_MglExpr_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_mglExpr);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: MathGL::MglExpr.new

  call-seq:
    MglExpr.new(expr)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_MglExpr(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  mglExpr *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","mglExpr", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (mglExpr *)new mglExpr((char const *)arg1);
  DATA_PTR(self) = result;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN void
free_mglExpr(mglExpr *arg1) {
    delete arg1;
}


/*
  Document-method: MathGL::MglExpr.eval

  call-seq:
    eval(x, y=0, z=0) -> double
    eval(x, y=0) -> double
    eval(x) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglExpr_eval__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglExpr *arg1 = (mglExpr *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglExpr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglExpr *","Eval", 1, self )); 
  }
  arg1 = reinterpret_cast< mglExpr * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Eval", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Eval", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Eval", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  result = (double)(arg1)->Eval(arg2,arg3,arg4);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglExpr_eval__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglExpr *arg1 = (mglExpr *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglExpr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglExpr *","Eval", 1, self )); 
  }
  arg1 = reinterpret_cast< mglExpr * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Eval", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Eval", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  result = (double)(arg1)->Eval(arg2,arg3);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglExpr_eval__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglExpr *arg1 = (mglExpr *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglExpr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglExpr *","Eval", 1, self )); 
  }
  arg1 = reinterpret_cast< mglExpr * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Eval", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  result = (double)(arg1)->Eval(arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglExpr_eval(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglExpr, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglExpr_eval__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglExpr, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglExpr_eval__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglExpr, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglExpr_eval__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglExpr.eval", 
    "    double MglExpr.eval(double x, double y, double z)\n"
    "    double MglExpr.eval(double x, double y)\n"
    "    double MglExpr.eval(double x)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglExpr.diff

  call-seq:
    diff(dir, x, y=0, z=0) -> double
    diff(dir, x, y=0) -> double
    diff(dir, x) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglExpr_diff__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglExpr *arg1 = (mglExpr *) 0 ;
  char arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglExpr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglExpr *","Diff", 1, self )); 
  }
  arg1 = reinterpret_cast< mglExpr * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","Diff", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Diff", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Diff", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","Diff", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  result = (double)(arg1)->Diff(arg2,arg3,arg4,arg5);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglExpr_diff__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglExpr *arg1 = (mglExpr *) 0 ;
  char arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglExpr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglExpr *","Diff", 1, self )); 
  }
  arg1 = reinterpret_cast< mglExpr * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","Diff", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Diff", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Diff", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  result = (double)(arg1)->Diff(arg2,arg3,arg4);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglExpr_diff__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglExpr *arg1 = (mglExpr *) 0 ;
  char arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglExpr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglExpr *","Diff", 1, self )); 
  }
  arg1 = reinterpret_cast< mglExpr * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","Diff", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Diff", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  result = (double)(arg1)->Diff(arg2,arg3);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglExpr_diff(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglExpr, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglExpr_diff__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglExpr, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglExpr_diff__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglExpr, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglExpr_diff__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglExpr.diff", 
    "    double MglExpr.diff(char dir, double x, double y, double z)\n"
    "    double MglExpr.diff(char dir, double x, double y)\n"
    "    double MglExpr.diff(char dir, double x)\n");
  
  return Qnil;
}



/*
  Document-class: MathGL::MglGraph

  Proxy of C++ MathGL::MglGraph class


*/
static swig_class SwigClassMglGraph;


/*
  Document-method: MathGL::MglGraph.new

  call-seq:
    MglGraph.new(kind=0, width=600, height=400)
    MglGraph.new(kind=0, width=600)
    MglGraph.new(kind=0)
    MglGraph.new
    MglGraph.new(graph)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_MglGraph__SWIG_0(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mglGraph *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","mglGraph", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","mglGraph", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","mglGraph", 3, argv[2] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (mglGraph *)new mglGraph(arg1,arg2,arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.new

  call-seq:
    MglGraph.new(kind=0, width=600, height=400)
    MglGraph.new(kind=0, width=600)
    MglGraph.new(kind=0)
    MglGraph.new()
    MglGraph.new(graph)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_MglGraph__SWIG_1(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mglGraph *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","mglGraph", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","mglGraph", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (mglGraph *)new mglGraph(arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_MglGraph__SWIG_2(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  mglGraph *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","mglGraph", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  result = (mglGraph *)new mglGraph(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_MglGraph__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (mglGraph *)new mglGraph();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_MglGraph_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_MglGraph_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_mglGraph);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_MglGraph__SWIG_4(int argc, VALUE *argv, VALUE self) {
  HMGL arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  mglGraph *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_HMGL,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "HMGL","mglGraph", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "HMGL","mglGraph", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< HMGL * >(argp1));
    }
  }
  result = (mglGraph *)new mglGraph(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_MglGraph(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_MglGraph__SWIG_3(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HMGL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MglGraph__SWIG_4(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_MglGraph__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_MglGraph__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_MglGraph__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "mglGraph.new", 
    "    mglGraph.new(int kind, int width, int height)\n"
    "    mglGraph.new(int kind, int width)\n"
    "    mglGraph.new(int kind)\n"
    "    mglGraph.new()\n"
    "    mglGraph.new(HMGL graph)\n");
  
  return Qnil;
}


SWIGINTERN void
free_mglGraph(mglGraph *arg1) {
    delete arg1;
}


/*
  Document-method: MathGL::MglGraph.self

  call-seq:
    self -> HMGL

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_self(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  HMGL result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Self", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  result = (arg1)->Self();
  vresult = SWIG_NewPointerObj((new HMGL(static_cast< const HMGL& >(result))), SWIGTYPE_p_HMGL, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.default_plot_param

  call-seq:
    default_plot_param

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_default_plot_param(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","DefaultPlotParam", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  (arg1)->DefaultPlotParam();
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_plot_id

  call-seq:
    set_plot_id(id)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_plot_id(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetPlotId", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SetPlotId", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->SetPlotId((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.get_plot_id

  call-seq:
    get_plot_id -> char const *

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_get_plot_id(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","GetPlotId", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  result = (char *)(arg1)->GetPlotId();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.stop

  call-seq:
    stop(stop=true)
    stop

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_stop__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Stop", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","Stop", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->Stop(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_stop__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Stop", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  (arg1)->Stop();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_stop(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MglGraph_stop__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglGraph_stop__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MglGraph.stop", 
    "    void MglGraph.stop(bool stop)\n"
    "    void MglGraph.stop()\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.need_stop

  call-seq:
    need_stop -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_need_stop(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","NeedStop", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  result = (bool)(arg1)->NeedStop();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_event_func

  call-seq:
    set_event_func(func, par=nil)
    set_event_func(func)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_event_func__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void (*arg2)(void *) = (void (*)(void *)) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetEventFunc", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(argv[0], (void**)(&arg2), SWIGTYPE_p_f_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), Ruby_Format_TypeError( "", "void (*)(void *)","SetEventFunc", 2, argv[0] )); 
    }
  }
  res3 = SWIG_ConvertPtr(argv[1],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "void *","SetEventFunc", 3, argv[1] )); 
  }
  (arg1)->SetEventFunc(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_event_func__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void (*arg2)(void *) = (void (*)(void *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetEventFunc", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(argv[0], (void**)(&arg2), SWIGTYPE_p_f_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), Ruby_Format_TypeError( "", "void (*)(void *)","SetEventFunc", 2, argv[0] )); 
    }
  }
  (arg1)->SetEventFunc(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_set_event_func(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_p_void__void);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_set_event_func__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_p_void__void);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &ptr, 0, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_set_event_func__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.set_event_func", 
    "    void MglGraph.set_event_func(void (*func)(void *), void *par)\n"
    "    void MglGraph.set_event_func(void (*func)(void *))\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.alpha

  call-seq:
    alpha(enable)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_alpha(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Alpha", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","Alpha", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->Alpha(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_alpha_def

  call-seq:
    set_alpha_def(alpha)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_alpha_def(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetAlphaDef", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetAlphaDef", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetAlphaDef(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_transp_type

  call-seq:
    set_transp_type(type)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_transp_type(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetTranspType", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetTranspType", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetTranspType(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.light

  call-seq:
    light(enable)
    light(n, enable)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_light__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Light", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","Light", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->Light(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_light__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Light", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Light", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","Light", 3, argv[1] ));
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->Light(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_light(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglGraph_light__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_light__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.light", 
    "    void MglGraph.light(bool enable)\n"
    "    void MglGraph.light(int n, bool enable)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_dif_light

  call-seq:
    set_dif_light(dif)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_dif_light(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetDifLight", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetDifLight", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->SetDifLight(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.add_light

  call-seq:
    add_light(n, p, col='w', bright=0.5, ap=0)
    add_light(n, p, col='w', bright=0.5)
    add_light(n, p, col='w')
    add_light(n, p)
    add_light(n, r, p, col='w', bright=0.5, ap=0)
    add_light(n, r, p, col='w', bright=0.5)
    add_light(n, r, p, col='w')
    add_light(n, r, p)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_add_light__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  mglPoint arg3 ;
  char arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","AddLight", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","AddLight", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    arg3 = GetMglPoint(argv[1]);
  }
  ecode4 = SWIG_AsVal_char(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "char","AddLight", 4, argv[2] ));
  } 
  arg4 = static_cast< char >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","AddLight", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","AddLight", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  (arg1)->AddLight(arg2,arg3,arg4,arg5,arg6);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_add_light__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  mglPoint arg3 ;
  char arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","AddLight", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","AddLight", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    arg3 = GetMglPoint(argv[1]);
  }
  ecode4 = SWIG_AsVal_char(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "char","AddLight", 4, argv[2] ));
  } 
  arg4 = static_cast< char >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","AddLight", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->AddLight(arg2,arg3,arg4,arg5);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_add_light__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  mglPoint arg3 ;
  char arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","AddLight", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","AddLight", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    arg3 = GetMglPoint(argv[1]);
  }
  ecode4 = SWIG_AsVal_char(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "char","AddLight", 4, argv[2] ));
  } 
  arg4 = static_cast< char >(val4);
  (arg1)->AddLight(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_add_light__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  mglPoint arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","AddLight", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","AddLight", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    arg3 = GetMglPoint(argv[1]);
  }
  (arg1)->AddLight(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_add_light__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  mglPoint arg3 ;
  mglPoint arg4 ;
  char arg5 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  char val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","AddLight", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","AddLight", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    arg3 = GetMglPoint(argv[1]);
  }
  {
    arg4 = GetMglPoint(argv[2]);
  }
  ecode5 = SWIG_AsVal_char(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "char","AddLight", 5, argv[3] ));
  } 
  arg5 = static_cast< char >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","AddLight", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","AddLight", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  (arg1)->AddLight(arg2,arg3,arg4,arg5,arg6,arg7);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_add_light__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  mglPoint arg3 ;
  mglPoint arg4 ;
  char arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  char val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","AddLight", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","AddLight", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    arg3 = GetMglPoint(argv[1]);
  }
  {
    arg4 = GetMglPoint(argv[2]);
  }
  ecode5 = SWIG_AsVal_char(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "char","AddLight", 5, argv[3] ));
  } 
  arg5 = static_cast< char >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","AddLight", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  (arg1)->AddLight(arg2,arg3,arg4,arg5,arg6);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_add_light__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  mglPoint arg3 ;
  mglPoint arg4 ;
  char arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  char val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","AddLight", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","AddLight", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    arg3 = GetMglPoint(argv[1]);
  }
  {
    arg4 = GetMglPoint(argv[2]);
  }
  ecode5 = SWIG_AsVal_char(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "char","AddLight", 5, argv[3] ));
  } 
  arg5 = static_cast< char >(val5);
  (arg1)->AddLight(arg2,arg3,arg4,arg5);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_add_light__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  mglPoint arg3 ;
  mglPoint arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","AddLight", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","AddLight", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    arg3 = GetMglPoint(argv[1]);
  }
  {
    arg4 = GetMglPoint(argv[2]);
  }
  (arg1)->AddLight(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_add_light(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_add_light__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_add_light__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglPoint, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_add_light__SWIG_7(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_add_light__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglPoint, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_add_light__SWIG_6(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglGraph_add_light__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglPoint, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglGraph_add_light__SWIG_5(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglPoint, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_MglGraph_add_light__SWIG_4(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.add_light", 
    "    void MglGraph.add_light(int n, mglPoint p, char col, double bright, double ap)\n"
    "    void MglGraph.add_light(int n, mglPoint p, char col, double bright)\n"
    "    void MglGraph.add_light(int n, mglPoint p, char col)\n"
    "    void MglGraph.add_light(int n, mglPoint p)\n"
    "    void MglGraph.add_light(int n, mglPoint r, mglPoint p, char col, double bright, double ap)\n"
    "    void MglGraph.add_light(int n, mglPoint r, mglPoint p, char col, double bright)\n"
    "    void MglGraph.add_light(int n, mglPoint r, mglPoint p, char col)\n"
    "    void MglGraph.add_light(int n, mglPoint r, mglPoint p)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_ambient

  call-seq:
    set_ambient(i)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_ambient(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetAmbient", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetAmbient", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetAmbient(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_diffuse

  call-seq:
    set_diffuse(i)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_diffuse(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetDiffuse", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetDiffuse", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetDiffuse(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.fog

  call-seq:
    fog(d, dz=0.25)
    fog(d)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_fog__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fog", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Fog", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Fog", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->Fog(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fog__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fog", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Fog", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->Fog(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_fog(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglGraph_fog__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_fog__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.fog", 
    "    void MglGraph.fog(double d, double dz)\n"
    "    void MglGraph.fog(double d)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_bar_width

  call-seq:
    set_bar_width(width)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_bar_width(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetBarWidth", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetBarWidth", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetBarWidth(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_mark_size

  call-seq:
    set_mark_size(size)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_mark_size(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetMarkSize", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetMarkSize", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetMarkSize(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_arrow_size

  call-seq:
    set_arrow_size(size)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_arrow_size(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetArrowSize", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetArrowSize", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetArrowSize(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_mesh_num

  call-seq:
    set_mesh_num(num)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_mesh_num(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetMeshNum", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetMeshNum", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetMeshNum(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_face_num

  call-seq:
    set_face_num(num)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_face_num(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetFaceNum", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetFaceNum", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetFaceNum(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_cut

  call-seq:
    set_cut(cut)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_cut(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetCut", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetCut", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->SetCut(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_cut_box

  call-seq:
    set_cut_box(p1, p2)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_cut_box(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetCutBox", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  (arg1)->SetCutBox(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.cut_off

  call-seq:
    cut_off(EqC)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_cut_off(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","CutOff", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","CutOff", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->CutOff((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_font_size

  call-seq:
    set_font_size(size)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_font_size(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetFontSize", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetFontSize", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetFontSize(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_font_def

  call-seq:
    set_font_def(fnt)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_font_def(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetFontDef", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SetFontDef", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->SetFontDef((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_font_size_pt

  call-seq:
    set_font_size_pt(pt, dpi=72)
    set_font_size_pt(pt)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_font_size_pt__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetFontSizePT", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetFontSizePT", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","SetFontSizePT", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->SetFontSizePT(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_font_size_pt__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetFontSizePT", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetFontSizePT", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetFontSizePT(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_set_font_size_pt(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglGraph_set_font_size_pt__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_set_font_size_pt__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.set_font_size_pt", 
    "    void MglGraph.set_font_size_pt(double pt, int dpi)\n"
    "    void MglGraph.set_font_size_pt(double pt)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_font_size_cm

  call-seq:
    set_font_size_cm(cm, dpi=72)
    set_font_size_cm(cm)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_font_size_cm__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetFontSizeCM", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetFontSizeCM", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","SetFontSizeCM", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->SetFontSizeCM(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_font_size_cm__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetFontSizeCM", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetFontSizeCM", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetFontSizeCM(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_set_font_size_cm(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglGraph_set_font_size_cm__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_set_font_size_cm__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.set_font_size_cm", 
    "    void MglGraph.set_font_size_cm(double cm, int dpi)\n"
    "    void MglGraph.set_font_size_cm(double cm)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_font_size_in

  call-seq:
    set_font_size_in(C_in, dpi=72)
    set_font_size_in(C_in)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_font_size_in__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetFontSizeIN", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetFontSizeIN", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","SetFontSizeIN", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->SetFontSizeIN(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_font_size_in__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetFontSizeIN", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetFontSizeIN", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetFontSizeIN(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_set_font_size_in(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglGraph_set_font_size_in__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_set_font_size_in__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.set_font_size_in", 
    "    void MglGraph.set_font_size_in(double in, int dpi)\n"
    "    void MglGraph.set_font_size_in(double in)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.load_font

  call-seq:
    load_font(name, path=nil)
    load_font(name)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_load_font__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","LoadFont", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","LoadFont", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","LoadFont", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->LoadFont((char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_load_font__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","LoadFont", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","LoadFont", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->LoadFont((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_load_font(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_load_font__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_load_font__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.load_font", 
    "    void MglGraph.load_font(char const *name, char const *path)\n"
    "    void MglGraph.load_font(char const *name)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.copy_font

  call-seq:
    copy_font(GR)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_copy_font(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglGraph *arg2 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","CopyFont", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglGraph const *","CopyFont", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< mglGraph * >(argp2);
  (arg1)->CopyFont((mglGraph const *)arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.restore_font

  call-seq:
    restore_font

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_restore_font(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","RestoreFont", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  (arg1)->RestoreFont();
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_rotated_text

  call-seq:
    set_rotated_text(rotated)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_rotated_text(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetRotatedText", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetRotatedText", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->SetRotatedText(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_palette

  call-seq:
    set_palette(colors)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_palette(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetPalette", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SetPalette", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->SetPalette((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_def_scheme

  call-seq:
    set_def_scheme(sch)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_def_scheme(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetDefScheme", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SetDefScheme", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->SetDefScheme((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_color

  call-seq:
    set_color(id, r, g, b)

A class method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_color(int argc, VALUE *argv, VALUE self) {
  char arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  char val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_char(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "char","mglGraph::SetColor", 1, argv[0] ));
  } 
  arg1 = static_cast< char >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","mglGraph::SetColor", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","mglGraph::SetColor", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","mglGraph::SetColor", 4, argv[3] ));
  } 
  arg4 = static_cast< double >(val4);
  mglGraph::SetColor(arg1,arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_mask

  call-seq:
    set_mask(id, mask)
    set_mask(id, mask)

A class method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_mask__SWIG_0(int argc, VALUE *argv, VALUE self) {
  char arg1 ;
  char *arg2 = (char *) 0 ;
  char val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_char(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "char","mglGraph::SetMask", 1, argv[0] ));
  } 
  arg1 = static_cast< char >(val1);
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","mglGraph::SetMask", 2, argv[1] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  mglGraph::SetMask(arg1,(char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_mask__SWIG_1(int argc, VALUE *argv, VALUE self) {
  char arg1 ;
  uint64_t arg2 ;
  char val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_char(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "char","mglGraph::SetMask", 1, argv[0] ));
  } 
  arg1 = static_cast< char >(val1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_uint64_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint64_t","mglGraph::SetMask", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint64_t","mglGraph::SetMask", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< uint64_t * >(argp2));
    }
  }
  mglGraph::SetMask(arg1,arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_set_mask(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_char(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_uint64_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_set_mask__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_char(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_set_mask__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "MglGraph.set_mask", 
    "    void MglGraph.set_mask(char id, char const *mask)\n"
    "    void MglGraph.set_mask(char id, uint64_t mask)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_mask_angle

  call-seq:
    set_mask_angle(angle)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_mask_angle(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetMaskAngle", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetMaskAngle", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetMaskAngle(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.get_warn

  call-seq:
    get_warn -> int

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_get_warn(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","GetWarn", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  result = (int)(arg1)->GetWarn();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_warn

  call-seq:
    set_warn(code, info)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_warn(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetWarn", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetWarn", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","SetWarn", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->SetWarn(arg2,(char const *)arg3);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.message

  call-seq:
    message -> char const *

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_message(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Message", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  result = (char *)(arg1)->Message();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.zoom_axis

  call-seq:
    zoom_axis(p1=mglPoint(0,0,0,0), p2=mglPoint(1,1,1,1))
    zoom_axis(p1=mglPoint(0,0,0,0))
    zoom_axis

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_zoom_axis__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ZoomAxis", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  (arg1)->ZoomAxis(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_zoom_axis__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ZoomAxis", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  (arg1)->ZoomAxis(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_zoom_axis__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ZoomAxis", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  (arg1)->ZoomAxis();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_zoom_axis(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MglGraph_zoom_axis__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_zoom_axis__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_zoom_axis__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.zoom_axis", 
    "    void MglGraph.zoom_axis(mglPoint p1, mglPoint p2)\n"
    "    void MglGraph.zoom_axis(mglPoint p1)\n"
    "    void MglGraph.zoom_axis()\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.add_range

  call-seq:
    add_range(dir, v1, v2)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_add_range(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","AddRange", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","AddRange", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","AddRange", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","AddRange", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->AddRange(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_range

  call-seq:
    set_range(dir, v1, v2)
    set_range(dir, dat, add=false)
    set_range(dir, dat)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_range__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetRange", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","SetRange", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetRange", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","SetRange", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->SetRange(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_range__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  mglData *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetRange", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","SetRange", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  {
    arg3 = GetMglData(argv[1]);
  }
  ecode4 = SWIG_AsVal_bool(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "bool","SetRange", 4, argv[2] ));
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->SetRange(arg2,(mglData const &)*arg3,arg4);
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_range__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetRange", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","SetRange", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->SetRange(arg2,(mglData const &)*arg3);
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_set_range(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_set_range__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_set_range__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_set_range__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglGraph.set_range", 
    "    void MglGraph.set_range(char dir, double v1, double v2)\n"
    "    void MglGraph.set_range(char dir, mglData const &dat, bool add)\n"
    "    void MglGraph.set_range(char dir, mglData const &dat)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_ranges

  call-seq:
    set_ranges(xx, yy, zz, cc)
    set_ranges(xx, yy, zz)
    set_ranges(xx, yy)
    set_ranges(x1, x2, y1, y2, z1=0, z2=0)
    set_ranges(x1, x2, y1, y2, z1=0)
    set_ranges(x1, x2, y1, y2)
    set_ranges(p1, p2)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_ranges__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetRanges", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->SetRanges((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_ranges__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetRanges", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->SetRanges((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_ranges__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetRanges", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->SetRanges((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_ranges__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetRanges", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetRanges", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetRanges", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","SetRanges", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","SetRanges", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","SetRanges", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","SetRanges", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  (arg1)->SetRanges(arg2,arg3,arg4,arg5,arg6,arg7);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_ranges__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetRanges", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetRanges", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetRanges", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","SetRanges", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","SetRanges", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","SetRanges", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  (arg1)->SetRanges(arg2,arg3,arg4,arg5,arg6);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_ranges__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetRanges", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetRanges", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetRanges", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","SetRanges", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","SetRanges", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->SetRanges(arg2,arg3,arg4,arg5);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_ranges__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetRanges", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  (arg1)->SetRanges(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_set_ranges(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_set_ranges__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_set_ranges__SWIG_6(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_set_ranges__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_set_ranges__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_set_ranges__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglGraph_set_ranges__SWIG_4(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_MglGraph_set_ranges__SWIG_3(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.set_ranges", 
    "    void MglGraph.set_ranges(mglData const &xx, mglData const &yy, mglData const &zz, mglData const &cc)\n"
    "    void MglGraph.set_ranges(mglData const &xx, mglData const &yy, mglData const &zz)\n"
    "    void MglGraph.set_ranges(mglData const &xx, mglData const &yy)\n"
    "    void MglGraph.set_ranges(double x1, double x2, double y1, double y2, double z1, double z2)\n"
    "    void MglGraph.set_ranges(double x1, double x2, double y1, double y2, double z1)\n"
    "    void MglGraph.set_ranges(double x1, double x2, double y1, double y2)\n"
    "    void MglGraph.set_ranges(mglPoint p1, mglPoint p2)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_auto_ranges

  call-seq:
    set_auto_ranges(x1, x2, y1=0, y2=0, z1=0, z2=0, c1=0, c2=0)
    set_auto_ranges(x1, x2, y1=0, y2=0, z1=0, z2=0, c1=0)
    set_auto_ranges(x1, x2, y1=0, y2=0, z1=0, z2=0)
    set_auto_ranges(x1, x2, y1=0, y2=0, z1=0)
    set_auto_ranges(x1, x2, y1=0, y2=0)
    set_auto_ranges(x1, x2, y1=0)
    set_auto_ranges(x1, x2)
    set_auto_ranges(p1, p2)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_auto_ranges__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetAutoRanges", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetAutoRanges", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetAutoRanges", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","SetAutoRanges", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","SetAutoRanges", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","SetAutoRanges", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","SetAutoRanges", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), Ruby_Format_TypeError( "", "double","SetAutoRanges", 8, argv[6] ));
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(argv[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), Ruby_Format_TypeError( "", "double","SetAutoRanges", 9, argv[7] ));
  } 
  arg9 = static_cast< double >(val9);
  (arg1)->SetAutoRanges(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_auto_ranges__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetAutoRanges", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetAutoRanges", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetAutoRanges", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","SetAutoRanges", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","SetAutoRanges", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","SetAutoRanges", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","SetAutoRanges", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), Ruby_Format_TypeError( "", "double","SetAutoRanges", 8, argv[6] ));
  } 
  arg8 = static_cast< double >(val8);
  (arg1)->SetAutoRanges(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_auto_ranges__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetAutoRanges", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetAutoRanges", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetAutoRanges", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","SetAutoRanges", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","SetAutoRanges", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","SetAutoRanges", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","SetAutoRanges", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  (arg1)->SetAutoRanges(arg2,arg3,arg4,arg5,arg6,arg7);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_auto_ranges__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetAutoRanges", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetAutoRanges", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetAutoRanges", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","SetAutoRanges", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","SetAutoRanges", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","SetAutoRanges", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  (arg1)->SetAutoRanges(arg2,arg3,arg4,arg5,arg6);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_auto_ranges__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetAutoRanges", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetAutoRanges", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetAutoRanges", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","SetAutoRanges", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","SetAutoRanges", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->SetAutoRanges(arg2,arg3,arg4,arg5);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_auto_ranges__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetAutoRanges", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetAutoRanges", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetAutoRanges", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","SetAutoRanges", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->SetAutoRanges(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_auto_ranges__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetAutoRanges", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetAutoRanges", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetAutoRanges", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->SetAutoRanges(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_auto_ranges__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetAutoRanges", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  (arg1)->SetAutoRanges(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_set_auto_ranges(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[10];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 10) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_set_auto_ranges__SWIG_6(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_set_auto_ranges__SWIG_7(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_set_auto_ranges__SWIG_5(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_set_auto_ranges__SWIG_4(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglGraph_set_auto_ranges__SWIG_3(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_MglGraph_set_auto_ranges__SWIG_2(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_MglGraph_set_auto_ranges__SWIG_1(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_MglGraph_set_auto_ranges__SWIG_0(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 10, "MglGraph.set_auto_ranges", 
    "    void MglGraph.set_auto_ranges(double x1, double x2, double y1, double y2, double z1, double z2, double c1, double c2)\n"
    "    void MglGraph.set_auto_ranges(double x1, double x2, double y1, double y2, double z1, double z2, double c1)\n"
    "    void MglGraph.set_auto_ranges(double x1, double x2, double y1, double y2, double z1, double z2)\n"
    "    void MglGraph.set_auto_ranges(double x1, double x2, double y1, double y2, double z1)\n"
    "    void MglGraph.set_auto_ranges(double x1, double x2, double y1, double y2)\n"
    "    void MglGraph.set_auto_ranges(double x1, double x2, double y1)\n"
    "    void MglGraph.set_auto_ranges(double x1, double x2)\n"
    "    void MglGraph.set_auto_ranges(mglPoint p1, mglPoint p2)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_origin

  call-seq:
    set_origin(p)
    set_origin(x0, y0, z0=NaN)
    set_origin(x0, y0)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_origin__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetOrigin", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  (arg1)->SetOrigin(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_origin__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetOrigin", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetOrigin", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetOrigin", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","SetOrigin", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->SetOrigin(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_origin__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetOrigin", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetOrigin", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetOrigin", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->SetOrigin(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_set_origin(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_set_origin__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_set_origin__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_set_origin__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglGraph.set_origin", 
    "    void MglGraph.set_origin(mglPoint p)\n"
    "    void MglGraph.set_origin(double x0, double y0, double z0)\n"
    "    void MglGraph.set_origin(double x0, double y0)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_func

  call-seq:
    set_func(EqX, EqY, EqZ=nil, EqA=nil)
    set_func(EqX, EqY=0, EqZ=0, EqA=0)
    set_func(EqX, EqY=0, EqZ=0)
    set_func(EqX, EqY=0)
    set_func(EqX)
    set_func(EqX, EqY, EqZ=0, EqA=0)
    set_func(EqX, EqY, EqZ=0)
    set_func(EqX, EqY)
    set_func(EqX, EqY, EqZ=nil, EqA=0)
    set_func(EqX, EqY, EqZ=nil)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_func__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetFunc", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SetFunc", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","SetFunc", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","SetFunc", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","SetFunc", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->SetFunc((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_coor

  call-seq:
    set_coor(how)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_coor(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetCoor", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetCoor", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetCoor(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.ternary

  call-seq:
    ternary(val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_ternary(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Ternary", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Ternary", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->Ternary(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_tick_rotate

  call-seq:
    set_tick_rotate(val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_tick_rotate(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetTickRotate", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetTickRotate", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->SetTickRotate(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_tick_skip

  call-seq:
    set_tick_skip(val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_tick_skip(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetTickSkip", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetTickSkip", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->SetTickSkip(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_tick_len

  call-seq:
    set_tick_len(len, stt=1)
    set_tick_len(len)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_tick_len__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetTickLen", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetTickLen", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetTickLen", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->SetTickLen(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_tick_len__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetTickLen", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetTickLen", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetTickLen(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_set_tick_len(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglGraph_set_tick_len__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_set_tick_len__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.set_tick_len", 
    "    void MglGraph.set_tick_len(double len, double stt)\n"
    "    void MglGraph.set_tick_len(double len)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_axis_stl

  call-seq:
    set_axis_stl(stl="k", tck=None, sub=None)
    set_axis_stl(stl="k", tck=None)
    set_axis_stl(stl="k")
    set_axis_stl

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_axis_stl__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetAxisStl", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SetAxisStl", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","SetAxisStl", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","SetAxisStl", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->SetAxisStl((char const *)arg2,(char const *)arg3,(char const *)arg4);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_axis_stl__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetAxisStl", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SetAxisStl", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","SetAxisStl", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->SetAxisStl((char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_axis_stl__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetAxisStl", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SetAxisStl", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->SetAxisStl((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_axis_stl__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetAxisStl", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  (arg1)->SetAxisStl();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_set_axis_stl(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MglGraph_set_axis_stl__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_set_axis_stl__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_set_axis_stl__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_set_axis_stl__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglGraph.set_axis_stl", 
    "    void MglGraph.set_axis_stl(char const *stl, char const *tck, char const *sub)\n"
    "    void MglGraph.set_axis_stl(char const *stl, char const *tck)\n"
    "    void MglGraph.set_axis_stl(char const *stl)\n"
    "    void MglGraph.set_axis_stl()\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_ticks_time

  call-seq:
    set_ticks_time(dir, d=0, t="")
    set_ticks_time(dir, d=0)
    set_ticks_time(dir)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_ticks_time__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  double arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetTicksTime", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","SetTicksTime", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetTicksTime", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","SetTicksTime", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->SetTicksTime(arg2,arg3,(char const *)arg4);
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_ticks_time__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetTicksTime", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","SetTicksTime", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetTicksTime", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->SetTicksTime(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_ticks_time__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetTicksTime", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","SetTicksTime", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  (arg1)->SetTicksTime(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_set_ticks_time(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglGraph_set_ticks_time__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_set_ticks_time__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_set_ticks_time__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglGraph.set_ticks_time", 
    "    void MglGraph.set_ticks_time(char dir, double d, char const *t)\n"
    "    void MglGraph.set_ticks_time(char dir, double d)\n"
    "    void MglGraph.set_ticks_time(char dir)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_ticks_val

  call-seq:
    set_ticks_val(dir, lbl, add=false)
    set_ticks_val(dir, lbl)
    set_ticks_val(dir, lbl, add=false)
    set_ticks_val(dir, lbl)
    set_ticks_val(dir, v, lbl, add=false)
    set_ticks_val(dir, v, lbl)
    set_ticks_val(dir, v, lbl, add=false)
    set_ticks_val(dir, v, lbl)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_ticks_val__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetTicksVal", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","SetTicksVal", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","SetTicksVal", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_bool(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "bool","SetTicksVal", 4, argv[2] ));
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->SetTicksVal(arg2,(char const *)arg3,arg4);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_ticks_val__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetTicksVal", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","SetTicksVal", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","SetTicksVal", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->SetTicksVal(arg2,(char const *)arg3);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_ticks_val__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetTicksVal", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","SetTicksVal", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "wchar_t const *","SetTicksVal", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< wchar_t * >(argp3);
  ecode4 = SWIG_AsVal_bool(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "bool","SetTicksVal", 4, argv[2] ));
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->SetTicksVal(arg2,(wchar_t const *)arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_ticks_val__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetTicksVal", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","SetTicksVal", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "wchar_t const *","SetTicksVal", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< wchar_t * >(argp3);
  (arg1)->SetTicksVal(arg2,(wchar_t const *)arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_ticks_val__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetTicksVal", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","SetTicksVal", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","SetTicksVal", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_bool(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "bool","SetTicksVal", 5, argv[3] ));
  } 
  arg5 = static_cast< bool >(val5);
  (arg1)->SetTicksVal(arg2,(mglData const &)*arg3,(char const *)arg4,arg5);
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_ticks_val__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetTicksVal", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","SetTicksVal", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","SetTicksVal", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->SetTicksVal(arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_ticks_val__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  mglData *arg3 = 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetTicksVal", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","SetTicksVal", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "wchar_t const *","SetTicksVal", 4, argv[2] )); 
  }
  arg4 = reinterpret_cast< wchar_t * >(argp4);
  ecode5 = SWIG_AsVal_bool(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "bool","SetTicksVal", 5, argv[3] ));
  } 
  arg5 = static_cast< bool >(val5);
  (arg1)->SetTicksVal(arg2,(mglData const &)*arg3,(wchar_t const *)arg4,arg5);
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_ticks_val__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  mglData *arg3 = 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetTicksVal", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","SetTicksVal", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "wchar_t const *","SetTicksVal", 4, argv[2] )); 
  }
  arg4 = reinterpret_cast< wchar_t * >(argp4);
  (arg1)->SetTicksVal(arg2,(mglData const &)*arg3,(wchar_t const *)arg4);
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_set_ticks_val(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wchar_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_set_ticks_val__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_set_ticks_val__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wchar_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_set_ticks_val__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_set_ticks_val__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_wchar_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_set_ticks_val__SWIG_7(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_set_ticks_val__SWIG_5(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_wchar_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_set_ticks_val__SWIG_6(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_set_ticks_val__SWIG_4(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglGraph.set_ticks_val", 
    "    void MglGraph.set_ticks_val(char dir, char const *lbl, bool add)\n"
    "    void MglGraph.set_ticks_val(char dir, char const *lbl)\n"
    "    void MglGraph.set_ticks_val(char dir, wchar_t const *lbl, bool add)\n"
    "    void MglGraph.set_ticks_val(char dir, wchar_t const *lbl)\n"
    "    void MglGraph.set_ticks_val(char dir, mglData const &v, char const *lbl, bool add)\n"
    "    void MglGraph.set_ticks_val(char dir, mglData const &v, char const *lbl)\n"
    "    void MglGraph.set_ticks_val(char dir, mglData const &v, wchar_t const *lbl, bool add)\n"
    "    void MglGraph.set_ticks_val(char dir, mglData const &v, wchar_t const *lbl)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.add_tick

  call-seq:
    add_tick(dir, val, lbl)
    add_tick(dir, val, lbl)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_add_tick__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  double arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","AddTick", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","AddTick", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","AddTick", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","AddTick", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->AddTick(arg2,arg3,(char const *)arg4);
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_add_tick__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  double arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","AddTick", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","AddTick", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","AddTick", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "wchar_t const *","AddTick", 4, argv[2] )); 
  }
  arg4 = reinterpret_cast< wchar_t * >(argp4);
  (arg1)->AddTick(arg2,arg3,(wchar_t const *)arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_add_tick(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_wchar_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_add_tick__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_add_tick__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglGraph.add_tick", 
    "    void MglGraph.add_tick(char dir, double val, char const *lbl)\n"
    "    void MglGraph.add_tick(char dir, double val, wchar_t const *lbl)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_ticks

  call-seq:
    set_ticks(dir, d=0, ns=0, org=NaN, factor="")
    set_ticks(dir, d=0, ns=0, org=NaN)
    set_ticks(dir, d=0, ns=0)
    set_ticks(dir, d=0)
    set_ticks(dir)
    set_ticks(dir, d, ns, org, factor)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_ticks__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  double arg3 ;
  int arg4 ;
  double arg5 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetTicks", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","SetTicks", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetTicks", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","SetTicks", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","SetTicks", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","SetTicks", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->SetTicks(arg2,arg3,arg4,arg5,(char const *)arg6);
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_ticks__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  double arg3 ;
  int arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetTicks", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","SetTicks", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetTicks", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","SetTicks", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","SetTicks", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->SetTicks(arg2,arg3,arg4,arg5);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_ticks__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  double arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetTicks", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","SetTicks", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetTicks", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","SetTicks", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  (arg1)->SetTicks(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_ticks__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetTicks", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","SetTicks", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetTicks", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->SetTicks(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_ticks__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetTicks", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","SetTicks", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  (arg1)->SetTicks(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_ticks__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  double arg3 ;
  int arg4 ;
  double arg5 ;
  wchar_t *arg6 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetTicks", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","SetTicks", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetTicks", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","SetTicks", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","SetTicks", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_ConvertPtr(argv[4], &argp6,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "wchar_t const *","SetTicks", 6, argv[4] )); 
  }
  arg6 = reinterpret_cast< wchar_t * >(argp6);
  (arg1)->SetTicks(arg2,arg3,arg4,arg5,(wchar_t const *)arg6);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_set_ticks(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglGraph_set_ticks__SWIG_4(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_set_ticks__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_set_ticks__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_set_ticks__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_wchar_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_set_ticks__SWIG_5(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_set_ticks__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.set_ticks", 
    "    void MglGraph.set_ticks(char dir, double d, int ns, double org, char const *factor)\n"
    "    void MglGraph.set_ticks(char dir, double d, int ns, double org)\n"
    "    void MglGraph.set_ticks(char dir, double d, int ns)\n"
    "    void MglGraph.set_ticks(char dir, double d)\n"
    "    void MglGraph.set_ticks(char dir)\n"
    "    void MglGraph.set_ticks(char dir, double d, int ns, double org, wchar_t const *factor)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.adjust

  call-seq:
    adjust(dir="xyzc")
    adjust

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_adjust__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Adjust", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Adjust", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->Adjust((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_adjust__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Adjust", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  (arg1)->Adjust();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_adjust(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MglGraph_adjust__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_adjust__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MglGraph.adjust", 
    "    void MglGraph.adjust(char const *dir)\n"
    "    void MglGraph.adjust()\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_tick_templ

  call-seq:
    set_tick_templ(dir, t)
    set_tick_templ(dir, t)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_tick_templ__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetTickTempl", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","SetTickTempl", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","SetTickTempl", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->SetTickTempl(arg2,(char const *)arg3);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_tick_templ__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetTickTempl", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","SetTickTempl", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "wchar_t const *","SetTickTempl", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< wchar_t * >(argp3);
  (arg1)->SetTickTempl(arg2,(wchar_t const *)arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_set_tick_templ(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wchar_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_set_tick_templ__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_set_tick_templ__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.set_tick_templ", 
    "    void MglGraph.set_tick_templ(char dir, char const *t)\n"
    "    void MglGraph.set_tick_templ(char dir, wchar_t const *t)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_tune_ticks

  call-seq:
    set_tune_ticks(tune, fact_pos=1.15)
    set_tune_ticks(tune)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_tune_ticks__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetTuneTicks", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetTuneTicks", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetTuneTicks", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->SetTuneTicks(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_tune_ticks__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetTuneTicks", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetTuneTicks", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetTuneTicks(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_set_tune_ticks(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglGraph_set_tune_ticks__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_set_tune_ticks__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.set_tune_ticks", 
    "    void MglGraph.set_tune_ticks(int tune, double fact_pos)\n"
    "    void MglGraph.set_tune_ticks(int tune)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_tick_shift

  call-seq:
    set_tick_shift(p)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_tick_shift(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetTickShift", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  (arg1)->SetTickShift(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_time_utc

  call-seq:
    set_time_utc(enable)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_time_utc(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetTimeUTC", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetTimeUTC", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->SetTimeUTC(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_origin_tick

  call-seq:
    set_origin_tick(enable=true)
    set_origin_tick

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_origin_tick__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetOriginTick", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetOriginTick", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->SetOriginTick(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_origin_tick__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetOriginTick", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  (arg1)->SetOriginTick();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_set_origin_tick(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MglGraph_set_origin_tick__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglGraph_set_origin_tick__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MglGraph.set_origin_tick", 
    "    void MglGraph.set_origin_tick(bool enable)\n"
    "    void MglGraph.set_origin_tick()\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.sub_plot

  call-seq:
    sub_plot(nx, ny, m, style="<>_^", dx=0, dy=0)
    sub_plot(nx, ny, m, style="<>_^", dx=0)
    sub_plot(nx, ny, m, style="<>_^")
    sub_plot(nx, ny, m)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_sub_plot__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SubPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SubPlot", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","SubPlot", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","SubPlot", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","SubPlot", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","SubPlot", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","SubPlot", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  (arg1)->SubPlot(arg2,arg3,arg4,(char const *)arg5,arg6,arg7);
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_sub_plot__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SubPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SubPlot", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","SubPlot", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","SubPlot", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","SubPlot", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","SubPlot", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  (arg1)->SubPlot(arg2,arg3,arg4,(char const *)arg5,arg6);
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_sub_plot__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SubPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SubPlot", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","SubPlot", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","SubPlot", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","SubPlot", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->SubPlot(arg2,arg3,arg4,(char const *)arg5);
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_sub_plot__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SubPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SubPlot", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","SubPlot", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","SubPlot", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  (arg1)->SubPlot(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_sub_plot(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_sub_plot__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_sub_plot__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglGraph_sub_plot__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_MglGraph_sub_plot__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.sub_plot", 
    "    void MglGraph.sub_plot(int nx, int ny, int m, char const *style, double dx, double dy)\n"
    "    void MglGraph.sub_plot(int nx, int ny, int m, char const *style, double dx)\n"
    "    void MglGraph.sub_plot(int nx, int ny, int m, char const *style)\n"
    "    void MglGraph.sub_plot(int nx, int ny, int m)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.multi_plot

  call-seq:
    multi_plot(nx, ny, m, dx, dy, style="<>_^")
    multi_plot(nx, ny, m, dx, dy)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_multi_plot__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","MultiPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","MultiPlot", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","MultiPlot", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","MultiPlot", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int","MultiPlot", 5, argv[3] ));
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "int","MultiPlot", 6, argv[4] ));
  } 
  arg6 = static_cast< int >(val6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","MultiPlot", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->MultiPlot(arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_multi_plot__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","MultiPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","MultiPlot", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","MultiPlot", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","MultiPlot", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int","MultiPlot", 5, argv[3] ));
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "int","MultiPlot", 6, argv[4] ));
  } 
  arg6 = static_cast< int >(val6);
  (arg1)->MultiPlot(arg2,arg3,arg4,arg5,arg6);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_multi_plot(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglGraph_multi_plot__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_multi_plot__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.multi_plot", 
    "    void MglGraph.multi_plot(int nx, int ny, int m, int dx, int dy, char const *style)\n"
    "    void MglGraph.multi_plot(int nx, int ny, int m, int dx, int dy)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.in_plot

  call-seq:
    in_plot(x1, x2, y1, y2, rel=true)
    in_plot(x1, x2, y1, y2)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_in_plot__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","InPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","InPlot", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","InPlot", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","InPlot", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","InPlot", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_bool(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "bool","InPlot", 6, argv[4] ));
  } 
  arg6 = static_cast< bool >(val6);
  (arg1)->InPlot(arg2,arg3,arg4,arg5,arg6);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_in_plot__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","InPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","InPlot", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","InPlot", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","InPlot", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","InPlot", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->InPlot(arg2,arg3,arg4,arg5);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_in_plot(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_in_plot__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglGraph_in_plot__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.in_plot", 
    "    void MglGraph.in_plot(double x1, double x2, double y1, double y2, bool rel)\n"
    "    void MglGraph.in_plot(double x1, double x2, double y1, double y2)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.column_plot

  call-seq:
    column_plot(num, ind, d=0)
    column_plot(num, ind)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_column_plot__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ColumnPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ColumnPlot", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","ColumnPlot", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","ColumnPlot", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->ColumnPlot(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_column_plot__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ColumnPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ColumnPlot", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","ColumnPlot", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->ColumnPlot(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_column_plot(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_column_plot__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_column_plot__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglGraph.column_plot", 
    "    void MglGraph.column_plot(int num, int ind, double d)\n"
    "    void MglGraph.column_plot(int num, int ind)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.grid_plot

  call-seq:
    grid_plot(nx, ny, ind, d=0)
    grid_plot(nx, ny, ind)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_grid_plot__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","GridPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GridPlot", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","GridPlot", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","GridPlot", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","GridPlot", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->GridPlot(arg2,arg3,arg4,arg5);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_grid_plot__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","GridPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GridPlot", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","GridPlot", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","GridPlot", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  (arg1)->GridPlot(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_grid_plot(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_grid_plot__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_grid_plot__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglGraph.grid_plot", 
    "    void MglGraph.grid_plot(int nx, int ny, int ind, double d)\n"
    "    void MglGraph.grid_plot(int nx, int ny, int ind)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.stick_plot

  call-seq:
    stick_plot(num, i, tet, phi)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_stick_plot(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","StickPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","StickPlot", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","StickPlot", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","StickPlot", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","StickPlot", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->StickPlot(arg2,arg3,arg4,arg5);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_plot_factor

  call-seq:
    set_plot_factor(val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_plot_factor(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetPlotFactor", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetPlotFactor", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetPlotFactor(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.push

  call-seq:
    push

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_push(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Push", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  (arg1)->Push();
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.pop

  call-seq:
    pop

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_pop(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Pop", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  (arg1)->Pop();
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.title

  call-seq:
    title(title, stl="", size=-2)
    title(title, stl="")
    title(title)
    title(title, stl="", size=-2)
    title(title, stl="")
    title(title)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_title__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Title", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Title", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Title", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Title", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->Title((char const *)arg2,(char const *)arg3,arg4);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_title__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Title", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Title", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Title", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Title((char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_title__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Title", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Title", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->Title((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_title__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Title", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "wchar_t const *","Title", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< wchar_t * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Title", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Title", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->Title((wchar_t const *)arg2,(char const *)arg3,arg4);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_title__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Title", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "wchar_t const *","Title", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< wchar_t * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Title", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Title((wchar_t const *)arg2,(char const *)arg3);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_title__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Title", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "wchar_t const *","Title", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< wchar_t * >(argp2);
  (arg1)->Title((wchar_t const *)arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_title(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wchar_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_title__SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_title__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wchar_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_title__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_title__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wchar_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_title__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_title__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglGraph.title", 
    "    void MglGraph.title(char const *title, char const *stl, double size)\n"
    "    void MglGraph.title(char const *title, char const *stl)\n"
    "    void MglGraph.title(char const *title)\n"
    "    void MglGraph.title(wchar_t const *title, char const *stl, double size)\n"
    "    void MglGraph.title(wchar_t const *title, char const *stl)\n"
    "    void MglGraph.title(wchar_t const *title)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.aspect

  call-seq:
    aspect(Ax, Ay, Az=1)
    aspect(Ax, Ay)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_aspect__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Aspect", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Aspect", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Aspect", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Aspect", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->Aspect(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_aspect__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Aspect", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Aspect", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Aspect", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->Aspect(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_aspect(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_aspect__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_aspect__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglGraph.aspect", 
    "    void MglGraph.aspect(double Ax, double Ay, double Az)\n"
    "    void MglGraph.aspect(double Ax, double Ay)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.rotate

  call-seq:
    rotate(TetX, TetZ=0, TetY=0)
    rotate(TetX, TetZ=0)
    rotate(TetX)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_rotate__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Rotate", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Rotate", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Rotate", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Rotate", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->Rotate(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_rotate__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Rotate", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Rotate", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Rotate", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->Rotate(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_rotate__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Rotate", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Rotate", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->Rotate(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_rotate(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglGraph_rotate__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_rotate__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_rotate__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglGraph.rotate", 
    "    void MglGraph.rotate(double TetX, double TetZ, double TetY)\n"
    "    void MglGraph.rotate(double TetX, double TetZ)\n"
    "    void MglGraph.rotate(double TetX)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.rotate_n

  call-seq:
    rotate_n(Tet, x, y, z)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_rotate_n(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","RotateN", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","RotateN", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","RotateN", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","RotateN", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","RotateN", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->RotateN(arg2,arg3,arg4,arg5);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.perspective

  call-seq:
    perspective(val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_perspective(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Perspective", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Perspective", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->Perspective(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.view

  call-seq:
    view(TetX, TetZ=0, TetY=0)
    view(TetX, TetZ=0)
    view(TetX)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_view__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","View", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","View", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","View", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","View", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->View(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_view__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","View", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","View", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","View", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->View(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_view__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","View", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","View", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->View(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_view(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglGraph_view__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_view__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_view__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglGraph.view", 
    "    void MglGraph.view(double TetX, double TetZ, double TetY)\n"
    "    void MglGraph.view(double TetX, double TetZ)\n"
    "    void MglGraph.view(double TetX)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.view_as_rotate

  call-seq:
    view_as_rotate(TetZ, TetX, TetY=0)
    view_as_rotate(TetZ, TetX)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_view_as_rotate__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ViewAsRotate", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","ViewAsRotate", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","ViewAsRotate", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","ViewAsRotate", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->ViewAsRotate(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_view_as_rotate__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ViewAsRotate", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","ViewAsRotate", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","ViewAsRotate", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->ViewAsRotate(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_view_as_rotate(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_view_as_rotate__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_view_as_rotate__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglGraph.view_as_rotate", 
    "    void MglGraph.view_as_rotate(double TetZ, double TetX, double TetY)\n"
    "    void MglGraph.view_as_rotate(double TetZ, double TetX)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.zoom

  call-seq:
    zoom(x1, y1, x2, y2)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_zoom(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Zoom", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Zoom", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Zoom", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Zoom", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","Zoom", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->Zoom(arg2,arg3,arg4,arg5);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_size

  call-seq:
    set_size(width, height)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_size(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetSize", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetSize", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","SetSize", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->SetSize(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_quality

  call-seq:
    set_quality(qual=MGL_DRAW_NORM)
    set_quality

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_quality__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetQuality", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetQuality", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetQuality(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_quality__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetQuality", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  (arg1)->SetQuality();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_set_quality(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MglGraph_set_quality__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglGraph_set_quality__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MglGraph.set_quality", 
    "    void MglGraph.set_quality(int qual)\n"
    "    void MglGraph.set_quality()\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.get_quality

  call-seq:
    get_quality -> int

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_get_quality(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","GetQuality", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  result = (int)(arg1)->GetQuality();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_draw_reg

  call-seq:
    set_draw_reg(nx=1, ny=1, m=0)
    set_draw_reg(nx=1, ny=1)
    set_draw_reg(nx=1)
    set_draw_reg

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_draw_reg__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetDrawReg", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","SetDrawReg", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","SetDrawReg", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "long","SetDrawReg", 4, argv[2] ));
  } 
  arg4 = static_cast< long >(val4);
  (arg1)->SetDrawReg(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_draw_reg__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetDrawReg", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","SetDrawReg", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","SetDrawReg", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  (arg1)->SetDrawReg(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_draw_reg__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetDrawReg", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","SetDrawReg", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  (arg1)->SetDrawReg(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_draw_reg__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetDrawReg", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  (arg1)->SetDrawReg();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_set_draw_reg(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MglGraph_set_draw_reg__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglGraph_set_draw_reg__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_set_draw_reg__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_set_draw_reg__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglGraph.set_draw_reg", 
    "    void MglGraph.set_draw_reg(long nx, long ny, long m)\n"
    "    void MglGraph.set_draw_reg(long nx, long ny)\n"
    "    void MglGraph.set_draw_reg(long nx)\n"
    "    void MglGraph.set_draw_reg()\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.start_group

  call-seq:
    start_group(name)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_start_group(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","StartGroup", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","StartGroup", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->StartGroup((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.end_group

  call-seq:
    end_group

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_end_group(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","EndGroup", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  (arg1)->EndGroup();
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.highlight

  call-seq:
    highlight(id)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_highlight(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Highlight", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Highlight", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->Highlight(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.show_image

  call-seq:
    show_image(viewer, keep=0)
    show_image(viewer)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_show_image__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ShowImage", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","ShowImage", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","ShowImage", 3, argv[1] ));
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->ShowImage((char const *)arg2,arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_show_image__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ShowImage", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","ShowImage", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->ShowImage((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_show_image(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_show_image__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_show_image__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.show_image", 
    "    void MglGraph.show_image(char const *viewer, bool keep)\n"
    "    void MglGraph.show_image(char const *viewer)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.write_frame

  call-seq:
    write_frame(fname=None, descr="")
    write_frame(fname=None)
    write_frame

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_write_frame__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteFrame", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteFrame", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","WriteFrame", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->WriteFrame((char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_write_frame__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteFrame", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteFrame", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->WriteFrame((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_write_frame__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteFrame", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  (arg1)->WriteFrame();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_write_frame(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MglGraph_write_frame__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_write_frame__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_write_frame__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.write_frame", 
    "    void MglGraph.write_frame(char const *fname, char const *descr)\n"
    "    void MglGraph.write_frame(char const *fname)\n"
    "    void MglGraph.write_frame()\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.write_jpeg

  call-seq:
    write_jpeg(fname, descr="")
    write_jpeg(fname)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_write_jpeg__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteJPEG", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteJPEG", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","WriteJPEG", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->WriteJPEG((char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_write_jpeg__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteJPEG", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteJPEG", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->WriteJPEG((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_write_jpeg(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_write_jpeg__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_write_jpeg__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.write_jpeg", 
    "    void MglGraph.write_jpeg(char const *fname, char const *descr)\n"
    "    void MglGraph.write_jpeg(char const *fname)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.write_png

  call-seq:
    write_png(fname, descr="", alpha=true)
    write_png(fname, descr="")
    write_png(fname)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_write_png__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WritePNG", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WritePNG", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","WritePNG", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_bool(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "bool","WritePNG", 4, argv[2] ));
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->WritePNG((char const *)arg2,(char const *)arg3,arg4);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_write_png__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WritePNG", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WritePNG", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","WritePNG", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->WritePNG((char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_write_png__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WritePNG", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WritePNG", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->WritePNG((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_write_png(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_write_png__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_write_png__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_write_png__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglGraph.write_png", 
    "    void MglGraph.write_png(char const *fname, char const *descr, bool alpha)\n"
    "    void MglGraph.write_png(char const *fname, char const *descr)\n"
    "    void MglGraph.write_png(char const *fname)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.write_bmp

  call-seq:
    write_bmp(fname, descr="")
    write_bmp(fname)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_write_bmp__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteBMP", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteBMP", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","WriteBMP", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->WriteBMP((char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_write_bmp__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteBMP", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteBMP", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->WriteBMP((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_write_bmp(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_write_bmp__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_write_bmp__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.write_bmp", 
    "    void MglGraph.write_bmp(char const *fname, char const *descr)\n"
    "    void MglGraph.write_bmp(char const *fname)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.write_tga

  call-seq:
    write_tga(fname, descr="")
    write_tga(fname)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_write_tga__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteTGA", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteTGA", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","WriteTGA", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->WriteTGA((char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_write_tga__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteTGA", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteTGA", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->WriteTGA((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_write_tga(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_write_tga__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_write_tga__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.write_tga", 
    "    void MglGraph.write_tga(char const *fname, char const *descr)\n"
    "    void MglGraph.write_tga(char const *fname)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.write_eps

  call-seq:
    write_eps(fname, descr="")
    write_eps(fname)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_write_eps__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteEPS", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteEPS", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","WriteEPS", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->WriteEPS((char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_write_eps__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteEPS", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteEPS", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->WriteEPS((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_write_eps(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_write_eps__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_write_eps__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.write_eps", 
    "    void MglGraph.write_eps(char const *fname, char const *descr)\n"
    "    void MglGraph.write_eps(char const *fname)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.write_tex

  call-seq:
    write_tex(fname, descr="")
    write_tex(fname)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_write_tex__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteTEX", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteTEX", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","WriteTEX", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->WriteTEX((char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_write_tex__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteTEX", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteTEX", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->WriteTEX((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_write_tex(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_write_tex__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_write_tex__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.write_tex", 
    "    void MglGraph.write_tex(char const *fname, char const *descr)\n"
    "    void MglGraph.write_tex(char const *fname)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.write_bps

  call-seq:
    write_bps(fname, descr="")
    write_bps(fname)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_write_bps__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteBPS", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteBPS", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","WriteBPS", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->WriteBPS((char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_write_bps__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteBPS", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteBPS", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->WriteBPS((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_write_bps(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_write_bps__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_write_bps__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.write_bps", 
    "    void MglGraph.write_bps(char const *fname, char const *descr)\n"
    "    void MglGraph.write_bps(char const *fname)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.write_svg

  call-seq:
    write_svg(fname, descr="")
    write_svg(fname)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_write_svg__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteSVG", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteSVG", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","WriteSVG", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->WriteSVG((char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_write_svg__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteSVG", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteSVG", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->WriteSVG((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_write_svg(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_write_svg__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_write_svg__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.write_svg", 
    "    void MglGraph.write_svg(char const *fname, char const *descr)\n"
    "    void MglGraph.write_svg(char const *fname)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.write_gif

  call-seq:
    write_gif(fname, descr="")
    write_gif(fname)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_write_gif__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteGIF", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteGIF", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","WriteGIF", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->WriteGIF((char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_write_gif__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteGIF", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteGIF", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->WriteGIF((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_write_gif(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_write_gif__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_write_gif__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.write_gif", 
    "    void MglGraph.write_gif(char const *fname, char const *descr)\n"
    "    void MglGraph.write_gif(char const *fname)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.write_obj

  call-seq:
    write_obj(fname, descr="", use_png=true)
    write_obj(fname, descr="")
    write_obj(fname)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_write_obj__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteOBJ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteOBJ", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","WriteOBJ", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_bool(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "bool","WriteOBJ", 4, argv[2] ));
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->WriteOBJ((char const *)arg2,(char const *)arg3,arg4);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_write_obj__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteOBJ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteOBJ", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","WriteOBJ", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->WriteOBJ((char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_write_obj__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteOBJ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteOBJ", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->WriteOBJ((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_write_obj(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_write_obj__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_write_obj__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_write_obj__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglGraph.write_obj", 
    "    void MglGraph.write_obj(char const *fname, char const *descr, bool use_png)\n"
    "    void MglGraph.write_obj(char const *fname, char const *descr)\n"
    "    void MglGraph.write_obj(char const *fname)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.write_objold

  call-seq:
    write_objold(fname, descr="", use_png=true)
    write_objold(fname, descr="")
    write_objold(fname)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_write_objold__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteOBJold", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteOBJold", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","WriteOBJold", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_bool(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "bool","WriteOBJold", 4, argv[2] ));
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->WriteOBJold((char const *)arg2,(char const *)arg3,arg4);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_write_objold__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteOBJold", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteOBJold", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","WriteOBJold", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->WriteOBJold((char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_write_objold__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteOBJold", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteOBJold", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->WriteOBJold((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_write_objold(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_write_objold__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_write_objold__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_write_objold__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglGraph.write_objold", 
    "    void MglGraph.write_objold(char const *fname, char const *descr, bool use_png)\n"
    "    void MglGraph.write_objold(char const *fname, char const *descr)\n"
    "    void MglGraph.write_objold(char const *fname)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.write_xyz

  call-seq:
    write_xyz(fname, descr="")
    write_xyz(fname)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_write_xyz__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteXYZ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteXYZ", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","WriteXYZ", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->WriteXYZ((char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_write_xyz__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteXYZ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteXYZ", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->WriteXYZ((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_write_xyz(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_write_xyz__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_write_xyz__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.write_xyz", 
    "    void MglGraph.write_xyz(char const *fname, char const *descr)\n"
    "    void MglGraph.write_xyz(char const *fname)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.write_stl

  call-seq:
    write_stl(fname, descr="")
    write_stl(fname)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_write_stl__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteSTL", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteSTL", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","WriteSTL", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->WriteSTL((char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_write_stl__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteSTL", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteSTL", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->WriteSTL((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_write_stl(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_write_stl__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_write_stl__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.write_stl", 
    "    void MglGraph.write_stl(char const *fname, char const *descr)\n"
    "    void MglGraph.write_stl(char const *fname)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.write_off

  call-seq:
    write_off(fname, descr="", colored=false)
    write_off(fname, descr="")
    write_off(fname)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_write_off__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteOFF", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteOFF", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","WriteOFF", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_bool(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "bool","WriteOFF", 4, argv[2] ));
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->WriteOFF((char const *)arg2,(char const *)arg3,arg4);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_write_off__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteOFF", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteOFF", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","WriteOFF", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->WriteOFF((char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_write_off__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteOFF", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteOFF", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->WriteOFF((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_write_off(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_write_off__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_write_off__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_write_off__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglGraph.write_off", 
    "    void MglGraph.write_off(char const *fname, char const *descr, bool colored)\n"
    "    void MglGraph.write_off(char const *fname, char const *descr)\n"
    "    void MglGraph.write_off(char const *fname)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.write_prc

  call-seq:
    write_prc(fname, descr="", make_pdf=true)
    write_prc(fname, descr="")
    write_prc(fname)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_write_prc__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WritePRC", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WritePRC", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","WritePRC", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_bool(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "bool","WritePRC", 4, argv[2] ));
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->WritePRC((char const *)arg2,(char const *)arg3,arg4);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_write_prc__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WritePRC", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WritePRC", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","WritePRC", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->WritePRC((char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_write_prc__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WritePRC", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WritePRC", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->WritePRC((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_write_prc(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_write_prc__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_write_prc__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_write_prc__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglGraph.write_prc", 
    "    void MglGraph.write_prc(char const *fname, char const *descr, bool make_pdf)\n"
    "    void MglGraph.write_prc(char const *fname, char const *descr)\n"
    "    void MglGraph.write_prc(char const *fname)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.write_json

  call-seq:
    write_json(fname, descr="", force_z=false)
    write_json(fname, descr="")
    write_json(fname)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_write_json__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteJSON", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteJSON", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","WriteJSON", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_bool(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "bool","WriteJSON", 4, argv[2] ));
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->WriteJSON((char const *)arg2,(char const *)arg3,arg4);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_write_json__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteJSON", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteJSON", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","WriteJSON", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->WriteJSON((char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_write_json__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","WriteJSON", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","WriteJSON", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->WriteJSON((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_write_json(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_write_json__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_write_json__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_write_json__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglGraph.write_json", 
    "    void MglGraph.write_json(char const *fname, char const *descr, bool force_z)\n"
    "    void MglGraph.write_json(char const *fname, char const *descr)\n"
    "    void MglGraph.write_json(char const *fname)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.get_json

  call-seq:
    get_json -> char const *

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_get_json(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","GetJSON", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  result = (char *)(arg1)->GetJSON();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.finish

  call-seq:
    finish

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_finish(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Finish", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  (arg1)->Finish();
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.new_frame

  call-seq:
    new_frame

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_new_frame(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","NewFrame", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  (arg1)->NewFrame();
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.end_frame

  call-seq:
    end_frame

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_end_frame(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","EndFrame", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  (arg1)->EndFrame();
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.get_num_frame

  call-seq:
    get_num_frame -> int

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_get_num_frame(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","GetNumFrame", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  result = (int)(arg1)->GetNumFrame();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.reset_frames

  call-seq:
    reset_frames

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_reset_frames(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ResetFrames", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  (arg1)->ResetFrames();
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.del_frame

  call-seq:
    del_frame(i)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_del_frame(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","DelFrame", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","DelFrame", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->DelFrame(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.get_frame

  call-seq:
    get_frame(i)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_get_frame(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","GetFrame", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetFrame", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->GetFrame(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_frame

  call-seq:
    set_frame(i)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_frame(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetFrame", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetFrame", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetFrame(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.show_frame

  call-seq:
    show_frame(i)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_show_frame(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ShowFrame", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ShowFrame", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->ShowFrame(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.clear_frame

  call-seq:
    clear_frame

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_clear_frame(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ClearFrame", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  (arg1)->ClearFrame();
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.start_gif

  call-seq:
    start_gif(fname, ms=100)
    start_gif(fname)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_start_gif__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","StartGIF", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","StartGIF", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","StartGIF", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->StartGIF((char const *)arg2,arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_start_gif__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","StartGIF", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","StartGIF", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->StartGIF((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_start_gif(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_start_gif__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_start_gif__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.start_gif", 
    "    void MglGraph.start_gif(char const *fname, int ms)\n"
    "    void MglGraph.start_gif(char const *fname)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.close_gif

  call-seq:
    close_gif

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_close_gif(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","CloseGIF", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  (arg1)->CloseGIF();
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.export_mgld

  call-seq:
    export_mgld(fname, descr=None)
    export_mgld(fname)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_export_mgld__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ExportMGLD", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","ExportMGLD", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","ExportMGLD", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->ExportMGLD((char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_export_mgld__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ExportMGLD", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","ExportMGLD", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->ExportMGLD((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_export_mgld(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_export_mgld__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_export_mgld__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.export_mgld", 
    "    void MglGraph.export_mgld(char const *fname, char const *descr)\n"
    "    void MglGraph.export_mgld(char const *fname)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.import_mgld

  call-seq:
    import_mgld(fname, add=false)
    import_mgld(fname)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_import_mgld__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ImportMGLD", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","ImportMGLD", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","ImportMGLD", 3, argv[1] ));
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->ImportMGLD((char const *)arg2,arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_import_mgld__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ImportMGLD", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","ImportMGLD", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->ImportMGLD((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_import_mgld(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_import_mgld__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_import_mgld__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.import_mgld", 
    "    void MglGraph.import_mgld(char const *fname, bool add)\n"
    "    void MglGraph.import_mgld(char const *fname)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.get_rgb

  call-seq:
    get_rgb(imgdata, imglen) -> bool
    get_rgb -> unsigned char const

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_get_rgb__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","GetRGB", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","GetRGB", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","GetRGB", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(arg1)->GetRGB(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_get_rgb__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","GetRGB", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  result = (unsigned char *)(arg1)->GetRGB();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_get_rgb(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MglGraph_get_rgb__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_get_rgb__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.get_rgb", 
    "    unsigned char const * MglGraph.get_rgb(char *imgdata, int imglen)\n"
    "    unsigned char const * MglGraph.get_rgb()\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.get_rgba

  call-seq:
    get_rgba(imgdata, imglen) -> bool
    get_rgba -> unsigned char const

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_get_rgba__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","GetRGBA", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","GetRGBA", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","GetRGBA", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(arg1)->GetRGBA(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_get_rgba__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","GetRGBA", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  result = (unsigned char *)(arg1)->GetRGBA();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_get_rgba(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MglGraph_get_rgba__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_get_rgba__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.get_rgba", 
    "    unsigned char const * MglGraph.get_rgba(char *imgdata, int imglen)\n"
    "    unsigned char const * MglGraph.get_rgba()\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.get_bgrn

  call-seq:
    get_bgrn(imgdata, imglen) -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_get_bgrn(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","GetBGRN", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "unsigned char *","GetBGRN", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","GetBGRN", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(arg1)->GetBGRN(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.get_background

  call-seq:
    get_background(imgdata, imglen) -> bool
    get_background -> unsigned char const

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_get_background__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","GetBackground", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","GetBackground", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","GetBackground", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(arg1)->GetBackground(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_get_background__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","GetBackground", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  result = (unsigned char *)(arg1)->GetBackground();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_get_background(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MglGraph_get_background__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_get_background__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.get_background", 
    "    unsigned char const * MglGraph.get_background(char *imgdata, int imglen)\n"
    "    unsigned char const * MglGraph.get_background()\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.get_width

  call-seq:
    get_width -> int

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_get_width(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","GetWidth", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  result = (int)(arg1)->GetWidth();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.get_height

  call-seq:
    get_height -> int

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_get_height(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","GetHeight", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  result = (int)(arg1)->GetHeight();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.calc_xyz

  call-seq:
    calc_xyz(xs, ys) -> MglPoint

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_calc_xyz(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mglPoint result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","CalcXYZ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","CalcXYZ", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","CalcXYZ", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (arg1)->CalcXYZ(arg2,arg3);
  vresult = SWIG_NewPointerObj((new mglPoint(static_cast< const mglPoint& >(result))), SWIGTYPE_p_mglPoint, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.calc_scr

  call-seq:
    calc_scr(p) -> MglPoint

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_calc_scr(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mglPoint result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","CalcScr", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  result = (arg1)->CalcScr(arg2);
  vresult = SWIG_NewPointerObj((new mglPoint(static_cast< const mglPoint& >(result))), SWIGTYPE_p_mglPoint, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_obj_id

  call-seq:
    set_obj_id(id)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_obj_id(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetObjId", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetObjId", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetObjId(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.get_obj_id

  call-seq:
    get_obj_id(x, y) -> int

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_get_obj_id(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","GetObjId", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","GetObjId", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","GetObjId", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  result = (int)(arg1)->GetObjId(arg2,arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.get_spl_id

  call-seq:
    get_spl_id(x, y) -> int

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_get_spl_id(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","GetSplId", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","GetSplId", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","GetSplId", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  result = (int)(arg1)->GetSplId(arg2,arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.is_active

  call-seq:
    is_active(xs, ys, d=1) -> long
    is_active(xs, ys) -> long

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_is_active__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","IsActive", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","IsActive", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","IsActive", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","IsActive", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  result = (long)(arg1)->IsActive(arg2,arg3,arg4);
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_is_active__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","IsActive", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","IsActive", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","IsActive", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (long)(arg1)->IsActive(arg2,arg3);
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_is_active(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_is_active__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_is_active__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglGraph.is_active", 
    "    long MglGraph.is_active(int xs, int ys, int d)\n"
    "    long MglGraph.is_active(int xs, int ys)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.combine

  call-seq:
    combine(g)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_combine(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglGraph *arg2 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Combine", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglGraph const *","Combine", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< mglGraph * >(argp2);
  (arg1)->Combine((mglGraph const *)arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.clf

  call-seq:
    clf(r, g, b)
    clf(col)
    clf(col)
    clf

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_clf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Clf", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Clf", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Clf", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Clf", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->Clf(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_clf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Clf", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Clf", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->Clf((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_clf__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Clf", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","Clf", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  (arg1)->Clf(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_clf__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Clf", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  (arg1)->Clf();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_clf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MglGraph_clf__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglGraph_clf__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_clf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_clf__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglGraph.clf", 
    "    void MglGraph.clf(double r, double g, double b)\n"
    "    void MglGraph.clf(char const *col)\n"
    "    void MglGraph.clf(char col)\n"
    "    void MglGraph.clf()\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.clear_unused

  call-seq:
    clear_unused

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_clear_unused(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ClearUnused", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  (arg1)->ClearUnused();
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.load_background

  call-seq:
    load_background(fname, alpha=1)
    load_background(fname)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_load_background__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","LoadBackground", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","LoadBackground", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","LoadBackground", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->LoadBackground((char const *)arg2,arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_load_background__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","LoadBackground", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","LoadBackground", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->LoadBackground((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_load_background(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_load_background__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_load_background__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.load_background", 
    "    void MglGraph.load_background(char const *fname, double alpha)\n"
    "    void MglGraph.load_background(char const *fname)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.rasterize

  call-seq:
    rasterize

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_rasterize(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Rasterize", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  (arg1)->Rasterize();
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.ball

  call-seq:
    ball(p, c='r')
    ball(p)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_ball__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Ball", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  ecode3 = SWIG_AsVal_char(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "char","Ball", 3, argv[1] ));
  } 
  arg3 = static_cast< char >(val3);
  (arg1)->Ball(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_ball__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Ball", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  (arg1)->Ball(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_ball(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_ball__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_ball__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.ball", 
    "    void MglGraph.ball(mglPoint p, char c)\n"
    "    void MglGraph.ball(mglPoint p)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.mark

  call-seq:
    mark(p, mark)
    mark(x, y, z, r, pen, opt="")
    mark(x, y, z, r, pen)
    mark(x, y, r, pen, opt="")
    mark(x, y, r, pen)
    mark(y, r, pen, opt="")
    mark(y, r, pen)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_mark__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Mark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Mark", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Mark(arg2,(char const *)arg3);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.line

  call-seq:
    line(p1, p2, pen="B", n=2)
    line(p1, p2, pen="B")
    line(p1, p2)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_line__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Line", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Line", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int","Line", 5, argv[3] ));
  } 
  arg5 = static_cast< int >(val5);
  (arg1)->Line(arg2,arg3,(char const *)arg4,arg5);
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_line__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Line", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Line", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Line(arg2,arg3,(char const *)arg4);
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_line__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Line", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  (arg1)->Line(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_line(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_line__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_line__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_line__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglGraph.line", 
    "    void MglGraph.line(mglPoint p1, mglPoint p2, char const *pen, int n)\n"
    "    void MglGraph.line(mglPoint p1, mglPoint p2, char const *pen)\n"
    "    void MglGraph.line(mglPoint p1, mglPoint p2)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.curve

  call-seq:
    curve(p1, d1, p2, d2, pen="B", n=100)
    curve(p1, d1, p2, d2, pen="B")
    curve(p1, d1, p2, d2)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_curve__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  mglPoint arg4 ;
  mglPoint arg5 ;
  char *arg6 = (char *) 0 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Curve", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  {
    arg4 = GetMglPoint(argv[2]);
  }
  {
    arg5 = GetMglPoint(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Curve", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  ecode7 = SWIG_AsVal_int(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "int","Curve", 7, argv[5] ));
  } 
  arg7 = static_cast< int >(val7);
  (arg1)->Curve(arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_curve__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  mglPoint arg4 ;
  mglPoint arg5 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Curve", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  {
    arg4 = GetMglPoint(argv[2]);
  }
  {
    arg5 = GetMglPoint(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Curve", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Curve(arg2,arg3,arg4,arg5,(char const *)arg6);
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_curve__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  mglPoint arg4 ;
  mglPoint arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Curve", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  {
    arg4 = GetMglPoint(argv[2]);
  }
  {
    arg5 = GetMglPoint(argv[3]);
  }
  (arg1)->Curve(arg2,arg3,arg4,arg5);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_curve(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglPoint, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglPoint, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_curve__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglPoint, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglPoint, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_curve__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglPoint, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglPoint, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_MglGraph_curve__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.curve", 
    "    void MglGraph.curve(mglPoint p1, mglPoint d1, mglPoint p2, mglPoint d2, char const *pen, int n)\n"
    "    void MglGraph.curve(mglPoint p1, mglPoint d1, mglPoint p2, mglPoint d2, char const *pen)\n"
    "    void MglGraph.curve(mglPoint p1, mglPoint d1, mglPoint p2, mglPoint d2)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.error

  call-seq:
    error(p, e, pen="k")
    error(p, e)
    error(y, ey, pen="", opt="")
    error(y, ey, pen="")
    error(y, ey)
    error(x, y, ey, pen="", opt="")
    error(x, y, ey, pen="")
    error(x, y, ey)
    error(x, y, ex, ey, pen="", opt="")
    error(x, y, ex, ey, pen="")
    error(x, y, ex, ey)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_error__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Error", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Error", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Error(arg2,arg3,(char const *)arg4);
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_error__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Error", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  (arg1)->Error(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.face

  call-seq:
    face(p1, p2, p3, p4, stl="r")
    face(p1, p2, p3, p4)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_face__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  mglPoint arg4 ;
  mglPoint arg5 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Face", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  {
    arg4 = GetMglPoint(argv[2]);
  }
  {
    arg5 = GetMglPoint(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Face", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Face(arg2,arg3,arg4,arg5,(char const *)arg6);
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_face__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  mglPoint arg4 ;
  mglPoint arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Face", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  {
    arg4 = GetMglPoint(argv[2]);
  }
  {
    arg5 = GetMglPoint(argv[3]);
  }
  (arg1)->Face(arg2,arg3,arg4,arg5);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_face(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglPoint, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglPoint, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_face__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglPoint, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglPoint, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_face__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.face", 
    "    void MglGraph.face(mglPoint p1, mglPoint p2, mglPoint p3, mglPoint p4, char const *stl)\n"
    "    void MglGraph.face(mglPoint p1, mglPoint p2, mglPoint p3, mglPoint p4)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.face_x

  call-seq:
    face_x(p, wy, wz, stl="w", dx=0, dy=0)
    face_x(p, wy, wz, stl="w", dx=0)
    face_x(p, wy, wz, stl="w")
    face_x(p, wy, wz)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_face_x__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FaceX", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","FaceX", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","FaceX", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","FaceX", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","FaceX", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","FaceX", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  (arg1)->FaceX(arg2,arg3,arg4,(char const *)arg5,arg6,arg7);
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_face_x__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FaceX", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","FaceX", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","FaceX", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","FaceX", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","FaceX", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  (arg1)->FaceX(arg2,arg3,arg4,(char const *)arg5,arg6);
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_face_x__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FaceX", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","FaceX", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","FaceX", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","FaceX", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->FaceX(arg2,arg3,arg4,(char const *)arg5);
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_face_x__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FaceX", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","FaceX", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","FaceX", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->FaceX(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_face_x(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_face_x__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_face_x__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglGraph_face_x__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_MglGraph_face_x__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.face_x", 
    "    void MglGraph.face_x(mglPoint p, double wy, double wz, char const *stl, double dx, double dy)\n"
    "    void MglGraph.face_x(mglPoint p, double wy, double wz, char const *stl, double dx)\n"
    "    void MglGraph.face_x(mglPoint p, double wy, double wz, char const *stl)\n"
    "    void MglGraph.face_x(mglPoint p, double wy, double wz)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.face_y

  call-seq:
    face_y(p, wx, wz, stl="w", dx=0, dy=0)
    face_y(p, wx, wz, stl="w", dx=0)
    face_y(p, wx, wz, stl="w")
    face_y(p, wx, wz)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_face_y__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FaceY", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","FaceY", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","FaceY", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","FaceY", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","FaceY", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","FaceY", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  (arg1)->FaceY(arg2,arg3,arg4,(char const *)arg5,arg6,arg7);
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_face_y__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FaceY", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","FaceY", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","FaceY", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","FaceY", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","FaceY", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  (arg1)->FaceY(arg2,arg3,arg4,(char const *)arg5,arg6);
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_face_y__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FaceY", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","FaceY", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","FaceY", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","FaceY", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->FaceY(arg2,arg3,arg4,(char const *)arg5);
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_face_y__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FaceY", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","FaceY", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","FaceY", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->FaceY(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_face_y(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_face_y__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_face_y__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglGraph_face_y__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_MglGraph_face_y__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.face_y", 
    "    void MglGraph.face_y(mglPoint p, double wx, double wz, char const *stl, double dx, double dy)\n"
    "    void MglGraph.face_y(mglPoint p, double wx, double wz, char const *stl, double dx)\n"
    "    void MglGraph.face_y(mglPoint p, double wx, double wz, char const *stl)\n"
    "    void MglGraph.face_y(mglPoint p, double wx, double wz)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.face_z

  call-seq:
    face_z(p, wx, wy, stl="w", dx=0, dy=0)
    face_z(p, wx, wy, stl="w", dx=0)
    face_z(p, wx, wy, stl="w")
    face_z(p, wx, wy)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_face_z__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FaceZ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","FaceZ", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","FaceZ", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","FaceZ", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","FaceZ", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","FaceZ", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  (arg1)->FaceZ(arg2,arg3,arg4,(char const *)arg5,arg6,arg7);
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_face_z__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FaceZ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","FaceZ", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","FaceZ", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","FaceZ", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","FaceZ", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  (arg1)->FaceZ(arg2,arg3,arg4,(char const *)arg5,arg6);
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_face_z__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FaceZ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","FaceZ", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","FaceZ", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","FaceZ", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->FaceZ(arg2,arg3,arg4,(char const *)arg5);
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_face_z__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FaceZ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","FaceZ", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","FaceZ", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->FaceZ(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_face_z(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_face_z__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_face_z__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglGraph_face_z__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_MglGraph_face_z__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.face_z", 
    "    void MglGraph.face_z(mglPoint p, double wx, double wy, char const *stl, double dx, double dy)\n"
    "    void MglGraph.face_z(mglPoint p, double wx, double wy, char const *stl, double dx)\n"
    "    void MglGraph.face_z(mglPoint p, double wx, double wy, char const *stl)\n"
    "    void MglGraph.face_z(mglPoint p, double wx, double wy)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.drop

  call-seq:
    drop(p, d, r, col="r", shift=1, ap=1)
    drop(p, d, r, col="r", shift=1)
    drop(p, d, r, col="r")
    drop(p, d, r)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_drop__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Drop", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Drop", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Drop", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","Drop", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","Drop", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  (arg1)->Drop(arg2,arg3,arg4,(char const *)arg5,arg6,arg7);
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_drop__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Drop", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Drop", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Drop", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","Drop", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  (arg1)->Drop(arg2,arg3,arg4,(char const *)arg5,arg6);
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_drop__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Drop", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Drop", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Drop", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Drop(arg2,arg3,arg4,(char const *)arg5);
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_drop__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Drop", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Drop", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->Drop(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_drop(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_drop__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_drop__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglGraph_drop__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_MglGraph_drop__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.drop", 
    "    void MglGraph.drop(mglPoint p, mglPoint d, double r, char const *col, double shift, double ap)\n"
    "    void MglGraph.drop(mglPoint p, mglPoint d, double r, char const *col, double shift)\n"
    "    void MglGraph.drop(mglPoint p, mglPoint d, double r, char const *col)\n"
    "    void MglGraph.drop(mglPoint p, mglPoint d, double r)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.sphere

  call-seq:
    sphere(p, r, col="r")
    sphere(p, r)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_sphere__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  double arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Sphere", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Sphere", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Sphere", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Sphere(arg2,arg3,(char const *)arg4);
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_sphere__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Sphere", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Sphere", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->Sphere(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_sphere(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_sphere__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_sphere__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglGraph.sphere", 
    "    void MglGraph.sphere(mglPoint p, double r, char const *col)\n"
    "    void MglGraph.sphere(mglPoint p, double r)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.cone

  call-seq:
    cone(p1, p2, r1, r2=-1, stl="r@")
    cone(p1, p2, r1, r2=-1)
    cone(p1, p2, r1)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_cone__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  double arg4 ;
  double arg5 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cone", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Cone", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","Cone", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Cone", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Cone(arg2,arg3,arg4,arg5,(char const *)arg6);
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cone__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cone", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Cone", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","Cone", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->Cone(arg2,arg3,arg4,arg5);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cone__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cone", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Cone", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->Cone(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_cone(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_cone__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_cone__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_cone__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.cone", 
    "    void MglGraph.cone(mglPoint p1, mglPoint p2, double r1, double r2, char const *stl)\n"
    "    void MglGraph.cone(mglPoint p1, mglPoint p2, double r1, double r2)\n"
    "    void MglGraph.cone(mglPoint p1, mglPoint p2, double r1)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.ellipse

  call-seq:
    ellipse(p1, p2, r, stl="r")
    ellipse(p1, p2, r)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_ellipse__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Ellipse", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Ellipse", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Ellipse", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Ellipse(arg2,arg3,arg4,(char const *)arg5);
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_ellipse__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Ellipse", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Ellipse", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->Ellipse(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_ellipse(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_ellipse__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_ellipse__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglGraph.ellipse", 
    "    void MglGraph.ellipse(mglPoint p1, mglPoint p2, double r, char const *stl)\n"
    "    void MglGraph.ellipse(mglPoint p1, mglPoint p2, double r)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.circle

  call-seq:
    circle(p, r, stl="r")
    circle(p, r)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_circle__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  double arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Circle", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Circle", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Circle", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Circle(arg2,arg3,(char const *)arg4);
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_circle__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Circle", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Circle", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->Circle(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_circle(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_circle__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_circle__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglGraph.circle", 
    "    void MglGraph.circle(mglPoint p, double r, char const *stl)\n"
    "    void MglGraph.circle(mglPoint p, double r)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.rhomb

  call-seq:
    rhomb(p1, p2, r, stl="r")
    rhomb(p1, p2, r)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_rhomb__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Rhomb", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Rhomb", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Rhomb", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Rhomb(arg2,arg3,arg4,(char const *)arg5);
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_rhomb__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Rhomb", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Rhomb", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->Rhomb(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_rhomb(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_rhomb__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_rhomb__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglGraph.rhomb", 
    "    void MglGraph.rhomb(mglPoint p1, mglPoint p2, double r, char const *stl)\n"
    "    void MglGraph.rhomb(mglPoint p1, mglPoint p2, double r)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.polygon

  call-seq:
    polygon(p1, p2, n, stl="r")
    polygon(p1, p2, n)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_polygon__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Polygon", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","Polygon", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Polygon", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Polygon(arg2,arg3,arg4,(char const *)arg5);
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_polygon__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Polygon", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","Polygon", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  (arg1)->Polygon(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_polygon(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_polygon__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_polygon__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglGraph.polygon", 
    "    void MglGraph.polygon(mglPoint p1, mglPoint p2, int n, char const *stl)\n"
    "    void MglGraph.polygon(mglPoint p1, mglPoint p2, int n)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.arc

  call-seq:
    arc(p0, pr, p1, a, stl="r")
    arc(p0, pr, p1, a)
    arc(p0, p1, a, stl="r")
    arc(p0, p1, a)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_arc__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  mglPoint arg4 ;
  double arg5 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Arc", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  {
    arg4 = GetMglPoint(argv[2]);
  }
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","Arc", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Arc", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Arc(arg2,arg3,arg4,arg5,(char const *)arg6);
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_arc__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  mglPoint arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Arc", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  {
    arg4 = GetMglPoint(argv[2]);
  }
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","Arc", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->Arc(arg2,arg3,arg4,arg5);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_arc__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Arc", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Arc", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Arc", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Arc(arg2,arg3,arg4,(char const *)arg5);
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_arc__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Arc", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Arc", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->Arc(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_arc(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_arc__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_arc__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglPoint, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_arc__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglPoint, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_arc__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.arc", 
    "    void MglGraph.arc(mglPoint p0, mglPoint pr, mglPoint p1, double a, char const *stl)\n"
    "    void MglGraph.arc(mglPoint p0, mglPoint pr, mglPoint p1, double a)\n"
    "    void MglGraph.arc(mglPoint p0, mglPoint p1, double a, char const *stl)\n"
    "    void MglGraph.arc(mglPoint p0, mglPoint p1, double a)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.putsw

  call-seq:
    putsw(p, text, font=":C", size=-1)
    putsw(p, text, font=":C")
    putsw(p, text)
    putsw(x, y, text, font=":AC", size=-1)
    putsw(x, y, text, font=":AC")
    putsw(x, y, text)
    putsw(p, d, text, font=":L", size=-1)
    putsw(p, d, text, font=":L")
    putsw(p, d, text)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_putsw__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  char *arg4 = (char *) 0 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Putsw", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "wchar_t const *","Putsw", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< wchar_t * >(argp3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Putsw", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","Putsw", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->Putsw(arg2,(wchar_t const *)arg3,(char const *)arg4,arg5);
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_putsw__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Putsw", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "wchar_t const *","Putsw", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< wchar_t * >(argp3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Putsw", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Putsw(arg2,(wchar_t const *)arg3,(char const *)arg4);
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_putsw__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Putsw", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "wchar_t const *","Putsw", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< wchar_t * >(argp3);
  (arg1)->Putsw(arg2,(wchar_t const *)arg3);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.puts

  call-seq:
    puts(p, text, font=":C", size=-1)
    puts(p, text, font=":C")
    puts(p, text)
    puts(x, y, text, font=":AC", size=-1)
    puts(x, y, text, font=":AC")
    puts(x, y, text)
    puts(p, d, text, font=":L", size=-1)
    puts(p, d, text, font=":L")
    puts(p, d, text)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_puts__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Puts", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Puts", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Puts", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","Puts", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->Puts(arg2,(char const *)arg3,(char const *)arg4,arg5);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_puts__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Puts", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Puts", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Puts", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Puts(arg2,(char const *)arg3,(char const *)arg4);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_puts__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Puts", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Puts", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Puts(arg2,(char const *)arg3);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.putsw

  call-seq:
    putsw(p, text, font=":C", size=-1)
    putsw(p, text, font=":C")
    putsw(p, text)
    putsw(x, y, text, font=":AC", size=-1)
    putsw(x, y, text, font=":AC")
    putsw(x, y, text)
    putsw(p, d, text, font=":L", size=-1)
    putsw(p, d, text, font=":L")
    putsw(p, d, text)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_putsw__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  char *arg5 = (char *) 0 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Putsw", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Putsw", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Putsw", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "wchar_t const *","Putsw", 4, argv[2] )); 
  }
  arg4 = reinterpret_cast< wchar_t * >(argp4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Putsw", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","Putsw", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  (arg1)->Putsw(arg2,arg3,(wchar_t const *)arg4,(char const *)arg5,arg6);
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_putsw__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Putsw", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Putsw", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Putsw", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "wchar_t const *","Putsw", 4, argv[2] )); 
  }
  arg4 = reinterpret_cast< wchar_t * >(argp4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Putsw", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Putsw(arg2,arg3,(wchar_t const *)arg4,(char const *)arg5);
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_putsw__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Putsw", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Putsw", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Putsw", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "wchar_t const *","Putsw", 4, argv[2] )); 
  }
  arg4 = reinterpret_cast< wchar_t * >(argp4);
  (arg1)->Putsw(arg2,arg3,(wchar_t const *)arg4);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.puts

  call-seq:
    puts(p, text, font=":C", size=-1)
    puts(p, text, font=":C")
    puts(p, text)
    puts(x, y, text, font=":AC", size=-1)
    puts(x, y, text, font=":AC")
    puts(x, y, text)
    puts(p, d, text, font=":L", size=-1)
    puts(p, d, text, font=":L")
    puts(p, d, text)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_puts__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Puts", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Puts", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Puts", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Puts", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Puts", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","Puts", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  (arg1)->Puts(arg2,arg3,(char const *)arg4,(char const *)arg5,arg6);
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_puts__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Puts", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Puts", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Puts", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Puts", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Puts", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Puts(arg2,arg3,(char const *)arg4,(char const *)arg5);
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_puts__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Puts", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Puts", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Puts", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Puts", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Puts(arg2,arg3,(char const *)arg4);
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.putsw

  call-seq:
    putsw(p, text, font=":C", size=-1)
    putsw(p, text, font=":C")
    putsw(p, text)
    putsw(x, y, text, font=":AC", size=-1)
    putsw(x, y, text, font=":AC")
    putsw(x, y, text)
    putsw(p, d, text, font=":L", size=-1)
    putsw(p, d, text, font=":L")
    putsw(p, d, text)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_putsw__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  char *arg5 = (char *) 0 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Putsw", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "wchar_t const *","Putsw", 4, argv[2] )); 
  }
  arg4 = reinterpret_cast< wchar_t * >(argp4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Putsw", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","Putsw", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  (arg1)->Putsw(arg2,arg3,(wchar_t const *)arg4,(char const *)arg5,arg6);
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_putsw__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Putsw", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "wchar_t const *","Putsw", 4, argv[2] )); 
  }
  arg4 = reinterpret_cast< wchar_t * >(argp4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Putsw", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Putsw(arg2,arg3,(wchar_t const *)arg4,(char const *)arg5);
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_putsw__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Putsw", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "wchar_t const *","Putsw", 4, argv[2] )); 
  }
  arg4 = reinterpret_cast< wchar_t * >(argp4);
  (arg1)->Putsw(arg2,arg3,(wchar_t const *)arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_putsw(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wchar_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_putsw__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_wchar_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_putsw__SWIG_5(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wchar_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_putsw__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_wchar_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_putsw__SWIG_8(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_wchar_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_putsw__SWIG_4(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wchar_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_putsw__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_wchar_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_putsw__SWIG_7(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_wchar_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglGraph_putsw__SWIG_3(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_wchar_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglGraph_putsw__SWIG_6(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.putsw", 
    "    void MglGraph.putsw(mglPoint p, wchar_t const *text, char const *font, double size)\n"
    "    void MglGraph.putsw(mglPoint p, wchar_t const *text, char const *font)\n"
    "    void MglGraph.putsw(mglPoint p, wchar_t const *text)\n"
    "    void MglGraph.putsw(double x, double y, wchar_t const *text, char const *font, double size)\n"
    "    void MglGraph.putsw(double x, double y, wchar_t const *text, char const *font)\n"
    "    void MglGraph.putsw(double x, double y, wchar_t const *text)\n"
    "    void MglGraph.putsw(mglPoint p, mglPoint d, wchar_t const *text, char const *font, double size)\n"
    "    void MglGraph.putsw(mglPoint p, mglPoint d, wchar_t const *text, char const *font)\n"
    "    void MglGraph.putsw(mglPoint p, mglPoint d, wchar_t const *text)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.puts

  call-seq:
    puts(p, text, font=":C", size=-1)
    puts(p, text, font=":C")
    puts(p, text)
    puts(x, y, text, font=":AC", size=-1)
    puts(x, y, text, font=":AC")
    puts(x, y, text)
    puts(p, d, text, font=":L", size=-1)
    puts(p, d, text, font=":L")
    puts(p, d, text)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_puts__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Puts", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Puts", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Puts", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","Puts", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  (arg1)->Puts(arg2,arg3,(char const *)arg4,(char const *)arg5,arg6);
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_puts__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Puts", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Puts", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Puts", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Puts(arg2,arg3,(char const *)arg4,(char const *)arg5);
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_puts__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglPoint arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Puts", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglPoint(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Puts", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Puts(arg2,arg3,(char const *)arg4);
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_puts(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_puts__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_puts__SWIG_5(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_puts__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_puts__SWIG_8(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_puts__SWIG_4(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_puts__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_puts__SWIG_7(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglGraph_puts__SWIG_3(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglGraph_puts__SWIG_6(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.puts", 
    "    void MglGraph.puts(mglPoint p, char const *text, char const *font, double size)\n"
    "    void MglGraph.puts(mglPoint p, char const *text, char const *font)\n"
    "    void MglGraph.puts(mglPoint p, char const *text)\n"
    "    void MglGraph.puts(double x, double y, char const *text, char const *font, double size)\n"
    "    void MglGraph.puts(double x, double y, char const *text, char const *font)\n"
    "    void MglGraph.puts(double x, double y, char const *text)\n"
    "    void MglGraph.puts(mglPoint p, mglPoint d, char const *text, char const *font, double size)\n"
    "    void MglGraph.puts(mglPoint p, mglPoint d, char const *text, char const *font)\n"
    "    void MglGraph.puts(mglPoint p, mglPoint d, char const *text)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.text

  call-seq:
    text(x, y, z, text, font="", opt="")
    text(x, y, z, text, font="")
    text(x, y, z, text)
    text(x, y, text, font="", opt="")
    text(x, y, text, font="")
    text(x, y, text)
    text(y, text, font="", opt="")
    text(y, text, font="")
    text(y, text)
    text(x, y, z, text, font="", opt="")
    text(x, y, z, text, font="")
    text(x, y, z, text)
    text(x, y, text, font="", opt="")
    text(x, y, text, font="")
    text(x, y, text)
    text(y, text, font="", opt="")
    text(y, text, font="")
    text(y, text)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_text__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Text", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Text", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Text", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Text", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Text((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Text", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Text", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Text", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Text((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Text", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Text", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Text((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Text", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Text", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Text", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Text", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Text((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Text", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Text", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Text", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Text((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Text", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Text", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Text((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Text", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Text", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Text", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Text", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Text((mglData const &)*arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Text", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Text", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Text", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Text((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Text", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Text", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Text((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Text", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "wchar_t const *","Text", 5, argv[3] )); 
  }
  arg5 = reinterpret_cast< wchar_t * >(argp5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Text", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Text", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Text((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(wchar_t const *)arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text__SWIG_10(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Text", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "wchar_t const *","Text", 5, argv[3] )); 
  }
  arg5 = reinterpret_cast< wchar_t * >(argp5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Text", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Text((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(wchar_t const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text__SWIG_11(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Text", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "wchar_t const *","Text", 5, argv[3] )); 
  }
  arg5 = reinterpret_cast< wchar_t * >(argp5);
  (arg1)->Text((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(wchar_t const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text__SWIG_12(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Text", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "wchar_t const *","Text", 4, argv[2] )); 
  }
  arg4 = reinterpret_cast< wchar_t * >(argp4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Text", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Text", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Text((mglData const &)*arg2,(mglData const &)*arg3,(wchar_t const *)arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text__SWIG_13(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Text", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "wchar_t const *","Text", 4, argv[2] )); 
  }
  arg4 = reinterpret_cast< wchar_t * >(argp4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Text", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Text((mglData const &)*arg2,(mglData const &)*arg3,(wchar_t const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text__SWIG_14(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Text", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "wchar_t const *","Text", 4, argv[2] )); 
  }
  arg4 = reinterpret_cast< wchar_t * >(argp4);
  (arg1)->Text((mglData const &)*arg2,(mglData const &)*arg3,(wchar_t const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text__SWIG_15(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Text", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "wchar_t const *","Text", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< wchar_t * >(argp3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Text", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Text", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Text((mglData const &)*arg2,(wchar_t const *)arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text__SWIG_16(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Text", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "wchar_t const *","Text", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< wchar_t * >(argp3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Text", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Text((mglData const &)*arg2,(wchar_t const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text__SWIG_17(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Text", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "wchar_t const *","Text", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< wchar_t * >(argp3);
  (arg1)->Text((mglData const &)*arg2,(wchar_t const *)arg3);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_text(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wchar_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_text__SWIG_17(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_text__SWIG_8(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wchar_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_text__SWIG_16(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_text__SWIG_7(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_wchar_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_text__SWIG_14(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_text__SWIG_5(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wchar_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_text__SWIG_15(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_text__SWIG_6(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_wchar_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_text__SWIG_13(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_text__SWIG_4(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_wchar_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_text__SWIG_11(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_text__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_wchar_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_text__SWIG_12(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_text__SWIG_3(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_wchar_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_text__SWIG_10(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_text__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_wchar_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_text__SWIG_9(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_text__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.text", 
    "    void MglGraph.text(mglData const &x, mglData const &y, mglData const &z, char const *text, char const *font, char const *opt)\n"
    "    void MglGraph.text(mglData const &x, mglData const &y, mglData const &z, char const *text, char const *font)\n"
    "    void MglGraph.text(mglData const &x, mglData const &y, mglData const &z, char const *text)\n"
    "    void MglGraph.text(mglData const &x, mglData const &y, char const *text, char const *font, char const *opt)\n"
    "    void MglGraph.text(mglData const &x, mglData const &y, char const *text, char const *font)\n"
    "    void MglGraph.text(mglData const &x, mglData const &y, char const *text)\n"
    "    void MglGraph.text(mglData const &y, char const *text, char const *font, char const *opt)\n"
    "    void MglGraph.text(mglData const &y, char const *text, char const *font)\n"
    "    void MglGraph.text(mglData const &y, char const *text)\n"
    "    void MglGraph.text(mglData const &x, mglData const &y, mglData const &z, wchar_t const *text, char const *font, char const *opt)\n"
    "    void MglGraph.text(mglData const &x, mglData const &y, mglData const &z, wchar_t const *text, char const *font)\n"
    "    void MglGraph.text(mglData const &x, mglData const &y, mglData const &z, wchar_t const *text)\n"
    "    void MglGraph.text(mglData const &x, mglData const &y, wchar_t const *text, char const *font, char const *opt)\n"
    "    void MglGraph.text(mglData const &x, mglData const &y, wchar_t const *text, char const *font)\n"
    "    void MglGraph.text(mglData const &x, mglData const &y, wchar_t const *text)\n"
    "    void MglGraph.text(mglData const &y, wchar_t const *text, char const *font, char const *opt)\n"
    "    void MglGraph.text(mglData const &y, wchar_t const *text, char const *font)\n"
    "    void MglGraph.text(mglData const &y, wchar_t const *text)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.box

  call-seq:
    box(col="", ticks=true)
    box(col="")
    box

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_box__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Box", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Box", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","Box", 3, argv[1] ));
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->Box((char const *)arg2,arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_box__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Box", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Box", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->Box((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_box__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Box", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  (arg1)->Box();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_box(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MglGraph_box__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_box__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_box__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.box", 
    "    void MglGraph.box(char const *col, bool ticks)\n"
    "    void MglGraph.box(char const *col)\n"
    "    void MglGraph.box()\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.axis

  call-seq:
    axis(dir="xyzt", stl="", opt="")
    axis(dir="xyzt", stl="")
    axis(dir="xyzt")
    axis

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_axis__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Axis", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Axis", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Axis", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Axis", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Axis((char const *)arg2,(char const *)arg3,(char const *)arg4);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_axis__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Axis", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Axis", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Axis", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Axis((char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_axis__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Axis", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Axis", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->Axis((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_axis__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Axis", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  (arg1)->Axis();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_axis(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MglGraph_axis__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_axis__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_axis__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_axis__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglGraph.axis", 
    "    void MglGraph.axis(char const *dir, char const *stl, char const *opt)\n"
    "    void MglGraph.axis(char const *dir, char const *stl)\n"
    "    void MglGraph.axis(char const *dir)\n"
    "    void MglGraph.axis()\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.grid

  call-seq:
    grid(dir="xyzt", pen="B", opt="")
    grid(dir="xyzt", pen="B")
    grid(dir="xyzt")
    grid
    grid(x, y, z, stl="", opt="")
    grid(x, y, z, stl="")
    grid(x, y, z)
    grid(z, stl="", opt="")
    grid(z, stl="")
    grid(z)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_grid__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Grid", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Grid", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Grid", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Grid", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Grid((char const *)arg2,(char const *)arg3,(char const *)arg4);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_grid__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Grid", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Grid", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Grid", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Grid((char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_grid__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Grid", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Grid", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->Grid((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_grid__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Grid", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  (arg1)->Grid();
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.label

  call-seq:
    label(dir, text, pos=+1, opt="")
    label(dir, text, pos=+1)
    label(dir, text)
    label(dir, text, pos=+1, opt="")
    label(dir, text, pos=+1)
    label(dir, text)
    label(x, y, z, text, fnt="", opt="")
    label(x, y, z, text, fnt="")
    label(x, y, z, text)
    label(x, y, text, fnt="", opt="")
    label(x, y, text, fnt="")
    label(x, y, text)
    label(y, text, fnt="", opt="")
    label(y, text, fnt="")
    label(y, text)
    label(x, y, z, text, fnt="", opt="")
    label(x, y, z, text, fnt="")
    label(x, y, z, text)
    label(x, y, text, fnt="", opt="")
    label(x, y, text, fnt="")
    label(x, y, text)
    label(y, text, fnt="", opt="")
    label(y, text, fnt="")
    label(y, text)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_label__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Label", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","Label", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Label", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Label", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Label", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Label(arg2,(char const *)arg3,arg4,(char const *)arg5);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_label__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Label", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","Label", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Label", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Label", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->Label(arg2,(char const *)arg3,arg4);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_label__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Label", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","Label", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Label", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Label(arg2,(char const *)arg3);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_label__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Label", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","Label", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "wchar_t const *","Label", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< wchar_t * >(argp3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Label", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Label", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Label(arg2,(wchar_t const *)arg3,arg4,(char const *)arg5);
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_label__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Label", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","Label", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "wchar_t const *","Label", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< wchar_t * >(argp3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Label", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->Label(arg2,(wchar_t const *)arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_label__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Label", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","Label", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "wchar_t const *","Label", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< wchar_t * >(argp3);
  (arg1)->Label(arg2,(wchar_t const *)arg3);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.colorbar

  call-seq:
    colorbar(sch="")
    colorbar
    colorbar(sch, x, y, w=1, h=1)
    colorbar(sch, x, y, w=1)
    colorbar(sch, x, y)
    colorbar(val, sch="")
    colorbar(val)
    colorbar(val, sch, x, y, w=1, h=1)
    colorbar(val, sch, x, y, w=1)
    colorbar(val, sch, x, y)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_colorbar__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Colorbar", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Colorbar", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->Colorbar((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_colorbar__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Colorbar", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  (arg1)->Colorbar();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_colorbar__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Colorbar", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Colorbar", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Colorbar", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Colorbar", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","Colorbar", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","Colorbar", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  (arg1)->Colorbar((char const *)arg2,arg3,arg4,arg5,arg6);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_colorbar__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Colorbar", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Colorbar", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Colorbar", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Colorbar", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","Colorbar", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->Colorbar((char const *)arg2,arg3,arg4,arg5);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_colorbar__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Colorbar", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Colorbar", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Colorbar", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Colorbar", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->Colorbar((char const *)arg2,arg3,arg4);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_colorbar__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Colorbar", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Colorbar", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Colorbar((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_colorbar__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Colorbar", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Colorbar((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_colorbar__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Colorbar", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Colorbar", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Colorbar", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","Colorbar", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","Colorbar", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","Colorbar", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  (arg1)->Colorbar((mglData const &)*arg2,(char const *)arg3,arg4,arg5,arg6,arg7);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_colorbar__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Colorbar", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Colorbar", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Colorbar", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","Colorbar", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","Colorbar", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  (arg1)->Colorbar((mglData const &)*arg2,(char const *)arg3,arg4,arg5,arg6);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_colorbar__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Colorbar", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Colorbar", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Colorbar", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","Colorbar", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->Colorbar((mglData const &)*arg2,(char const *)arg3,arg4,arg5);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_colorbar(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MglGraph_colorbar__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_colorbar__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_colorbar__SWIG_6(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_colorbar__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_colorbar__SWIG_4(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_colorbar__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_colorbar__SWIG_9(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglGraph_colorbar__SWIG_2(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglGraph_colorbar__SWIG_8(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_MglGraph_colorbar__SWIG_7(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.colorbar", 
    "    void MglGraph.colorbar(char const *sch)\n"
    "    void MglGraph.colorbar()\n"
    "    void MglGraph.colorbar(char const *sch, double x, double y, double w, double h)\n"
    "    void MglGraph.colorbar(char const *sch, double x, double y, double w)\n"
    "    void MglGraph.colorbar(char const *sch, double x, double y)\n"
    "    void MglGraph.colorbar(mglData const &val, char const *sch)\n"
    "    void MglGraph.colorbar(mglData const &val)\n"
    "    void MglGraph.colorbar(mglData const &val, char const *sch, double x, double y, double w, double h)\n"
    "    void MglGraph.colorbar(mglData const &val, char const *sch, double x, double y, double w)\n"
    "    void MglGraph.colorbar(mglData const &val, char const *sch, double x, double y)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.add_legend

  call-seq:
    add_legend(text, style)
    add_legend(text, style)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_add_legend__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","AddLegend", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","AddLegend", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","AddLegend", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->AddLegend((char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_add_legend__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","AddLegend", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "wchar_t const *","AddLegend", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< wchar_t * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","AddLegend", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->AddLegend((wchar_t const *)arg2,(char const *)arg3);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_add_legend(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wchar_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_add_legend__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_add_legend__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglGraph.add_legend", 
    "    void MglGraph.add_legend(char const *text, char const *style)\n"
    "    void MglGraph.add_legend(wchar_t const *text, char const *style)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.clear_legend

  call-seq:
    clear_legend

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_clear_legend(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ClearLegend", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  (arg1)->ClearLegend();
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.legend

  call-seq:
    legend(x, y, font="#", opt="")
    legend(x, y, font="#")
    legend(x, y)
    legend(where=3, font="#", opt="")
    legend(where=3, font="#")
    legend(where=3)
    legend

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_legend__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Legend", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Legend", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Legend", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Legend", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Legend", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Legend(arg2,arg3,(char const *)arg4,(char const *)arg5);
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_legend__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Legend", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Legend", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Legend", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Legend", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Legend(arg2,arg3,(char const *)arg4);
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_legend__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Legend", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Legend", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Legend", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->Legend(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_legend__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Legend", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Legend", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Legend", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Legend", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Legend(arg2,(char const *)arg3,(char const *)arg4);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_legend__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Legend", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Legend", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Legend", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Legend(arg2,(char const *)arg3);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_legend__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Legend", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Legend", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->Legend(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_legend__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Legend", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  (arg1)->Legend();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_legend(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MglGraph_legend__SWIG_6(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MglGraph_legend__SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_legend__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_legend__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_legend__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_legend__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_legend__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglGraph.legend", 
    "    void MglGraph.legend(double x, double y, char const *font, char const *opt)\n"
    "    void MglGraph.legend(double x, double y, char const *font)\n"
    "    void MglGraph.legend(double x, double y)\n"
    "    void MglGraph.legend(int where, char const *font, char const *opt)\n"
    "    void MglGraph.legend(int where, char const *font)\n"
    "    void MglGraph.legend(int where)\n"
    "    void MglGraph.legend()\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_legend_marks

  call-seq:
    set_legend_marks(num)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_legend_marks(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetLegendMarks", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetLegendMarks", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetLegendMarks(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.plot

  call-seq:
    plot(x, y, z, pen="", opt="")
    plot(x, y, z, pen="")
    plot(x, y, z)
    plot(x, y, pen="", opt="")
    plot(x, y, pen="")
    plot(x, y)
    plot(y, pen="", opt="")
    plot(y, pen="")
    plot(y)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_plot__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Plot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Plot", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Plot", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Plot((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_plot__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Plot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Plot", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Plot((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_plot__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Plot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Plot((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_plot__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Plot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Plot", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Plot", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Plot((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_plot__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Plot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Plot", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Plot((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_plot__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Plot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->Plot((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_plot__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Plot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Plot", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Plot", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Plot((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_plot__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Plot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Plot", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Plot((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_plot__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Plot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Plot((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_plot(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_plot__SWIG_8(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_plot__SWIG_7(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_plot__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_plot__SWIG_6(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_plot__SWIG_4(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_plot__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_plot__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_plot__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_plot__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.plot", 
    "    void MglGraph.plot(mglData const &x, mglData const &y, mglData const &z, char const *pen, char const *opt)\n"
    "    void MglGraph.plot(mglData const &x, mglData const &y, mglData const &z, char const *pen)\n"
    "    void MglGraph.plot(mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.plot(mglData const &x, mglData const &y, char const *pen, char const *opt)\n"
    "    void MglGraph.plot(mglData const &x, mglData const &y, char const *pen)\n"
    "    void MglGraph.plot(mglData const &x, mglData const &y)\n"
    "    void MglGraph.plot(mglData const &y, char const *pen, char const *opt)\n"
    "    void MglGraph.plot(mglData const &y, char const *pen)\n"
    "    void MglGraph.plot(mglData const &y)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.tape

  call-seq:
    tape(x, y, z, pen="", opt="")
    tape(x, y, z, pen="")
    tape(x, y, z)
    tape(x, y, pen="", opt="")
    tape(x, y, pen="")
    tape(x, y)
    tape(y, pen="", opt="")
    tape(y, pen="")
    tape(y)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_tape__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tape", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Tape", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Tape", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Tape((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tape__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tape", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Tape", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Tape((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tape__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tape", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Tape((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tape__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tape", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Tape", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Tape", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Tape((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tape__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tape", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Tape", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Tape((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tape__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tape", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->Tape((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tape__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tape", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Tape", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Tape", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Tape((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tape__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tape", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Tape", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Tape((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tape__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tape", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Tape((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_tape(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_tape__SWIG_8(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_tape__SWIG_7(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_tape__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_tape__SWIG_6(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_tape__SWIG_4(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_tape__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_tape__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_tape__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_tape__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.tape", 
    "    void MglGraph.tape(mglData const &x, mglData const &y, mglData const &z, char const *pen, char const *opt)\n"
    "    void MglGraph.tape(mglData const &x, mglData const &y, mglData const &z, char const *pen)\n"
    "    void MglGraph.tape(mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.tape(mglData const &x, mglData const &y, char const *pen, char const *opt)\n"
    "    void MglGraph.tape(mglData const &x, mglData const &y, char const *pen)\n"
    "    void MglGraph.tape(mglData const &x, mglData const &y)\n"
    "    void MglGraph.tape(mglData const &y, char const *pen, char const *opt)\n"
    "    void MglGraph.tape(mglData const &y, char const *pen)\n"
    "    void MglGraph.tape(mglData const &y)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.radar

  call-seq:
    radar(a, pen="", opt="")
    radar(a, pen="")
    radar(a)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_radar__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Radar", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Radar", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Radar", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Radar((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_radar__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Radar", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Radar", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Radar((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_radar__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Radar", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Radar((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_radar(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_radar__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_radar__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_radar__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglGraph.radar", 
    "    void MglGraph.radar(mglData const &a, char const *pen, char const *opt)\n"
    "    void MglGraph.radar(mglData const &a, char const *pen)\n"
    "    void MglGraph.radar(mglData const &a)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.step

  call-seq:
    step(x, y, z, pen="", opt="")
    step(x, y, z, pen="")
    step(x, y, z)
    step(x, y, pen="", opt="")
    step(x, y, pen="")
    step(x, y)
    step(y, pen="", opt="")
    step(y, pen="")
    step(y)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_step__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Step", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Step", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Step", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Step((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_step__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Step", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Step", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Step((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_step__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Step", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Step((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_step__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Step", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Step", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Step", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Step((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_step__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Step", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Step", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Step((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_step__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Step", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->Step((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_step__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Step", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Step", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Step", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Step((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_step__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Step", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Step", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Step((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_step__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Step", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Step((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_step(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_step__SWIG_8(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_step__SWIG_7(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_step__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_step__SWIG_6(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_step__SWIG_4(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_step__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_step__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_step__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_step__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.step", 
    "    void MglGraph.step(mglData const &x, mglData const &y, mglData const &z, char const *pen, char const *opt)\n"
    "    void MglGraph.step(mglData const &x, mglData const &y, mglData const &z, char const *pen)\n"
    "    void MglGraph.step(mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.step(mglData const &x, mglData const &y, char const *pen, char const *opt)\n"
    "    void MglGraph.step(mglData const &x, mglData const &y, char const *pen)\n"
    "    void MglGraph.step(mglData const &x, mglData const &y)\n"
    "    void MglGraph.step(mglData const &y, char const *pen, char const *opt)\n"
    "    void MglGraph.step(mglData const &y, char const *pen)\n"
    "    void MglGraph.step(mglData const &y)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.tens

  call-seq:
    tens(x, y, z, c, pen="", opt="")
    tens(x, y, z, c, pen="")
    tens(x, y, z, c)
    tens(x, y, c, pen="", opt="")
    tens(x, y, c, pen="")
    tens(x, y, c)
    tens(y, c, pen="", opt="")
    tens(y, c, pen="")
    tens(y, c)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_tens__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tens", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Tens", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Tens", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Tens((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tens__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tens", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Tens", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Tens((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tens__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tens", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->Tens((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tens__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tens", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Tens", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Tens", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Tens((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tens__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tens", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Tens", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Tens((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tens__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tens", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Tens((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tens__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tens", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Tens", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Tens", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Tens((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tens__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tens", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Tens", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Tens((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tens__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tens", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->Tens((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_tens(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_tens__SWIG_8(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_tens__SWIG_7(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_tens__SWIG_5(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_tens__SWIG_6(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_tens__SWIG_4(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_tens__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_tens__SWIG_3(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_tens__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_tens__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.tens", 
    "    void MglGraph.tens(mglData const &x, mglData const &y, mglData const &z, mglData const &c, char const *pen, char const *opt)\n"
    "    void MglGraph.tens(mglData const &x, mglData const &y, mglData const &z, mglData const &c, char const *pen)\n"
    "    void MglGraph.tens(mglData const &x, mglData const &y, mglData const &z, mglData const &c)\n"
    "    void MglGraph.tens(mglData const &x, mglData const &y, mglData const &c, char const *pen, char const *opt)\n"
    "    void MglGraph.tens(mglData const &x, mglData const &y, mglData const &c, char const *pen)\n"
    "    void MglGraph.tens(mglData const &x, mglData const &y, mglData const &c)\n"
    "    void MglGraph.tens(mglData const &y, mglData const &c, char const *pen, char const *opt)\n"
    "    void MglGraph.tens(mglData const &y, mglData const &c, char const *pen)\n"
    "    void MglGraph.tens(mglData const &y, mglData const &c)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.area

  call-seq:
    area(x, y, z, pen="", opt="")
    area(x, y, z, pen="")
    area(x, y, z)
    area(x, y, pen="", opt="")
    area(x, y, pen="")
    area(x, y)
    area(y, pen="", opt="")
    area(y, pen="")
    area(y)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_area__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Area", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Area", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Area", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Area((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_area__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Area", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Area", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Area((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_area__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Area", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Area((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_area__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Area", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Area", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Area", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Area((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_area__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Area", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Area", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Area((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_area__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Area", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->Area((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_area__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Area", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Area", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Area", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Area((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_area__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Area", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Area", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Area((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_area__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Area", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Area((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_area(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_area__SWIG_8(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_area__SWIG_7(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_area__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_area__SWIG_6(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_area__SWIG_4(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_area__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_area__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_area__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_area__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.area", 
    "    void MglGraph.area(mglData const &x, mglData const &y, mglData const &z, char const *pen, char const *opt)\n"
    "    void MglGraph.area(mglData const &x, mglData const &y, mglData const &z, char const *pen)\n"
    "    void MglGraph.area(mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.area(mglData const &x, mglData const &y, char const *pen, char const *opt)\n"
    "    void MglGraph.area(mglData const &x, mglData const &y, char const *pen)\n"
    "    void MglGraph.area(mglData const &x, mglData const &y)\n"
    "    void MglGraph.area(mglData const &y, char const *pen, char const *opt)\n"
    "    void MglGraph.area(mglData const &y, char const *pen)\n"
    "    void MglGraph.area(mglData const &y)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.region

  call-seq:
    region(y1, y2, pen="", opt="")
    region(y1, y2, pen="")
    region(y1, y2)
    region(x, y1, y2, pen="", opt="")
    region(x, y1, y2, pen="")
    region(x, y1, y2)
    region(x1, y1, z1, x2, y2, z2, pen="", opt="")
    region(x1, y1, z1, x2, y2, z2, pen="")
    region(x1, y1, z1, x2, y2, z2)
    region(x1, y1, x2, y2, pen="", opt="")
    region(x1, y1, x2, y2, pen="")
    region(x1, y1, x2, y2)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_region__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Region", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Region", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Region", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Region((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_region__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Region", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Region", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Region((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_region__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Region", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->Region((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_region__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Region", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Region", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Region", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Region((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_region__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Region", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Region", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Region((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_region__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Region", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Region((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_region__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Region", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Region", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  res9 = SWIG_AsCharPtrAndSize(argv[7], &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), Ruby_Format_TypeError( "", "char const *","Region", 9, argv[7] ));
  }
  arg9 = reinterpret_cast< char * >(buf9);
  (arg1)->Region((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7,(char const *)arg8,(char const *)arg9);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_region__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Region", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Region", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->Region((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7,(char const *)arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_region__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Region", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  (arg1)->Region((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_region__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Region", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Region", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Region", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Region((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_region__SWIG_10(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Region", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Region", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Region((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_region__SWIG_11(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Region", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->Region((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_region(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[10];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 10) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_region__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_region__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_region__SWIG_5(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_region__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_region__SWIG_4(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_region__SWIG_11(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_region__SWIG_3(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_region__SWIG_10(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_region__SWIG_9(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  return _wrap_MglGraph_region__SWIG_8(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_region__SWIG_7(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_AsCharPtrAndSize(argv[8], 0, NULL, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_MglGraph_region__SWIG_6(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 10, "MglGraph.region", 
    "    void MglGraph.region(mglData const &y1, mglData const &y2, char const *pen, char const *opt)\n"
    "    void MglGraph.region(mglData const &y1, mglData const &y2, char const *pen)\n"
    "    void MglGraph.region(mglData const &y1, mglData const &y2)\n"
    "    void MglGraph.region(mglData const &x, mglData const &y1, mglData const &y2, char const *pen, char const *opt)\n"
    "    void MglGraph.region(mglData const &x, mglData const &y1, mglData const &y2, char const *pen)\n"
    "    void MglGraph.region(mglData const &x, mglData const &y1, mglData const &y2)\n"
    "    void MglGraph.region(mglData const &x1, mglData const &y1, mglData const &z1, mglData const &x2, mglData const &y2, mglData const &z2, char const *pen, char const *opt)\n"
    "    void MglGraph.region(mglData const &x1, mglData const &y1, mglData const &z1, mglData const &x2, mglData const &y2, mglData const &z2, char const *pen)\n"
    "    void MglGraph.region(mglData const &x1, mglData const &y1, mglData const &z1, mglData const &x2, mglData const &y2, mglData const &z2)\n"
    "    void MglGraph.region(mglData const &x1, mglData const &y1, mglData const &x2, mglData const &y2, char const *pen, char const *opt)\n"
    "    void MglGraph.region(mglData const &x1, mglData const &y1, mglData const &x2, mglData const &y2, char const *pen)\n"
    "    void MglGraph.region(mglData const &x1, mglData const &y1, mglData const &x2, mglData const &y2)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.stem

  call-seq:
    stem(x, y, z, pen="", opt="")
    stem(x, y, z, pen="")
    stem(x, y, z)
    stem(x, y, pen="", opt="")
    stem(x, y, pen="")
    stem(x, y)
    stem(y, pen="", opt="")
    stem(y, pen="")
    stem(y)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_stem__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Stem", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Stem", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Stem", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Stem((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_stem__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Stem", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Stem", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Stem((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_stem__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Stem", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Stem((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_stem__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Stem", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Stem", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Stem", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Stem((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_stem__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Stem", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Stem", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Stem((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_stem__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Stem", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->Stem((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_stem__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Stem", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Stem", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Stem", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Stem((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_stem__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Stem", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Stem", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Stem((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_stem__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Stem", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Stem((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_stem(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_stem__SWIG_8(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_stem__SWIG_7(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_stem__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_stem__SWIG_6(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_stem__SWIG_4(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_stem__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_stem__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_stem__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_stem__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.stem", 
    "    void MglGraph.stem(mglData const &x, mglData const &y, mglData const &z, char const *pen, char const *opt)\n"
    "    void MglGraph.stem(mglData const &x, mglData const &y, mglData const &z, char const *pen)\n"
    "    void MglGraph.stem(mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.stem(mglData const &x, mglData const &y, char const *pen, char const *opt)\n"
    "    void MglGraph.stem(mglData const &x, mglData const &y, char const *pen)\n"
    "    void MglGraph.stem(mglData const &x, mglData const &y)\n"
    "    void MglGraph.stem(mglData const &y, char const *pen, char const *opt)\n"
    "    void MglGraph.stem(mglData const &y, char const *pen)\n"
    "    void MglGraph.stem(mglData const &y)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.bars

  call-seq:
    bars(x, y, z, pen="", opt="")
    bars(x, y, z, pen="")
    bars(x, y, z)
    bars(x, y, pen="", opt="")
    bars(x, y, pen="")
    bars(x, y)
    bars(y, pen="", opt="")
    bars(y, pen="")
    bars(y)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_bars__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Bars", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Bars", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Bars", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Bars((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_bars__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Bars", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Bars", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Bars((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_bars__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Bars", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Bars((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_bars__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Bars", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Bars", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Bars", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Bars((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_bars__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Bars", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Bars", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Bars((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_bars__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Bars", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->Bars((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_bars__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Bars", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Bars", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Bars", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Bars((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_bars__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Bars", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Bars", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Bars((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_bars__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Bars", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Bars((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_bars(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_bars__SWIG_8(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_bars__SWIG_7(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_bars__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_bars__SWIG_6(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_bars__SWIG_4(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_bars__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_bars__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_bars__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_bars__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.bars", 
    "    void MglGraph.bars(mglData const &x, mglData const &y, mglData const &z, char const *pen, char const *opt)\n"
    "    void MglGraph.bars(mglData const &x, mglData const &y, mglData const &z, char const *pen)\n"
    "    void MglGraph.bars(mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.bars(mglData const &x, mglData const &y, char const *pen, char const *opt)\n"
    "    void MglGraph.bars(mglData const &x, mglData const &y, char const *pen)\n"
    "    void MglGraph.bars(mglData const &x, mglData const &y)\n"
    "    void MglGraph.bars(mglData const &y, char const *pen, char const *opt)\n"
    "    void MglGraph.bars(mglData const &y, char const *pen)\n"
    "    void MglGraph.bars(mglData const &y)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.barh

  call-seq:
    barh(y, v, pen="", opt="")
    barh(y, v, pen="")
    barh(y, v)
    barh(v, pen="", opt="")
    barh(v, pen="")
    barh(v)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_barh__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Barh", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Barh", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Barh", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Barh((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_barh__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Barh", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Barh", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Barh((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_barh__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Barh", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->Barh((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_barh__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Barh", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Barh", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Barh", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Barh((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_barh__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Barh", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Barh", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Barh((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_barh__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Barh", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Barh((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_barh(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_barh__SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_barh__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_barh__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_barh__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_barh__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_barh__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglGraph.barh", 
    "    void MglGraph.barh(mglData const &y, mglData const &v, char const *pen, char const *opt)\n"
    "    void MglGraph.barh(mglData const &y, mglData const &v, char const *pen)\n"
    "    void MglGraph.barh(mglData const &y, mglData const &v)\n"
    "    void MglGraph.barh(mglData const &v, char const *pen, char const *opt)\n"
    "    void MglGraph.barh(mglData const &v, char const *pen)\n"
    "    void MglGraph.barh(mglData const &v)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.chart

  call-seq:
    chart(a, colors="", opt="")
    chart(a, colors="")
    chart(a)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_chart__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Chart", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Chart", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Chart", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Chart((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_chart__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Chart", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Chart", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Chart((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_chart__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Chart", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Chart((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_chart(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_chart__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_chart__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_chart__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglGraph.chart", 
    "    void MglGraph.chart(mglData const &a, char const *colors, char const *opt)\n"
    "    void MglGraph.chart(mglData const &a, char const *colors)\n"
    "    void MglGraph.chart(mglData const &a)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.ohlc

  call-seq:
    ohlc(x, open, high, low, close, pen="", opt="")
    ohlc(x, open, high, low, close, pen="")
    ohlc(x, open, high, low, close)
    ohlc(open, high, low, close, pen="", opt="")
    ohlc(open, high, low, close, pen="")
    ohlc(open, high, low, close)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_ohlc__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","OHLC", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","OHLC", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","OHLC", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->OHLC((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7,(char const *)arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_ohlc__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","OHLC", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","OHLC", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->OHLC((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_ohlc__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","OHLC", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  (arg1)->OHLC((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_ohlc__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","OHLC", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","OHLC", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","OHLC", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->OHLC((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_ohlc__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","OHLC", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","OHLC", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->OHLC((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_ohlc__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","OHLC", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->OHLC((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_ohlc(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[9];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 9) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_ohlc__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_ohlc__SWIG_4(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                return _wrap_MglGraph_ohlc__SWIG_2(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_ohlc__SWIG_3(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_ohlc__SWIG_1(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_ohlc__SWIG_0(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 9, "MglGraph.ohlc", 
    "    void MglGraph.ohlc(mglData const &x, mglData const &open, mglData const &high, mglData const &low, mglData const &close, char const *pen, char const *opt)\n"
    "    void MglGraph.ohlc(mglData const &x, mglData const &open, mglData const &high, mglData const &low, mglData const &close, char const *pen)\n"
    "    void MglGraph.ohlc(mglData const &x, mglData const &open, mglData const &high, mglData const &low, mglData const &close)\n"
    "    void MglGraph.ohlc(mglData const &open, mglData const &high, mglData const &low, mglData const &close, char const *pen, char const *opt)\n"
    "    void MglGraph.ohlc(mglData const &open, mglData const &high, mglData const &low, mglData const &close, char const *pen)\n"
    "    void MglGraph.ohlc(mglData const &open, mglData const &high, mglData const &low, mglData const &close)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.box_plot

  call-seq:
    box_plot(x, y, pen="", opt="")
    box_plot(x, y, pen="")
    box_plot(x, y)
    box_plot(y, pen="", opt="")
    box_plot(y, pen="")
    box_plot(y)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_box_plot__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","BoxPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","BoxPlot", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","BoxPlot", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->BoxPlot((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_box_plot__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","BoxPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","BoxPlot", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->BoxPlot((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_box_plot__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","BoxPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->BoxPlot((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_box_plot__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","BoxPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","BoxPlot", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","BoxPlot", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->BoxPlot((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_box_plot__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","BoxPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","BoxPlot", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->BoxPlot((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_box_plot__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","BoxPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->BoxPlot((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_box_plot(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_box_plot__SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_box_plot__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_box_plot__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_box_plot__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_box_plot__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_box_plot__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglGraph.box_plot", 
    "    void MglGraph.box_plot(mglData const &x, mglData const &y, char const *pen, char const *opt)\n"
    "    void MglGraph.box_plot(mglData const &x, mglData const &y, char const *pen)\n"
    "    void MglGraph.box_plot(mglData const &x, mglData const &y)\n"
    "    void MglGraph.box_plot(mglData const &y, char const *pen, char const *opt)\n"
    "    void MglGraph.box_plot(mglData const &y, char const *pen)\n"
    "    void MglGraph.box_plot(mglData const &y)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.candle

  call-seq:
    candle(x, v1, v2, y1, y2, pen="", opt="")
    candle(x, v1, v2, y1, y2, pen="")
    candle(x, v1, v2, y1, y2)
    candle(v1, v2, y1, y2, pen="", opt="")
    candle(v1, v2, y1, y2, pen="")
    candle(v1, v2, y1, y2)
    candle(v1, v2, pen="", opt="")
    candle(v1, v2, pen="")
    candle(v1, v2)
    candle(y, y1, y2, pen="", opt="")
    candle(y, y1, y2, pen="")
    candle(y, y1, y2)
    candle(y, pen="", opt="")
    candle(y, pen="")
    candle(y)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_candle__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Candle", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Candle", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Candle", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->Candle((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7,(char const *)arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_candle__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Candle", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Candle", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Candle((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_candle__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Candle", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  (arg1)->Candle((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_candle__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Candle", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Candle", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Candle", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Candle((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_candle__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Candle", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Candle", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Candle((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_candle__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Candle", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->Candle((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_candle__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Candle", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Candle", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Candle", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Candle((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_candle__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Candle", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Candle", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Candle((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_candle__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Candle", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->Candle((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_candle__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Candle", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Candle", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Candle", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Candle((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_candle__SWIG_10(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Candle", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Candle", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Candle((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_candle__SWIG_11(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Candle", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Candle((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_candle__SWIG_12(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Candle", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Candle", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Candle", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Candle((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_candle__SWIG_13(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Candle", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Candle", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Candle((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_candle__SWIG_14(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Candle", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Candle((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_candle(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[9];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 9) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_candle__SWIG_14(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_candle__SWIG_13(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_candle__SWIG_8(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_candle__SWIG_12(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_candle__SWIG_7(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_candle__SWIG_11(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_candle__SWIG_6(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_candle__SWIG_10(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_candle__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_candle__SWIG_9(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_candle__SWIG_4(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                return _wrap_MglGraph_candle__SWIG_2(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_candle__SWIG_3(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_candle__SWIG_1(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_candle__SWIG_0(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 9, "MglGraph.candle", 
    "    void MglGraph.candle(mglData const &x, mglData const &v1, mglData const &v2, mglData const &y1, mglData const &y2, char const *pen, char const *opt)\n"
    "    void MglGraph.candle(mglData const &x, mglData const &v1, mglData const &v2, mglData const &y1, mglData const &y2, char const *pen)\n"
    "    void MglGraph.candle(mglData const &x, mglData const &v1, mglData const &v2, mglData const &y1, mglData const &y2)\n"
    "    void MglGraph.candle(mglData const &v1, mglData const &v2, mglData const &y1, mglData const &y2, char const *pen, char const *opt)\n"
    "    void MglGraph.candle(mglData const &v1, mglData const &v2, mglData const &y1, mglData const &y2, char const *pen)\n"
    "    void MglGraph.candle(mglData const &v1, mglData const &v2, mglData const &y1, mglData const &y2)\n"
    "    void MglGraph.candle(mglData const &v1, mglData const &v2, char const *pen, char const *opt)\n"
    "    void MglGraph.candle(mglData const &v1, mglData const &v2, char const *pen)\n"
    "    void MglGraph.candle(mglData const &v1, mglData const &v2)\n"
    "    void MglGraph.candle(mglData const &y, mglData const &y1, mglData const &y2, char const *pen, char const *opt)\n"
    "    void MglGraph.candle(mglData const &y, mglData const &y1, mglData const &y2, char const *pen)\n"
    "    void MglGraph.candle(mglData const &y, mglData const &y1, mglData const &y2)\n"
    "    void MglGraph.candle(mglData const &y, char const *pen, char const *opt)\n"
    "    void MglGraph.candle(mglData const &y, char const *pen)\n"
    "    void MglGraph.candle(mglData const &y)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.cones

  call-seq:
    cones(x, y, z, pen="@", opt="")
    cones(x, y, z, pen="@")
    cones(x, y, z)
    cones(x, z, pen="@", opt="")
    cones(x, z, pen="@")
    cones(x, z)
    cones(z, pen="@", opt="")
    cones(z, pen="@")
    cones(z)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_cones__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cones", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Cones", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Cones", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Cones((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cones__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cones", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Cones", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Cones((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cones__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cones", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Cones((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cones__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cones", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Cones", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Cones", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Cones((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cones__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cones", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Cones", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Cones((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cones__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cones", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->Cones((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cones__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cones", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Cones", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Cones", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Cones((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cones__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cones", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Cones", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Cones((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cones__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cones", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Cones((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_cones(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_cones__SWIG_8(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_cones__SWIG_7(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_cones__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_cones__SWIG_6(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_cones__SWIG_4(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_cones__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_cones__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_cones__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_cones__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.cones", 
    "    void MglGraph.cones(mglData const &x, mglData const &y, mglData const &z, char const *pen, char const *opt)\n"
    "    void MglGraph.cones(mglData const &x, mglData const &y, mglData const &z, char const *pen)\n"
    "    void MglGraph.cones(mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.cones(mglData const &x, mglData const &z, char const *pen, char const *opt)\n"
    "    void MglGraph.cones(mglData const &x, mglData const &z, char const *pen)\n"
    "    void MglGraph.cones(mglData const &x, mglData const &z)\n"
    "    void MglGraph.cones(mglData const &z, char const *pen, char const *opt)\n"
    "    void MglGraph.cones(mglData const &z, char const *pen)\n"
    "    void MglGraph.cones(mglData const &z)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.error

  call-seq:
    error(p, e, pen="k")
    error(p, e)
    error(y, ey, pen="", opt="")
    error(y, ey, pen="")
    error(y, ey)
    error(x, y, ey, pen="", opt="")
    error(x, y, ey, pen="")
    error(x, y, ey)
    error(x, y, ex, ey, pen="", opt="")
    error(x, y, ex, ey, pen="")
    error(x, y, ex, ey)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_error__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Error", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Error", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Error", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Error((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_error__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Error", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Error", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Error((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_error__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Error", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->Error((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_error__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Error", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Error", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Error", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Error((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_error__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Error", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Error", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Error((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_error__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Error", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Error((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_error__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Error", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Error", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Error", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Error((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_error__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Error", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Error", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Error((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_error__SWIG_10(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Error", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->Error((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_error(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_error__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_error__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_error__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglPoint, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_error__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_error__SWIG_7(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_error__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_error__SWIG_6(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_error__SWIG_10(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_error__SWIG_5(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_error__SWIG_9(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_error__SWIG_8(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.error", 
    "    void MglGraph.error(mglPoint p, mglPoint e, char const *pen)\n"
    "    void MglGraph.error(mglPoint p, mglPoint e)\n"
    "    void MglGraph.error(mglData const &y, mglData const &ey, char const *pen, char const *opt)\n"
    "    void MglGraph.error(mglData const &y, mglData const &ey, char const *pen)\n"
    "    void MglGraph.error(mglData const &y, mglData const &ey)\n"
    "    void MglGraph.error(mglData const &x, mglData const &y, mglData const &ey, char const *pen, char const *opt)\n"
    "    void MglGraph.error(mglData const &x, mglData const &y, mglData const &ey, char const *pen)\n"
    "    void MglGraph.error(mglData const &x, mglData const &y, mglData const &ey)\n"
    "    void MglGraph.error(mglData const &x, mglData const &y, mglData const &ex, mglData const &ey, char const *pen, char const *opt)\n"
    "    void MglGraph.error(mglData const &x, mglData const &y, mglData const &ex, mglData const &ey, char const *pen)\n"
    "    void MglGraph.error(mglData const &x, mglData const &y, mglData const &ex, mglData const &ey)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.mark

  call-seq:
    mark(p, mark)
    mark(x, y, z, r, pen, opt="")
    mark(x, y, z, r, pen)
    mark(x, y, r, pen, opt="")
    mark(x, y, r, pen)
    mark(y, r, pen, opt="")
    mark(y, r, pen)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_mark__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Mark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Mark", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Mark", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Mark((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_mark__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Mark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Mark", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Mark((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_mark__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Mark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Mark", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Mark", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Mark((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_mark__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Mark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Mark", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Mark((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_mark__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Mark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Mark", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Mark", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Mark((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_mark__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Mark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Mark", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Mark((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_mark(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_mark__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_mark__SWIG_6(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_mark__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_mark__SWIG_4(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_mark__SWIG_3(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_mark__SWIG_2(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_mark__SWIG_1(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.mark", 
    "    void MglGraph.mark(mglPoint p, char const *mark)\n"
    "    void MglGraph.mark(mglData const &x, mglData const &y, mglData const &z, mglData const &r, char const *pen, char const *opt)\n"
    "    void MglGraph.mark(mglData const &x, mglData const &y, mglData const &z, mglData const &r, char const *pen)\n"
    "    void MglGraph.mark(mglData const &x, mglData const &y, mglData const &r, char const *pen, char const *opt)\n"
    "    void MglGraph.mark(mglData const &x, mglData const &y, mglData const &r, char const *pen)\n"
    "    void MglGraph.mark(mglData const &y, mglData const &r, char const *pen, char const *opt)\n"
    "    void MglGraph.mark(mglData const &y, mglData const &r, char const *pen)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.text_mark

  call-seq:
    text_mark(x, y, z, r, text, fnt="", opt="")
    text_mark(x, y, z, r, text, fnt="")
    text_mark(x, y, z, r, text)
    text_mark(x, y, r, text, fnt="", opt="")
    text_mark(x, y, r, text, fnt="")
    text_mark(x, y, r, text)
    text_mark(y, r, text, fnt="", opt="")
    text_mark(y, r, text, fnt="")
    text_mark(y, r, text)
    text_mark(y, text, fnt="", opt="")
    text_mark(y, text, fnt="")
    text_mark(y, text)
    text_mark(x, y, z, r, text, fnt="", opt="")
    text_mark(x, y, z, r, text, fnt="")
    text_mark(x, y, z, r, text)
    text_mark(x, y, r, text, fnt="", opt="")
    text_mark(x, y, r, text, fnt="")
    text_mark(x, y, r, text)
    text_mark(y, r, text, fnt="", opt="")
    text_mark(y, r, text, fnt="")
    text_mark(y, r, text)
    text_mark(y, text, fnt="", opt="")
    text_mark(y, text, fnt="")
    text_mark(y, text)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_text_mark__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TextMark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","TextMark", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","TextMark", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","TextMark", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->TextMark((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text_mark__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TextMark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","TextMark", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","TextMark", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->TextMark((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text_mark__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TextMark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","TextMark", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->TextMark((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text_mark__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TextMark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","TextMark", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","TextMark", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","TextMark", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->TextMark((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text_mark__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TextMark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","TextMark", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","TextMark", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->TextMark((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text_mark__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TextMark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","TextMark", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->TextMark((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text_mark__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TextMark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","TextMark", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","TextMark", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","TextMark", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->TextMark((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text_mark__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TextMark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","TextMark", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","TextMark", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->TextMark((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text_mark__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TextMark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","TextMark", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->TextMark((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text_mark__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TextMark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","TextMark", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","TextMark", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","TextMark", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->TextMark((mglData const &)*arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text_mark__SWIG_10(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TextMark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","TextMark", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","TextMark", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->TextMark((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text_mark__SWIG_11(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TextMark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","TextMark", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->TextMark((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text_mark__SWIG_12(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  wchar_t *arg6 = (wchar_t *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TextMark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_ConvertPtr(argv[4], &argp6,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "wchar_t const *","TextMark", 6, argv[4] )); 
  }
  arg6 = reinterpret_cast< wchar_t * >(argp6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","TextMark", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","TextMark", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->TextMark((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(wchar_t const *)arg6,(char const *)arg7,(char const *)arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text_mark__SWIG_13(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  wchar_t *arg6 = (wchar_t *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TextMark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_ConvertPtr(argv[4], &argp6,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "wchar_t const *","TextMark", 6, argv[4] )); 
  }
  arg6 = reinterpret_cast< wchar_t * >(argp6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","TextMark", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->TextMark((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(wchar_t const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text_mark__SWIG_14(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  wchar_t *arg6 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TextMark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_ConvertPtr(argv[4], &argp6,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "wchar_t const *","TextMark", 6, argv[4] )); 
  }
  arg6 = reinterpret_cast< wchar_t * >(argp6);
  (arg1)->TextMark((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(wchar_t const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text_mark__SWIG_15(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TextMark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "wchar_t const *","TextMark", 5, argv[3] )); 
  }
  arg5 = reinterpret_cast< wchar_t * >(argp5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","TextMark", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","TextMark", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->TextMark((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(wchar_t const *)arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text_mark__SWIG_16(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TextMark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "wchar_t const *","TextMark", 5, argv[3] )); 
  }
  arg5 = reinterpret_cast< wchar_t * >(argp5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","TextMark", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->TextMark((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(wchar_t const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text_mark__SWIG_17(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TextMark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "wchar_t const *","TextMark", 5, argv[3] )); 
  }
  arg5 = reinterpret_cast< wchar_t * >(argp5);
  (arg1)->TextMark((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(wchar_t const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text_mark__SWIG_18(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TextMark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "wchar_t const *","TextMark", 4, argv[2] )); 
  }
  arg4 = reinterpret_cast< wchar_t * >(argp4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","TextMark", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","TextMark", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->TextMark((mglData const &)*arg2,(mglData const &)*arg3,(wchar_t const *)arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text_mark__SWIG_19(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TextMark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "wchar_t const *","TextMark", 4, argv[2] )); 
  }
  arg4 = reinterpret_cast< wchar_t * >(argp4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","TextMark", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->TextMark((mglData const &)*arg2,(mglData const &)*arg3,(wchar_t const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text_mark__SWIG_20(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TextMark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "wchar_t const *","TextMark", 4, argv[2] )); 
  }
  arg4 = reinterpret_cast< wchar_t * >(argp4);
  (arg1)->TextMark((mglData const &)*arg2,(mglData const &)*arg3,(wchar_t const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text_mark__SWIG_21(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TextMark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "wchar_t const *","TextMark", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< wchar_t * >(argp3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","TextMark", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","TextMark", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->TextMark((mglData const &)*arg2,(wchar_t const *)arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text_mark__SWIG_22(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TextMark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "wchar_t const *","TextMark", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< wchar_t * >(argp3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","TextMark", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->TextMark((mglData const &)*arg2,(wchar_t const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_text_mark__SWIG_23(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TextMark", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "wchar_t const *","TextMark", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< wchar_t * >(argp3);
  (arg1)->TextMark((mglData const &)*arg2,(wchar_t const *)arg3);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_text_mark(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[9];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 9) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wchar_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_text_mark__SWIG_23(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_text_mark__SWIG_11(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wchar_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_text_mark__SWIG_22(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_text_mark__SWIG_10(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_wchar_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_text_mark__SWIG_20(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_text_mark__SWIG_8(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wchar_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_text_mark__SWIG_21(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_text_mark__SWIG_9(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_wchar_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_text_mark__SWIG_19(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_text_mark__SWIG_7(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_wchar_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_text_mark__SWIG_17(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_text_mark__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_wchar_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_text_mark__SWIG_18(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_text_mark__SWIG_6(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_wchar_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_text_mark__SWIG_16(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_text_mark__SWIG_4(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_wchar_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_text_mark__SWIG_14(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_text_mark__SWIG_2(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_wchar_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_text_mark__SWIG_15(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_text_mark__SWIG_3(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_wchar_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_text_mark__SWIG_13(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_text_mark__SWIG_1(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_wchar_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_text_mark__SWIG_12(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_text_mark__SWIG_0(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 9, "MglGraph.text_mark", 
    "    void MglGraph.text_mark(mglData const &x, mglData const &y, mglData const &z, mglData const &r, char const *text, char const *fnt, char const *opt)\n"
    "    void MglGraph.text_mark(mglData const &x, mglData const &y, mglData const &z, mglData const &r, char const *text, char const *fnt)\n"
    "    void MglGraph.text_mark(mglData const &x, mglData const &y, mglData const &z, mglData const &r, char const *text)\n"
    "    void MglGraph.text_mark(mglData const &x, mglData const &y, mglData const &r, char const *text, char const *fnt, char const *opt)\n"
    "    void MglGraph.text_mark(mglData const &x, mglData const &y, mglData const &r, char const *text, char const *fnt)\n"
    "    void MglGraph.text_mark(mglData const &x, mglData const &y, mglData const &r, char const *text)\n"
    "    void MglGraph.text_mark(mglData const &y, mglData const &r, char const *text, char const *fnt, char const *opt)\n"
    "    void MglGraph.text_mark(mglData const &y, mglData const &r, char const *text, char const *fnt)\n"
    "    void MglGraph.text_mark(mglData const &y, mglData const &r, char const *text)\n"
    "    void MglGraph.text_mark(mglData const &y, char const *text, char const *fnt, char const *opt)\n"
    "    void MglGraph.text_mark(mglData const &y, char const *text, char const *fnt)\n"
    "    void MglGraph.text_mark(mglData const &y, char const *text)\n"
    "    void MglGraph.text_mark(mglData const &x, mglData const &y, mglData const &z, mglData const &r, wchar_t const *text, char const *fnt, char const *opt)\n"
    "    void MglGraph.text_mark(mglData const &x, mglData const &y, mglData const &z, mglData const &r, wchar_t const *text, char const *fnt)\n"
    "    void MglGraph.text_mark(mglData const &x, mglData const &y, mglData const &z, mglData const &r, wchar_t const *text)\n"
    "    void MglGraph.text_mark(mglData const &x, mglData const &y, mglData const &r, wchar_t const *text, char const *fnt, char const *opt)\n"
    "    void MglGraph.text_mark(mglData const &x, mglData const &y, mglData const &r, wchar_t const *text, char const *fnt)\n"
    "    void MglGraph.text_mark(mglData const &x, mglData const &y, mglData const &r, wchar_t const *text)\n"
    "    void MglGraph.text_mark(mglData const &y, mglData const &r, wchar_t const *text, char const *fnt, char const *opt)\n"
    "    void MglGraph.text_mark(mglData const &y, mglData const &r, wchar_t const *text, char const *fnt)\n"
    "    void MglGraph.text_mark(mglData const &y, mglData const &r, wchar_t const *text)\n"
    "    void MglGraph.text_mark(mglData const &y, wchar_t const *text, char const *fnt, char const *opt)\n"
    "    void MglGraph.text_mark(mglData const &y, wchar_t const *text, char const *fnt)\n"
    "    void MglGraph.text_mark(mglData const &y, wchar_t const *text)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.label

  call-seq:
    label(dir, text, pos=+1, opt="")
    label(dir, text, pos=+1)
    label(dir, text)
    label(dir, text, pos=+1, opt="")
    label(dir, text, pos=+1)
    label(dir, text)
    label(x, y, z, text, fnt="", opt="")
    label(x, y, z, text, fnt="")
    label(x, y, z, text)
    label(x, y, text, fnt="", opt="")
    label(x, y, text, fnt="")
    label(x, y, text)
    label(y, text, fnt="", opt="")
    label(y, text, fnt="")
    label(y, text)
    label(x, y, z, text, fnt="", opt="")
    label(x, y, z, text, fnt="")
    label(x, y, z, text)
    label(x, y, text, fnt="", opt="")
    label(x, y, text, fnt="")
    label(x, y, text)
    label(y, text, fnt="", opt="")
    label(y, text, fnt="")
    label(y, text)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_label__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Label", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Label", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Label", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Label", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Label((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_label__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Label", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Label", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Label", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Label((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_label__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Label", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Label", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Label((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_label__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Label", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Label", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Label", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Label", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Label((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_label__SWIG_10(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Label", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Label", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Label", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Label((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_label__SWIG_11(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Label", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Label", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Label((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_label__SWIG_12(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Label", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Label", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Label", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Label", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Label((mglData const &)*arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_label__SWIG_13(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Label", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Label", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Label", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Label((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_label__SWIG_14(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Label", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Label", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Label((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_label__SWIG_15(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Label", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "wchar_t const *","Label", 5, argv[3] )); 
  }
  arg5 = reinterpret_cast< wchar_t * >(argp5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Label", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Label", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Label((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(wchar_t const *)arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_label__SWIG_16(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Label", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "wchar_t const *","Label", 5, argv[3] )); 
  }
  arg5 = reinterpret_cast< wchar_t * >(argp5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Label", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Label((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(wchar_t const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_label__SWIG_17(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Label", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "wchar_t const *","Label", 5, argv[3] )); 
  }
  arg5 = reinterpret_cast< wchar_t * >(argp5);
  (arg1)->Label((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(wchar_t const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_label__SWIG_18(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Label", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "wchar_t const *","Label", 4, argv[2] )); 
  }
  arg4 = reinterpret_cast< wchar_t * >(argp4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Label", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Label", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Label((mglData const &)*arg2,(mglData const &)*arg3,(wchar_t const *)arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_label__SWIG_19(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Label", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "wchar_t const *","Label", 4, argv[2] )); 
  }
  arg4 = reinterpret_cast< wchar_t * >(argp4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Label", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Label((mglData const &)*arg2,(mglData const &)*arg3,(wchar_t const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_label__SWIG_20(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Label", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "wchar_t const *","Label", 4, argv[2] )); 
  }
  arg4 = reinterpret_cast< wchar_t * >(argp4);
  (arg1)->Label((mglData const &)*arg2,(mglData const &)*arg3,(wchar_t const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_label__SWIG_21(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Label", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "wchar_t const *","Label", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< wchar_t * >(argp3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Label", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Label", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Label((mglData const &)*arg2,(wchar_t const *)arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_label__SWIG_22(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Label", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "wchar_t const *","Label", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< wchar_t * >(argp3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Label", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Label((mglData const &)*arg2,(wchar_t const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_label__SWIG_23(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Label", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "wchar_t const *","Label", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< wchar_t * >(argp3);
  (arg1)->Label((mglData const &)*arg2,(wchar_t const *)arg3);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_label(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wchar_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_label__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_label__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wchar_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_label__SWIG_23(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_label__SWIG_14(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wchar_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_label__SWIG_4(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_label__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wchar_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_label__SWIG_22(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_label__SWIG_13(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_wchar_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_label__SWIG_20(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_label__SWIG_11(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wchar_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_label__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_label__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wchar_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_label__SWIG_21(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_label__SWIG_12(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_wchar_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_label__SWIG_19(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_label__SWIG_10(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_wchar_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_label__SWIG_17(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_label__SWIG_8(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_wchar_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_label__SWIG_18(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_label__SWIG_9(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_wchar_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_label__SWIG_16(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_label__SWIG_7(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_wchar_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_label__SWIG_15(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_label__SWIG_6(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.label", 
    "    void MglGraph.label(char dir, char const *text, double pos, char const *opt)\n"
    "    void MglGraph.label(char dir, char const *text, double pos)\n"
    "    void MglGraph.label(char dir, char const *text)\n"
    "    void MglGraph.label(char dir, wchar_t const *text, double pos, char const *opt)\n"
    "    void MglGraph.label(char dir, wchar_t const *text, double pos)\n"
    "    void MglGraph.label(char dir, wchar_t const *text)\n"
    "    void MglGraph.label(mglData const &x, mglData const &y, mglData const &z, char const *text, char const *fnt, char const *opt)\n"
    "    void MglGraph.label(mglData const &x, mglData const &y, mglData const &z, char const *text, char const *fnt)\n"
    "    void MglGraph.label(mglData const &x, mglData const &y, mglData const &z, char const *text)\n"
    "    void MglGraph.label(mglData const &x, mglData const &y, char const *text, char const *fnt, char const *opt)\n"
    "    void MglGraph.label(mglData const &x, mglData const &y, char const *text, char const *fnt)\n"
    "    void MglGraph.label(mglData const &x, mglData const &y, char const *text)\n"
    "    void MglGraph.label(mglData const &y, char const *text, char const *fnt, char const *opt)\n"
    "    void MglGraph.label(mglData const &y, char const *text, char const *fnt)\n"
    "    void MglGraph.label(mglData const &y, char const *text)\n"
    "    void MglGraph.label(mglData const &x, mglData const &y, mglData const &z, wchar_t const *text, char const *fnt, char const *opt)\n"
    "    void MglGraph.label(mglData const &x, mglData const &y, mglData const &z, wchar_t const *text, char const *fnt)\n"
    "    void MglGraph.label(mglData const &x, mglData const &y, mglData const &z, wchar_t const *text)\n"
    "    void MglGraph.label(mglData const &x, mglData const &y, wchar_t const *text, char const *fnt, char const *opt)\n"
    "    void MglGraph.label(mglData const &x, mglData const &y, wchar_t const *text, char const *fnt)\n"
    "    void MglGraph.label(mglData const &x, mglData const &y, wchar_t const *text)\n"
    "    void MglGraph.label(mglData const &y, wchar_t const *text, char const *fnt, char const *opt)\n"
    "    void MglGraph.label(mglData const &y, wchar_t const *text, char const *fnt)\n"
    "    void MglGraph.label(mglData const &y, wchar_t const *text)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.table

  call-seq:
    table(val, text, fnt="#|", opt="")
    table(val, text, fnt="#|")
    table(val, text)
    table(val, text, fnt="#|", opt="")
    table(val, text, fnt="#|")
    table(val, text)
    table(x, y, val, text, fnt="#|", opt="")
    table(x, y, val, text, fnt="#|")
    table(x, y, val, text)
    table(x, y, val, text, fnt="#|", opt="")
    table(x, y, val, text, fnt="#|")
    table(x, y, val, text)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_table__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Table", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Table", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Table", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Table", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Table((mglData const &)*arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_table__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Table", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Table", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Table", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Table((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_table__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Table", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Table", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Table((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_table__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Table", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "wchar_t const *","Table", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< wchar_t * >(argp3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Table", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Table", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Table((mglData const &)*arg2,(wchar_t const *)arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_table__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Table", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "wchar_t const *","Table", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< wchar_t * >(argp3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Table", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Table((mglData const &)*arg2,(wchar_t const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_table__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Table", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "wchar_t const *","Table", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< wchar_t * >(argp3);
  (arg1)->Table((mglData const &)*arg2,(wchar_t const *)arg3);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_table__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Table", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Table", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Table", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Table", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Table", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Table", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Table(arg2,arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_table__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Table", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Table", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Table", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Table", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Table", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Table(arg2,arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_table__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Table", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Table", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Table", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Table", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Table(arg2,arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_table__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  mglData *arg4 = 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Table", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Table", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Table", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "wchar_t const *","Table", 5, argv[3] )); 
  }
  arg5 = reinterpret_cast< wchar_t * >(argp5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Table", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Table", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Table(arg2,arg3,(mglData const &)*arg4,(wchar_t const *)arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg4;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg4;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_table__SWIG_10(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  mglData *arg4 = 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Table", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Table", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Table", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "wchar_t const *","Table", 5, argv[3] )); 
  }
  arg5 = reinterpret_cast< wchar_t * >(argp5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Table", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Table(arg2,arg3,(mglData const &)*arg4,(wchar_t const *)arg5,(char const *)arg6);
  {
    delete arg4;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg4;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_table__SWIG_11(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  double arg3 ;
  mglData *arg4 = 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Table", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Table", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Table", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "wchar_t const *","Table", 5, argv[3] )); 
  }
  arg5 = reinterpret_cast< wchar_t * >(argp5);
  (arg1)->Table(arg2,arg3,(mglData const &)*arg4,(wchar_t const *)arg5);
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_table(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wchar_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_table__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_table__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wchar_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_table__SWIG_4(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_table__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_wchar_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_table__SWIG_11(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_table__SWIG_8(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wchar_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_table__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_table__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_wchar_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_table__SWIG_10(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_table__SWIG_7(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_wchar_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_table__SWIG_9(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_table__SWIG_6(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.table", 
    "    void MglGraph.table(mglData const &val, char const *text, char const *fnt, char const *opt)\n"
    "    void MglGraph.table(mglData const &val, char const *text, char const *fnt)\n"
    "    void MglGraph.table(mglData const &val, char const *text)\n"
    "    void MglGraph.table(mglData const &val, wchar_t const *text, char const *fnt, char const *opt)\n"
    "    void MglGraph.table(mglData const &val, wchar_t const *text, char const *fnt)\n"
    "    void MglGraph.table(mglData const &val, wchar_t const *text)\n"
    "    void MglGraph.table(double x, double y, mglData const &val, char const *text, char const *fnt, char const *opt)\n"
    "    void MglGraph.table(double x, double y, mglData const &val, char const *text, char const *fnt)\n"
    "    void MglGraph.table(double x, double y, mglData const &val, char const *text)\n"
    "    void MglGraph.table(double x, double y, mglData const &val, wchar_t const *text, char const *fnt, char const *opt)\n"
    "    void MglGraph.table(double x, double y, mglData const &val, wchar_t const *text, char const *fnt)\n"
    "    void MglGraph.table(double x, double y, mglData const &val, wchar_t const *text)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.tube

  call-seq:
    tube(x, y, z, r, pen="", opt="")
    tube(x, y, z, r, pen="")
    tube(x, y, z, r)
    tube(x, y, z, r, pen="", opt="")
    tube(x, y, z, r, pen="")
    tube(x, y, z, r)
    tube(x, y, r, pen="", opt="")
    tube(x, y, r, pen="")
    tube(x, y, r)
    tube(x, y, r, pen="", opt="")
    tube(x, y, r, pen="")
    tube(x, y, r)
    tube(y, r, pen="", opt="")
    tube(y, r, pen="")
    tube(y, r)
    tube(y, r, pen="", opt="")
    tube(y, r, pen="")
    tube(y, r)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_tube__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tube", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Tube", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Tube", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Tube((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tube__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tube", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Tube", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Tube((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tube__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tube", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->Tube((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tube__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  double arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tube", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","Tube", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Tube", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Tube", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Tube((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tube__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  double arg5 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tube", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","Tube", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Tube", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Tube((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tube__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tube", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","Tube", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->Tube((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tube__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tube", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Tube", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Tube", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Tube((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tube__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tube", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Tube", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Tube((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tube__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tube", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Tube((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tube__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tube", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Tube", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Tube", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Tube", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Tube((mglData const &)*arg2,(mglData const &)*arg3,arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tube__SWIG_10(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tube", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Tube", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Tube", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Tube((mglData const &)*arg2,(mglData const &)*arg3,arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tube__SWIG_11(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tube", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Tube", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->Tube((mglData const &)*arg2,(mglData const &)*arg3,arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tube__SWIG_12(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tube", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Tube", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Tube", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Tube((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tube__SWIG_13(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tube", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Tube", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Tube((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tube__SWIG_14(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tube", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->Tube((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tube__SWIG_15(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  double arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tube", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Tube", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Tube", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Tube", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Tube((mglData const &)*arg2,arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tube__SWIG_16(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  double arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tube", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Tube", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Tube", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Tube((mglData const &)*arg2,arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tube__SWIG_17(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tube", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Tube", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->Tube((mglData const &)*arg2,arg3);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_tube(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_tube__SWIG_17(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_tube__SWIG_14(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_tube__SWIG_16(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_tube__SWIG_11(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_tube__SWIG_13(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_tube__SWIG_8(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_tube__SWIG_15(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_tube__SWIG_10(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_tube__SWIG_12(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_tube__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_tube__SWIG_7(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_tube__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_tube__SWIG_9(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_tube__SWIG_4(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_tube__SWIG_6(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_tube__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_tube__SWIG_3(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_tube__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.tube", 
    "    void MglGraph.tube(mglData const &x, mglData const &y, mglData const &z, mglData const &r, char const *pen, char const *opt)\n"
    "    void MglGraph.tube(mglData const &x, mglData const &y, mglData const &z, mglData const &r, char const *pen)\n"
    "    void MglGraph.tube(mglData const &x, mglData const &y, mglData const &z, mglData const &r)\n"
    "    void MglGraph.tube(mglData const &x, mglData const &y, mglData const &z, double r, char const *pen, char const *opt)\n"
    "    void MglGraph.tube(mglData const &x, mglData const &y, mglData const &z, double r, char const *pen)\n"
    "    void MglGraph.tube(mglData const &x, mglData const &y, mglData const &z, double r)\n"
    "    void MglGraph.tube(mglData const &x, mglData const &y, mglData const &r, char const *pen, char const *opt)\n"
    "    void MglGraph.tube(mglData const &x, mglData const &y, mglData const &r, char const *pen)\n"
    "    void MglGraph.tube(mglData const &x, mglData const &y, mglData const &r)\n"
    "    void MglGraph.tube(mglData const &x, mglData const &y, double r, char const *pen, char const *opt)\n"
    "    void MglGraph.tube(mglData const &x, mglData const &y, double r, char const *pen)\n"
    "    void MglGraph.tube(mglData const &x, mglData const &y, double r)\n"
    "    void MglGraph.tube(mglData const &y, mglData const &r, char const *pen, char const *opt)\n"
    "    void MglGraph.tube(mglData const &y, mglData const &r, char const *pen)\n"
    "    void MglGraph.tube(mglData const &y, mglData const &r)\n"
    "    void MglGraph.tube(mglData const &y, double r, char const *pen, char const *opt)\n"
    "    void MglGraph.tube(mglData const &y, double r, char const *pen)\n"
    "    void MglGraph.tube(mglData const &y, double r)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.torus

  call-seq:
    torus(r, z, pen="", opt="")
    torus(r, z, pen="")
    torus(r, z)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_torus__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Torus", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Torus", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Torus", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Torus((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_torus__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Torus", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Torus", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Torus((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_torus__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Torus", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->Torus((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_torus(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_torus__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_torus__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_torus__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglGraph.torus", 
    "    void MglGraph.torus(mglData const &r, mglData const &z, char const *pen, char const *opt)\n"
    "    void MglGraph.torus(mglData const &r, mglData const &z, char const *pen)\n"
    "    void MglGraph.torus(mglData const &r, mglData const &z)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.mesh

  call-seq:
    mesh(x, y, z, stl="", opt="")
    mesh(x, y, z, stl="")
    mesh(x, y, z)
    mesh(z, stl="", opt="")
    mesh(z, stl="")
    mesh(z)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_mesh__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Mesh", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Mesh", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Mesh", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Mesh((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_mesh__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Mesh", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Mesh", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Mesh((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_mesh__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Mesh", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Mesh((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_mesh__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Mesh", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Mesh", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Mesh", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Mesh((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_mesh__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Mesh", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Mesh", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Mesh((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_mesh__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Mesh", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Mesh((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_mesh(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_mesh__SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_mesh__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_mesh__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_mesh__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_mesh__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_mesh__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.mesh", 
    "    void MglGraph.mesh(mglData const &x, mglData const &y, mglData const &z, char const *stl, char const *opt)\n"
    "    void MglGraph.mesh(mglData const &x, mglData const &y, mglData const &z, char const *stl)\n"
    "    void MglGraph.mesh(mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.mesh(mglData const &z, char const *stl, char const *opt)\n"
    "    void MglGraph.mesh(mglData const &z, char const *stl)\n"
    "    void MglGraph.mesh(mglData const &z)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.fall

  call-seq:
    fall(x, y, z, stl="", opt="")
    fall(x, y, z, stl="")
    fall(x, y, z)
    fall(z, stl="", opt="")
    fall(z, stl="")
    fall(z)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_fall__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fall", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Fall", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Fall", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Fall((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fall__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fall", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Fall", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Fall((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fall__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fall", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Fall((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fall__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fall", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fall", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Fall", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Fall((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fall__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fall", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fall", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Fall((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fall__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fall", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Fall((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_fall(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_fall__SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_fall__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_fall__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_fall__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_fall__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_fall__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.fall", 
    "    void MglGraph.fall(mglData const &x, mglData const &y, mglData const &z, char const *stl, char const *opt)\n"
    "    void MglGraph.fall(mglData const &x, mglData const &y, mglData const &z, char const *stl)\n"
    "    void MglGraph.fall(mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.fall(mglData const &z, char const *stl, char const *opt)\n"
    "    void MglGraph.fall(mglData const &z, char const *stl)\n"
    "    void MglGraph.fall(mglData const &z)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.belt

  call-seq:
    belt(x, y, z, stl="", opt="")
    belt(x, y, z, stl="")
    belt(x, y, z)
    belt(z, stl="", opt="")
    belt(z, stl="")
    belt(z)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_belt__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Belt", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Belt", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Belt", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Belt((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_belt__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Belt", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Belt", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Belt((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_belt__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Belt", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Belt((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_belt__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Belt", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Belt", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Belt", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Belt((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_belt__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Belt", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Belt", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Belt((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_belt__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Belt", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Belt((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_belt(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_belt__SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_belt__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_belt__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_belt__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_belt__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_belt__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.belt", 
    "    void MglGraph.belt(mglData const &x, mglData const &y, mglData const &z, char const *stl, char const *opt)\n"
    "    void MglGraph.belt(mglData const &x, mglData const &y, mglData const &z, char const *stl)\n"
    "    void MglGraph.belt(mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.belt(mglData const &z, char const *stl, char const *opt)\n"
    "    void MglGraph.belt(mglData const &z, char const *stl)\n"
    "    void MglGraph.belt(mglData const &z)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.surf

  call-seq:
    surf(x, y, z, stl="", opt="")
    surf(x, y, z, stl="")
    surf(x, y, z)
    surf(z, stl="", opt="")
    surf(z, stl="")
    surf(z)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_surf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Surf", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Surf", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Surf((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Surf", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Surf((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Surf((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Surf", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Surf", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Surf((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Surf", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Surf((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Surf((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_surf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_surf__SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_surf__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_surf__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_surf__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_surf__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_surf__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.surf", 
    "    void MglGraph.surf(mglData const &x, mglData const &y, mglData const &z, char const *stl, char const *opt)\n"
    "    void MglGraph.surf(mglData const &x, mglData const &y, mglData const &z, char const *stl)\n"
    "    void MglGraph.surf(mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.surf(mglData const &z, char const *stl, char const *opt)\n"
    "    void MglGraph.surf(mglData const &z, char const *stl)\n"
    "    void MglGraph.surf(mglData const &z)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.grid

  call-seq:
    grid(dir="xyzt", pen="B", opt="")
    grid(dir="xyzt", pen="B")
    grid(dir="xyzt")
    grid
    grid(x, y, z, stl="", opt="")
    grid(x, y, z, stl="")
    grid(x, y, z)
    grid(z, stl="", opt="")
    grid(z, stl="")
    grid(z)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_grid__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Grid", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Grid", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Grid", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Grid((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_grid__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Grid", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Grid", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Grid((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_grid__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Grid", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Grid((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_grid__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Grid", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Grid", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Grid", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Grid((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_grid__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Grid", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Grid", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Grid((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_grid__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Grid", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Grid((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_grid(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MglGraph_grid__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_grid__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_grid__SWIG_9(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_grid__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_grid__SWIG_8(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_grid__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_grid__SWIG_7(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_grid__SWIG_6(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_grid__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_grid__SWIG_4(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.grid", 
    "    void MglGraph.grid(char const *dir, char const *pen, char const *opt)\n"
    "    void MglGraph.grid(char const *dir, char const *pen)\n"
    "    void MglGraph.grid(char const *dir)\n"
    "    void MglGraph.grid()\n"
    "    void MglGraph.grid(mglData const &x, mglData const &y, mglData const &z, char const *stl, char const *opt)\n"
    "    void MglGraph.grid(mglData const &x, mglData const &y, mglData const &z, char const *stl)\n"
    "    void MglGraph.grid(mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.grid(mglData const &z, char const *stl, char const *opt)\n"
    "    void MglGraph.grid(mglData const &z, char const *stl)\n"
    "    void MglGraph.grid(mglData const &z)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.tile

  call-seq:
    tile(x, y, z, stl="", opt="")
    tile(x, y, z, stl="")
    tile(x, y, z)
    tile(z, stl="", opt="")
    tile(z, stl="")
    tile(z)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_tile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tile", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Tile", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Tile", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Tile((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tile", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Tile", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Tile((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tile__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tile", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Tile((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tile__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tile", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Tile", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Tile", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Tile((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tile__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tile", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Tile", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Tile((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tile__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Tile", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Tile((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_tile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_tile__SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_tile__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_tile__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_tile__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_tile__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_tile__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.tile", 
    "    void MglGraph.tile(mglData const &x, mglData const &y, mglData const &z, char const *stl, char const *opt)\n"
    "    void MglGraph.tile(mglData const &x, mglData const &y, mglData const &z, char const *stl)\n"
    "    void MglGraph.tile(mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.tile(mglData const &z, char const *stl, char const *opt)\n"
    "    void MglGraph.tile(mglData const &z, char const *stl)\n"
    "    void MglGraph.tile(mglData const &z)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.dens

  call-seq:
    dens(x, y, z, stl="", opt="")
    dens(x, y, z, stl="")
    dens(x, y, z)
    dens(z, stl="", opt="")
    dens(z, stl="")
    dens(z)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_dens__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Dens", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Dens", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Dens", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Dens((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dens__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Dens", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Dens", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Dens((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dens__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Dens", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Dens((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dens__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Dens", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Dens", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Dens", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Dens((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dens__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Dens", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Dens", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Dens((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dens__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Dens", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Dens((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_dens(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_dens__SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_dens__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_dens__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_dens__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_dens__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_dens__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.dens", 
    "    void MglGraph.dens(mglData const &x, mglData const &y, mglData const &z, char const *stl, char const *opt)\n"
    "    void MglGraph.dens(mglData const &x, mglData const &y, mglData const &z, char const *stl)\n"
    "    void MglGraph.dens(mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.dens(mglData const &z, char const *stl, char const *opt)\n"
    "    void MglGraph.dens(mglData const &z, char const *stl)\n"
    "    void MglGraph.dens(mglData const &z)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.boxs

  call-seq:
    boxs(x, y, z, stl="", opt="")
    boxs(x, y, z, stl="")
    boxs(x, y, z)
    boxs(z, stl="", opt="")
    boxs(z, stl="")
    boxs(z)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_boxs__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Boxs", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Boxs", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Boxs", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Boxs((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_boxs__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Boxs", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Boxs", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Boxs((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_boxs__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Boxs", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Boxs((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_boxs__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Boxs", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Boxs", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Boxs", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Boxs((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_boxs__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Boxs", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Boxs", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Boxs((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_boxs__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Boxs", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Boxs((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_boxs(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_boxs__SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_boxs__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_boxs__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_boxs__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_boxs__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_boxs__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.boxs", 
    "    void MglGraph.boxs(mglData const &x, mglData const &y, mglData const &z, char const *stl, char const *opt)\n"
    "    void MglGraph.boxs(mglData const &x, mglData const &y, mglData const &z, char const *stl)\n"
    "    void MglGraph.boxs(mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.boxs(mglData const &z, char const *stl, char const *opt)\n"
    "    void MglGraph.boxs(mglData const &z, char const *stl)\n"
    "    void MglGraph.boxs(mglData const &z)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.cont

  call-seq:
    cont(v, x, y, z, sch="", opt="")
    cont(v, x, y, z, sch="")
    cont(v, x, y, z)
    cont(v, z, sch="", opt="")
    cont(v, z, sch="")
    cont(v, z)
    cont(x, y, z, sch="", opt="")
    cont(x, y, z, sch="")
    cont(x, y, z)
    cont(z, sch="", opt="")
    cont(z, sch="")
    cont(z)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_cont__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cont", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Cont", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Cont", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Cont((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cont", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Cont", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Cont((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cont", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->Cont((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cont", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Cont", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Cont", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Cont((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cont", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Cont", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Cont((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cont", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->Cont((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cont", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Cont", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Cont", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Cont((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cont", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Cont", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Cont((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cont", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Cont((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cont", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Cont", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Cont", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Cont((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont__SWIG_10(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cont", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Cont", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Cont((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont__SWIG_11(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cont", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Cont((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_cont(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_cont__SWIG_11(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_cont__SWIG_10(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_cont__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_cont__SWIG_9(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_cont__SWIG_4(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_cont__SWIG_8(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_cont__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_cont__SWIG_7(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_cont__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_cont__SWIG_6(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_cont__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_cont__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.cont", 
    "    void MglGraph.cont(mglData const &v, mglData const &x, mglData const &y, mglData const &z, char const *sch, char const *opt)\n"
    "    void MglGraph.cont(mglData const &v, mglData const &x, mglData const &y, mglData const &z, char const *sch)\n"
    "    void MglGraph.cont(mglData const &v, mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.cont(mglData const &v, mglData const &z, char const *sch, char const *opt)\n"
    "    void MglGraph.cont(mglData const &v, mglData const &z, char const *sch)\n"
    "    void MglGraph.cont(mglData const &v, mglData const &z)\n"
    "    void MglGraph.cont(mglData const &x, mglData const &y, mglData const &z, char const *sch, char const *opt)\n"
    "    void MglGraph.cont(mglData const &x, mglData const &y, mglData const &z, char const *sch)\n"
    "    void MglGraph.cont(mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.cont(mglData const &z, char const *sch, char const *opt)\n"
    "    void MglGraph.cont(mglData const &z, char const *sch)\n"
    "    void MglGraph.cont(mglData const &z)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.cont_f

  call-seq:
    cont_f(v, x, y, z, sch="", opt="")
    cont_f(v, x, y, z, sch="")
    cont_f(v, x, y, z)
    cont_f(v, z, sch="", opt="")
    cont_f(v, z, sch="")
    cont_f(v, z)
    cont_f(x, y, z, sch="", opt="")
    cont_f(x, y, z, sch="")
    cont_f(x, y, z)
    cont_f(z, sch="", opt="")
    cont_f(z, sch="")
    cont_f(z)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_cont_f__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContF", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","ContF", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","ContF", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->ContF((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_f__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContF", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","ContF", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->ContF((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_f__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContF", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->ContF((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_f__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContF", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContF", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","ContF", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->ContF((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_f__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContF", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContF", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->ContF((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_f__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContF", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->ContF((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_f__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContF", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","ContF", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","ContF", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->ContF((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_f__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContF", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","ContF", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->ContF((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_f__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContF", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->ContF((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_f__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContF", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","ContF", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContF", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->ContF((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_f__SWIG_10(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContF", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","ContF", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->ContF((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_f__SWIG_11(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContF", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->ContF((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_cont_f(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_cont_f__SWIG_11(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_cont_f__SWIG_10(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_cont_f__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_cont_f__SWIG_9(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_cont_f__SWIG_4(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_cont_f__SWIG_8(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_cont_f__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_cont_f__SWIG_7(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_cont_f__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_cont_f__SWIG_6(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_cont_f__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_cont_f__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.cont_f", 
    "    void MglGraph.cont_f(mglData const &v, mglData const &x, mglData const &y, mglData const &z, char const *sch, char const *opt)\n"
    "    void MglGraph.cont_f(mglData const &v, mglData const &x, mglData const &y, mglData const &z, char const *sch)\n"
    "    void MglGraph.cont_f(mglData const &v, mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.cont_f(mglData const &v, mglData const &z, char const *sch, char const *opt)\n"
    "    void MglGraph.cont_f(mglData const &v, mglData const &z, char const *sch)\n"
    "    void MglGraph.cont_f(mglData const &v, mglData const &z)\n"
    "    void MglGraph.cont_f(mglData const &x, mglData const &y, mglData const &z, char const *sch, char const *opt)\n"
    "    void MglGraph.cont_f(mglData const &x, mglData const &y, mglData const &z, char const *sch)\n"
    "    void MglGraph.cont_f(mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.cont_f(mglData const &z, char const *sch, char const *opt)\n"
    "    void MglGraph.cont_f(mglData const &z, char const *sch)\n"
    "    void MglGraph.cont_f(mglData const &z)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.cont_d

  call-seq:
    cont_d(v, x, y, z, sch="", opt="")
    cont_d(v, x, y, z, sch="")
    cont_d(v, x, y, z)
    cont_d(v, z, sch="", opt="")
    cont_d(v, z, sch="")
    cont_d(v, z)
    cont_d(x, y, z, sch="", opt="")
    cont_d(x, y, z, sch="")
    cont_d(x, y, z)
    cont_d(z, sch="", opt="")
    cont_d(z, sch="")
    cont_d(z)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_cont_d__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContD", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","ContD", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","ContD", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->ContD((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_d__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContD", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","ContD", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->ContD((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_d__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContD", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->ContD((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_d__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContD", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContD", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","ContD", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->ContD((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_d__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContD", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContD", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->ContD((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_d__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContD", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->ContD((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_d__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContD", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","ContD", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","ContD", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->ContD((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_d__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContD", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","ContD", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->ContD((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_d__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContD", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->ContD((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_d__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContD", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","ContD", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContD", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->ContD((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_d__SWIG_10(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContD", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","ContD", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->ContD((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_d__SWIG_11(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContD", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->ContD((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_cont_d(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_cont_d__SWIG_11(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_cont_d__SWIG_10(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_cont_d__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_cont_d__SWIG_9(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_cont_d__SWIG_4(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_cont_d__SWIG_8(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_cont_d__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_cont_d__SWIG_7(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_cont_d__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_cont_d__SWIG_6(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_cont_d__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_cont_d__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.cont_d", 
    "    void MglGraph.cont_d(mglData const &v, mglData const &x, mglData const &y, mglData const &z, char const *sch, char const *opt)\n"
    "    void MglGraph.cont_d(mglData const &v, mglData const &x, mglData const &y, mglData const &z, char const *sch)\n"
    "    void MglGraph.cont_d(mglData const &v, mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.cont_d(mglData const &v, mglData const &z, char const *sch, char const *opt)\n"
    "    void MglGraph.cont_d(mglData const &v, mglData const &z, char const *sch)\n"
    "    void MglGraph.cont_d(mglData const &v, mglData const &z)\n"
    "    void MglGraph.cont_d(mglData const &x, mglData const &y, mglData const &z, char const *sch, char const *opt)\n"
    "    void MglGraph.cont_d(mglData const &x, mglData const &y, mglData const &z, char const *sch)\n"
    "    void MglGraph.cont_d(mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.cont_d(mglData const &z, char const *sch, char const *opt)\n"
    "    void MglGraph.cont_d(mglData const &z, char const *sch)\n"
    "    void MglGraph.cont_d(mglData const &z)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.cont_v

  call-seq:
    cont_v(v, x, y, z, sch="", opt="")
    cont_v(v, x, y, z, sch="")
    cont_v(v, x, y, z)
    cont_v(v, z, sch="", opt="")
    cont_v(v, z, sch="")
    cont_v(v, z)
    cont_v(x, y, z, sch="", opt="")
    cont_v(x, y, z, sch="")
    cont_v(x, y, z)
    cont_v(z, sch="", opt="")
    cont_v(z, sch="")
    cont_v(z)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_cont_v__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContV", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","ContV", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","ContV", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->ContV((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_v__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContV", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","ContV", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->ContV((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_v__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContV", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->ContV((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_v__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContV", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContV", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","ContV", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->ContV((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_v__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContV", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContV", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->ContV((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_v__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContV", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->ContV((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_v__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContV", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","ContV", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","ContV", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->ContV((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_v__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContV", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","ContV", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->ContV((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_v__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContV", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->ContV((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_v__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContV", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","ContV", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContV", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->ContV((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_v__SWIG_10(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContV", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","ContV", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->ContV((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_v__SWIG_11(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContV", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->ContV((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_cont_v(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_cont_v__SWIG_11(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_cont_v__SWIG_10(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_cont_v__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_cont_v__SWIG_9(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_cont_v__SWIG_4(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_cont_v__SWIG_8(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_cont_v__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_cont_v__SWIG_7(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_cont_v__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_cont_v__SWIG_6(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_cont_v__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_cont_v__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.cont_v", 
    "    void MglGraph.cont_v(mglData const &v, mglData const &x, mglData const &y, mglData const &z, char const *sch, char const *opt)\n"
    "    void MglGraph.cont_v(mglData const &v, mglData const &x, mglData const &y, mglData const &z, char const *sch)\n"
    "    void MglGraph.cont_v(mglData const &v, mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.cont_v(mglData const &v, mglData const &z, char const *sch, char const *opt)\n"
    "    void MglGraph.cont_v(mglData const &v, mglData const &z, char const *sch)\n"
    "    void MglGraph.cont_v(mglData const &v, mglData const &z)\n"
    "    void MglGraph.cont_v(mglData const &x, mglData const &y, mglData const &z, char const *sch, char const *opt)\n"
    "    void MglGraph.cont_v(mglData const &x, mglData const &y, mglData const &z, char const *sch)\n"
    "    void MglGraph.cont_v(mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.cont_v(mglData const &z, char const *sch, char const *opt)\n"
    "    void MglGraph.cont_v(mglData const &z, char const *sch)\n"
    "    void MglGraph.cont_v(mglData const &z)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.axial

  call-seq:
    axial(v, x, y, z, sch="", opt="")
    axial(v, x, y, z, sch="")
    axial(v, x, y, z)
    axial(v, z, sch="", opt="")
    axial(v, z, sch="")
    axial(v, z)
    axial(x, y, z, sch="", opt="")
    axial(x, y, z, sch="")
    axial(x, y, z)
    axial(z, sch="", opt="")
    axial(z, sch="")
    axial(z)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_axial__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Axial", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Axial", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Axial", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Axial((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_axial__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Axial", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Axial", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Axial((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_axial__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Axial", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->Axial((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_axial__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Axial", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Axial", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Axial", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Axial((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_axial__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Axial", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Axial", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Axial((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_axial__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Axial", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->Axial((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_axial__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Axial", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Axial", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Axial", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Axial((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_axial__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Axial", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Axial", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Axial((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_axial__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Axial", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Axial((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_axial__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Axial", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Axial", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Axial", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Axial((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_axial__SWIG_10(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Axial", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Axial", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Axial((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_axial__SWIG_11(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Axial", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Axial((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_axial(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_axial__SWIG_11(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_axial__SWIG_10(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_axial__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_axial__SWIG_9(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_axial__SWIG_4(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_axial__SWIG_8(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_axial__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_axial__SWIG_7(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_axial__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_axial__SWIG_6(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_axial__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_axial__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.axial", 
    "    void MglGraph.axial(mglData const &v, mglData const &x, mglData const &y, mglData const &z, char const *sch, char const *opt)\n"
    "    void MglGraph.axial(mglData const &v, mglData const &x, mglData const &y, mglData const &z, char const *sch)\n"
    "    void MglGraph.axial(mglData const &v, mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.axial(mglData const &v, mglData const &z, char const *sch, char const *opt)\n"
    "    void MglGraph.axial(mglData const &v, mglData const &z, char const *sch)\n"
    "    void MglGraph.axial(mglData const &v, mglData const &z)\n"
    "    void MglGraph.axial(mglData const &x, mglData const &y, mglData const &z, char const *sch, char const *opt)\n"
    "    void MglGraph.axial(mglData const &x, mglData const &y, mglData const &z, char const *sch)\n"
    "    void MglGraph.axial(mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.axial(mglData const &z, char const *sch, char const *opt)\n"
    "    void MglGraph.axial(mglData const &z, char const *sch)\n"
    "    void MglGraph.axial(mglData const &z)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.grid3

  call-seq:
    grid3(x, y, z, a, stl="", sVal=-1, opt="")
    grid3(x, y, z, a, stl="", sVal=-1)
    grid3(x, y, z, a, stl="")
    grid3(x, y, z, a)
    grid3(a, stl="", sVal=-1, opt="")
    grid3(a, stl="", sVal=-1)
    grid3(a, stl="")
    grid3(a)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_grid3__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  double arg7 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Grid3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Grid3", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","Grid3", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Grid3", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->Grid3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,arg7,(char const *)arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_grid3__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Grid3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Grid3", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","Grid3", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  (arg1)->Grid3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_grid3__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Grid3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Grid3", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Grid3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_grid3__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Grid3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->Grid3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_grid3__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Grid3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Grid3", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Grid3", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Grid3", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Grid3((mglData const &)*arg2,(char const *)arg3,arg4,(char const *)arg5);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_grid3__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Grid3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Grid3", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Grid3", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->Grid3((mglData const &)*arg2,(char const *)arg3,arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_grid3__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Grid3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Grid3", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Grid3((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_grid3__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Grid3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Grid3((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_grid3(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[9];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 9) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_grid3__SWIG_7(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_grid3__SWIG_6(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_grid3__SWIG_5(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_grid3__SWIG_4(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_grid3__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_grid3__SWIG_2(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_MglGraph_grid3__SWIG_1(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_grid3__SWIG_0(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 9, "MglGraph.grid3", 
    "    void MglGraph.grid3(mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *stl, double sVal, char const *opt)\n"
    "    void MglGraph.grid3(mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *stl, double sVal)\n"
    "    void MglGraph.grid3(mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *stl)\n"
    "    void MglGraph.grid3(mglData const &x, mglData const &y, mglData const &z, mglData const &a)\n"
    "    void MglGraph.grid3(mglData const &a, char const *stl, double sVal, char const *opt)\n"
    "    void MglGraph.grid3(mglData const &a, char const *stl, double sVal)\n"
    "    void MglGraph.grid3(mglData const &a, char const *stl)\n"
    "    void MglGraph.grid3(mglData const &a)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.dens3

  call-seq:
    dens3(x, y, z, a, stl="", sVal=-1, opt="")
    dens3(x, y, z, a, stl="", sVal=-1)
    dens3(x, y, z, a, stl="")
    dens3(x, y, z, a)
    dens3(a, stl="", sVal=-1, opt="")
    dens3(a, stl="", sVal=-1)
    dens3(a, stl="")
    dens3(a)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_dens3__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  double arg7 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Dens3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Dens3", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","Dens3", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Dens3", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->Dens3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,arg7,(char const *)arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dens3__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Dens3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Dens3", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","Dens3", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  (arg1)->Dens3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dens3__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Dens3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Dens3", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Dens3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dens3__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Dens3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->Dens3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dens3__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Dens3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Dens3", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Dens3", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Dens3", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Dens3((mglData const &)*arg2,(char const *)arg3,arg4,(char const *)arg5);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dens3__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Dens3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Dens3", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Dens3", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->Dens3((mglData const &)*arg2,(char const *)arg3,arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dens3__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Dens3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Dens3", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Dens3((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dens3__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Dens3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Dens3((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_dens3(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[9];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 9) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_dens3__SWIG_7(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_dens3__SWIG_6(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_dens3__SWIG_5(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_dens3__SWIG_4(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_dens3__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_dens3__SWIG_2(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_MglGraph_dens3__SWIG_1(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_dens3__SWIG_0(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 9, "MglGraph.dens3", 
    "    void MglGraph.dens3(mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *stl, double sVal, char const *opt)\n"
    "    void MglGraph.dens3(mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *stl, double sVal)\n"
    "    void MglGraph.dens3(mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *stl)\n"
    "    void MglGraph.dens3(mglData const &x, mglData const &y, mglData const &z, mglData const &a)\n"
    "    void MglGraph.dens3(mglData const &a, char const *stl, double sVal, char const *opt)\n"
    "    void MglGraph.dens3(mglData const &a, char const *stl, double sVal)\n"
    "    void MglGraph.dens3(mglData const &a, char const *stl)\n"
    "    void MglGraph.dens3(mglData const &a)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.surf3

  call-seq:
    surf3(Val, x, y, z, a, stl="", opt="")
    surf3(Val, x, y, z, a, stl="")
    surf3(Val, x, y, z, a)
    surf3(Val, a, stl="", opt="")
    surf3(Val, a, stl="")
    surf3(Val, a)
    surf3(x, y, z, a, stl="", opt="")
    surf3(x, y, z, a, stl="")
    surf3(x, y, z, a)
    surf3(a, stl="", opt="")
    surf3(a, stl="")
    surf3(a)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_surf3__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Surf3", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Surf3", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Surf3", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->Surf3(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7,(char const *)arg8);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf3__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Surf3", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Surf3", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Surf3(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf3__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Surf3", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  (arg1)->Surf3(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf3__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Surf3", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Surf3", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Surf3", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Surf3(arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf3__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Surf3", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Surf3", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Surf3(arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf3__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Surf3", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->Surf3(arg2,(mglData const &)*arg3);
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf3__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Surf3", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Surf3", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Surf3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf3__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Surf3", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Surf3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf3__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->Surf3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf3__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Surf3", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Surf3", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Surf3((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf3__SWIG_10(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Surf3", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Surf3((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf3__SWIG_11(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Surf3((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_surf3(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[9];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 9) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_surf3__SWIG_11(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_surf3__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_surf3__SWIG_10(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_surf3__SWIG_4(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_surf3__SWIG_9(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_surf3__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_surf3__SWIG_8(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                return _wrap_MglGraph_surf3__SWIG_2(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_surf3__SWIG_7(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_surf3__SWIG_1(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_surf3__SWIG_6(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_surf3__SWIG_0(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 9, "MglGraph.surf3", 
    "    void MglGraph.surf3(double Val, mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *stl, char const *opt)\n"
    "    void MglGraph.surf3(double Val, mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *stl)\n"
    "    void MglGraph.surf3(double Val, mglData const &x, mglData const &y, mglData const &z, mglData const &a)\n"
    "    void MglGraph.surf3(double Val, mglData const &a, char const *stl, char const *opt)\n"
    "    void MglGraph.surf3(double Val, mglData const &a, char const *stl)\n"
    "    void MglGraph.surf3(double Val, mglData const &a)\n"
    "    void MglGraph.surf3(mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *stl, char const *opt)\n"
    "    void MglGraph.surf3(mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *stl)\n"
    "    void MglGraph.surf3(mglData const &x, mglData const &y, mglData const &z, mglData const &a)\n"
    "    void MglGraph.surf3(mglData const &a, char const *stl, char const *opt)\n"
    "    void MglGraph.surf3(mglData const &a, char const *stl)\n"
    "    void MglGraph.surf3(mglData const &a)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.cloud

  call-seq:
    cloud(x, y, z, a, stl="", opt="")
    cloud(x, y, z, a, stl="")
    cloud(x, y, z, a)
    cloud(a, stl="", opt="")
    cloud(a, stl="")
    cloud(a)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_cloud__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cloud", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Cloud", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Cloud", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Cloud((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cloud__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cloud", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Cloud", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Cloud((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cloud__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cloud", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->Cloud((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cloud__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cloud", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Cloud", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Cloud", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Cloud((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cloud__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cloud", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Cloud", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Cloud((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cloud__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cloud", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Cloud((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_cloud(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_cloud__SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_cloud__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_cloud__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_cloud__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_cloud__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_cloud__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.cloud", 
    "    void MglGraph.cloud(mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *stl, char const *opt)\n"
    "    void MglGraph.cloud(mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *stl)\n"
    "    void MglGraph.cloud(mglData const &x, mglData const &y, mglData const &z, mglData const &a)\n"
    "    void MglGraph.cloud(mglData const &a, char const *stl, char const *opt)\n"
    "    void MglGraph.cloud(mglData const &a, char const *stl)\n"
    "    void MglGraph.cloud(mglData const &a)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.cont3

  call-seq:
    cont3(v, x, y, z, a, sch="", sVal=-1, opt="")
    cont3(v, x, y, z, a, sch="", sVal=-1)
    cont3(v, x, y, z, a, sch="")
    cont3(v, x, y, z, a)
    cont3(v, a, sch="", sVal=-1, opt="")
    cont3(v, a, sch="", sVal=-1)
    cont3(v, a, sch="")
    cont3(v, a)
    cont3(x, y, z, a, sch="", sVal=-1, opt="")
    cont3(x, y, z, a, sch="", sVal=-1)
    cont3(x, y, z, a, sch="")
    cont3(x, y, z, a)
    cont3(a, sch="", sVal=-1, opt="")
    cont3(a, sch="", sVal=-1)
    cont3(a, sch="")
    cont3(a)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_cont3__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  double arg8 ;
  char *arg9 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cont3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Cont3", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  ecode8 = SWIG_AsVal_double(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), Ruby_Format_TypeError( "", "double","Cont3", 8, argv[6] ));
  } 
  arg8 = static_cast< double >(val8);
  res9 = SWIG_AsCharPtrAndSize(argv[7], &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), Ruby_Format_TypeError( "", "char const *","Cont3", 9, argv[7] ));
  }
  arg9 = reinterpret_cast< char * >(buf9);
  (arg1)->Cont3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7,arg8,(char const *)arg9);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont3__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  double arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cont3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Cont3", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  ecode8 = SWIG_AsVal_double(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), Ruby_Format_TypeError( "", "double","Cont3", 8, argv[6] ));
  } 
  arg8 = static_cast< double >(val8);
  (arg1)->Cont3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7,arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont3__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cont3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Cont3", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Cont3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont3__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cont3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  (arg1)->Cont3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont3__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  double arg5 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cont3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Cont3", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","Cont3", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Cont3", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Cont3((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont3__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cont3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Cont3", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","Cont3", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->Cont3((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont3__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cont3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Cont3", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Cont3((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont3__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cont3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->Cont3((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont3__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  double arg7 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cont3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Cont3", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","Cont3", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Cont3", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->Cont3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,arg7,(char const *)arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont3__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cont3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Cont3", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","Cont3", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  (arg1)->Cont3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont3__SWIG_10(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cont3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Cont3", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Cont3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont3__SWIG_11(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cont3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->Cont3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont3__SWIG_12(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cont3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Cont3", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Cont3", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Cont3", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Cont3((mglData const &)*arg2,(char const *)arg3,arg4,(char const *)arg5);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont3__SWIG_13(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cont3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Cont3", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Cont3", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->Cont3((mglData const &)*arg2,(char const *)arg3,arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont3__SWIG_14(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cont3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Cont3", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Cont3((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont3__SWIG_15(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Cont3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Cont3((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_cont3(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[10];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 10) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_cont3__SWIG_15(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_cont3__SWIG_14(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_cont3__SWIG_7(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_cont3__SWIG_13(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_cont3__SWIG_6(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_cont3__SWIG_12(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_cont3__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_cont3__SWIG_11(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_cont3__SWIG_4(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_cont3__SWIG_10(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                return _wrap_MglGraph_cont3__SWIG_3(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_MglGraph_cont3__SWIG_9(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_cont3__SWIG_2(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_cont3__SWIG_8(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_MglGraph_cont3__SWIG_1(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    int res = SWIG_AsCharPtrAndSize(argv[8], 0, NULL, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_MglGraph_cont3__SWIG_0(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 10, "MglGraph.cont3", 
    "    void MglGraph.cont3(mglData const &v, mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *sch, double sVal, char const *opt)\n"
    "    void MglGraph.cont3(mglData const &v, mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *sch, double sVal)\n"
    "    void MglGraph.cont3(mglData const &v, mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *sch)\n"
    "    void MglGraph.cont3(mglData const &v, mglData const &x, mglData const &y, mglData const &z, mglData const &a)\n"
    "    void MglGraph.cont3(mglData const &v, mglData const &a, char const *sch, double sVal, char const *opt)\n"
    "    void MglGraph.cont3(mglData const &v, mglData const &a, char const *sch, double sVal)\n"
    "    void MglGraph.cont3(mglData const &v, mglData const &a, char const *sch)\n"
    "    void MglGraph.cont3(mglData const &v, mglData const &a)\n"
    "    void MglGraph.cont3(mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *sch, double sVal, char const *opt)\n"
    "    void MglGraph.cont3(mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *sch, double sVal)\n"
    "    void MglGraph.cont3(mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *sch)\n"
    "    void MglGraph.cont3(mglData const &x, mglData const &y, mglData const &z, mglData const &a)\n"
    "    void MglGraph.cont3(mglData const &a, char const *sch, double sVal, char const *opt)\n"
    "    void MglGraph.cont3(mglData const &a, char const *sch, double sVal)\n"
    "    void MglGraph.cont3(mglData const &a, char const *sch)\n"
    "    void MglGraph.cont3(mglData const &a)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.cont_f3

  call-seq:
    cont_f3(v, x, y, z, a, sch="", sVal=-1, opt="")
    cont_f3(v, x, y, z, a, sch="", sVal=-1)
    cont_f3(v, x, y, z, a, sch="")
    cont_f3(v, x, y, z, a)
    cont_f3(v, a, sch="", sVal=-1, opt="")
    cont_f3(v, a, sch="", sVal=-1)
    cont_f3(v, a, sch="")
    cont_f3(v, a)
    cont_f3(x, y, z, a, sch="", sVal=-1, opt="")
    cont_f3(x, y, z, a, sch="", sVal=-1)
    cont_f3(x, y, z, a, sch="")
    cont_f3(x, y, z, a)
    cont_f3(a, sch="", sVal=-1, opt="")
    cont_f3(a, sch="", sVal=-1)
    cont_f3(a, sch="")
    cont_f3(a)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_cont_f3__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  double arg8 ;
  char *arg9 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContF3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","ContF3", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  ecode8 = SWIG_AsVal_double(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), Ruby_Format_TypeError( "", "double","ContF3", 8, argv[6] ));
  } 
  arg8 = static_cast< double >(val8);
  res9 = SWIG_AsCharPtrAndSize(argv[7], &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), Ruby_Format_TypeError( "", "char const *","ContF3", 9, argv[7] ));
  }
  arg9 = reinterpret_cast< char * >(buf9);
  (arg1)->ContF3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7,arg8,(char const *)arg9);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_f3__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  double arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContF3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","ContF3", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  ecode8 = SWIG_AsVal_double(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), Ruby_Format_TypeError( "", "double","ContF3", 8, argv[6] ));
  } 
  arg8 = static_cast< double >(val8);
  (arg1)->ContF3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7,arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_f3__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContF3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","ContF3", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->ContF3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_f3__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContF3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  (arg1)->ContF3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_f3__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  double arg5 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContF3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContF3", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","ContF3", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","ContF3", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->ContF3((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_f3__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContF3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContF3", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","ContF3", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->ContF3((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_f3__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContF3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContF3", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->ContF3((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_f3__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContF3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->ContF3((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_f3__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  double arg7 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContF3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","ContF3", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","ContF3", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","ContF3", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->ContF3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,arg7,(char const *)arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_f3__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContF3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","ContF3", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","ContF3", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  (arg1)->ContF3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_f3__SWIG_10(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContF3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","ContF3", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->ContF3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_f3__SWIG_11(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContF3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->ContF3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_f3__SWIG_12(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContF3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","ContF3", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","ContF3", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","ContF3", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->ContF3((mglData const &)*arg2,(char const *)arg3,arg4,(char const *)arg5);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_f3__SWIG_13(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContF3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","ContF3", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","ContF3", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->ContF3((mglData const &)*arg2,(char const *)arg3,arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_f3__SWIG_14(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContF3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","ContF3", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->ContF3((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_f3__SWIG_15(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContF3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->ContF3((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_cont_f3(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[10];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 10) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_cont_f3__SWIG_15(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_cont_f3__SWIG_14(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_cont_f3__SWIG_7(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_cont_f3__SWIG_13(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_cont_f3__SWIG_6(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_cont_f3__SWIG_12(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_cont_f3__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_cont_f3__SWIG_11(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_cont_f3__SWIG_4(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_cont_f3__SWIG_10(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                return _wrap_MglGraph_cont_f3__SWIG_3(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_MglGraph_cont_f3__SWIG_9(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_cont_f3__SWIG_2(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_cont_f3__SWIG_8(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_MglGraph_cont_f3__SWIG_1(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    int res = SWIG_AsCharPtrAndSize(argv[8], 0, NULL, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_MglGraph_cont_f3__SWIG_0(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 10, "MglGraph.cont_f3", 
    "    void MglGraph.cont_f3(mglData const &v, mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *sch, double sVal, char const *opt)\n"
    "    void MglGraph.cont_f3(mglData const &v, mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *sch, double sVal)\n"
    "    void MglGraph.cont_f3(mglData const &v, mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *sch)\n"
    "    void MglGraph.cont_f3(mglData const &v, mglData const &x, mglData const &y, mglData const &z, mglData const &a)\n"
    "    void MglGraph.cont_f3(mglData const &v, mglData const &a, char const *sch, double sVal, char const *opt)\n"
    "    void MglGraph.cont_f3(mglData const &v, mglData const &a, char const *sch, double sVal)\n"
    "    void MglGraph.cont_f3(mglData const &v, mglData const &a, char const *sch)\n"
    "    void MglGraph.cont_f3(mglData const &v, mglData const &a)\n"
    "    void MglGraph.cont_f3(mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *sch, double sVal, char const *opt)\n"
    "    void MglGraph.cont_f3(mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *sch, double sVal)\n"
    "    void MglGraph.cont_f3(mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *sch)\n"
    "    void MglGraph.cont_f3(mglData const &x, mglData const &y, mglData const &z, mglData const &a)\n"
    "    void MglGraph.cont_f3(mglData const &a, char const *sch, double sVal, char const *opt)\n"
    "    void MglGraph.cont_f3(mglData const &a, char const *sch, double sVal)\n"
    "    void MglGraph.cont_f3(mglData const &a, char const *sch)\n"
    "    void MglGraph.cont_f3(mglData const &a)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.beam

  call-seq:
    beam(tr, g1, g2, a, r, stl=None, flag=0, num=3)
    beam(tr, g1, g2, a, r, stl=None, flag=0)
    beam(tr, g1, g2, a, r, stl=None)
    beam(tr, g1, g2, a, r)
    beam(val, tr, g1, g2, a, r, stl=nil, flag=0)
    beam(val, tr, g1, g2, a, r, stl=nil)
    beam(val, tr, g1, g2, a, r)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_beam__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  double arg6 ;
  char *arg7 = (char *) 0 ;
  int arg8 ;
  int arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Beam", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","Beam", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Beam", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  ecode8 = SWIG_AsVal_int(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), Ruby_Format_TypeError( "", "int","Beam", 8, argv[6] ));
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_int(argv[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), Ruby_Format_TypeError( "", "int","Beam", 9, argv[7] ));
  } 
  arg9 = static_cast< int >(val9);
  (arg1)->Beam((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,arg6,(char const *)arg7,arg8,arg9);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_beam__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  double arg6 ;
  char *arg7 = (char *) 0 ;
  int arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Beam", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","Beam", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Beam", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  ecode8 = SWIG_AsVal_int(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), Ruby_Format_TypeError( "", "int","Beam", 8, argv[6] ));
  } 
  arg8 = static_cast< int >(val8);
  (arg1)->Beam((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,arg6,(char const *)arg7,arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_beam__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  double arg6 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Beam", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","Beam", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Beam", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Beam((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_beam__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Beam", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","Beam", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  (arg1)->Beam((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_beam__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  double arg7 ;
  char *arg8 = (char *) 0 ;
  int arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Beam", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Beam", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","Beam", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Beam", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  ecode9 = SWIG_AsVal_int(argv[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), Ruby_Format_TypeError( "", "int","Beam", 9, argv[7] ));
  } 
  arg9 = static_cast< int >(val9);
  (arg1)->Beam(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,arg7,(char const *)arg8,arg9);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_beam__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  double arg7 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Beam", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Beam", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","Beam", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Beam", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->Beam(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,arg7,(char const *)arg8);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_beam__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Beam", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Beam", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","Beam", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  (arg1)->Beam(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,arg7);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_beam(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[10];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 10) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglGraph_beam__SWIG_3(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_MglGraph_beam__SWIG_6(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_beam__SWIG_2(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_beam__SWIG_5(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_MglGraph_beam__SWIG_1(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    {
                      int res = SWIG_AsVal_int(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_MglGraph_beam__SWIG_4(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_int(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_MglGraph_beam__SWIG_0(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 10, "MglGraph.beam", 
    "    void MglGraph.beam(mglData const &tr, mglData const &g1, mglData const &g2, mglData const &a, double r, char const *stl, int flag, int num)\n"
    "    void MglGraph.beam(mglData const &tr, mglData const &g1, mglData const &g2, mglData const &a, double r, char const *stl, int flag)\n"
    "    void MglGraph.beam(mglData const &tr, mglData const &g1, mglData const &g2, mglData const &a, double r, char const *stl)\n"
    "    void MglGraph.beam(mglData const &tr, mglData const &g1, mglData const &g2, mglData const &a, double r)\n"
    "    void MglGraph.beam(double val, mglData const &tr, mglData const &g1, mglData const &g2, mglData const &a, double r, char const *stl, int flag)\n"
    "    void MglGraph.beam(double val, mglData const &tr, mglData const &g1, mglData const &g2, mglData const &a, double r, char const *stl)\n"
    "    void MglGraph.beam(double val, mglData const &tr, mglData const &g1, mglData const &g2, mglData const &a, double r)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.tile_s

  call-seq:
    tile_s(x, y, z, r, stl="", opt="")
    tile_s(x, y, z, r, stl="")
    tile_s(x, y, z, r)
    tile_s(z, r, stl="", opt="")
    tile_s(z, r, stl="")
    tile_s(z, r)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_tile_s__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TileS", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","TileS", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","TileS", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->TileS((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tile_s__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TileS", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","TileS", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->TileS((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tile_s__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TileS", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->TileS((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tile_s__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TileS", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","TileS", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","TileS", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->TileS((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tile_s__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TileS", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","TileS", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->TileS((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tile_s__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TileS", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->TileS((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_tile_s(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_tile_s__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_tile_s__SWIG_4(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_tile_s__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_tile_s__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_tile_s__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_tile_s__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.tile_s", 
    "    void MglGraph.tile_s(mglData const &x, mglData const &y, mglData const &z, mglData const &r, char const *stl, char const *opt)\n"
    "    void MglGraph.tile_s(mglData const &x, mglData const &y, mglData const &z, mglData const &r, char const *stl)\n"
    "    void MglGraph.tile_s(mglData const &x, mglData const &y, mglData const &z, mglData const &r)\n"
    "    void MglGraph.tile_s(mglData const &z, mglData const &r, char const *stl, char const *opt)\n"
    "    void MglGraph.tile_s(mglData const &z, mglData const &r, char const *stl)\n"
    "    void MglGraph.tile_s(mglData const &z, mglData const &r)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.surf_c

  call-seq:
    surf_c(x, y, z, c, sch="", opt="")
    surf_c(x, y, z, c, sch="")
    surf_c(x, y, z, c)
    surf_c(z, c, sch="", opt="")
    surf_c(z, c, sch="")
    surf_c(z, c)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_surf_c__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SurfC", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","SurfC", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","SurfC", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->SurfC((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_c__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SurfC", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","SurfC", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->SurfC((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_c__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SurfC", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->SurfC((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_c__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SurfC", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","SurfC", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","SurfC", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->SurfC((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_c__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SurfC", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","SurfC", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->SurfC((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_c__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SurfC", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->SurfC((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_surf_c(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_surf_c__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_surf_c__SWIG_4(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_surf_c__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_surf_c__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_surf_c__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_surf_c__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.surf_c", 
    "    void MglGraph.surf_c(mglData const &x, mglData const &y, mglData const &z, mglData const &c, char const *sch, char const *opt)\n"
    "    void MglGraph.surf_c(mglData const &x, mglData const &y, mglData const &z, mglData const &c, char const *sch)\n"
    "    void MglGraph.surf_c(mglData const &x, mglData const &y, mglData const &z, mglData const &c)\n"
    "    void MglGraph.surf_c(mglData const &z, mglData const &c, char const *sch, char const *opt)\n"
    "    void MglGraph.surf_c(mglData const &z, mglData const &c, char const *sch)\n"
    "    void MglGraph.surf_c(mglData const &z, mglData const &c)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.surf_a

  call-seq:
    surf_a(x, y, z, c, sch="", opt="")
    surf_a(x, y, z, c, sch="")
    surf_a(x, y, z, c)
    surf_a(z, c, sch="", opt="")
    surf_a(z, c, sch="")
    surf_a(z, c)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_surf_a__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SurfA", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","SurfA", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","SurfA", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->SurfA((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_a__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SurfA", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","SurfA", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->SurfA((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_a__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SurfA", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->SurfA((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_a__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SurfA", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","SurfA", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","SurfA", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->SurfA((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_a__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SurfA", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","SurfA", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->SurfA((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_a__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SurfA", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->SurfA((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_surf_a(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_surf_a__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_surf_a__SWIG_4(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_surf_a__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_surf_a__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_surf_a__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_surf_a__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.surf_a", 
    "    void MglGraph.surf_a(mglData const &x, mglData const &y, mglData const &z, mglData const &c, char const *sch, char const *opt)\n"
    "    void MglGraph.surf_a(mglData const &x, mglData const &y, mglData const &z, mglData const &c, char const *sch)\n"
    "    void MglGraph.surf_a(mglData const &x, mglData const &y, mglData const &z, mglData const &c)\n"
    "    void MglGraph.surf_a(mglData const &z, mglData const &c, char const *sch, char const *opt)\n"
    "    void MglGraph.surf_a(mglData const &z, mglData const &c, char const *sch)\n"
    "    void MglGraph.surf_a(mglData const &z, mglData const &c)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.map

  call-seq:
    map(x, y, a, b, sch="", opt="")
    map(x, y, a, b, sch="")
    map(x, y, a, b)
    map(a, b, sch="", opt="")
    map(a, b, sch="")
    map(a, b)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_map__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Map", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Map", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Map", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Map((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_map__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Map", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Map", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Map((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_map__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Map", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->Map((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_map__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Map", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Map", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Map", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Map((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_map__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Map", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Map", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Map((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_map__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Map", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->Map((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_map(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_map__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_map__SWIG_4(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_map__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_map__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_map__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_map__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.map", 
    "    void MglGraph.map(mglData const &x, mglData const &y, mglData const &a, mglData const &b, char const *sch, char const *opt)\n"
    "    void MglGraph.map(mglData const &x, mglData const &y, mglData const &a, mglData const &b, char const *sch)\n"
    "    void MglGraph.map(mglData const &x, mglData const &y, mglData const &a, mglData const &b)\n"
    "    void MglGraph.map(mglData const &a, mglData const &b, char const *sch, char const *opt)\n"
    "    void MglGraph.map(mglData const &a, mglData const &b, char const *sch)\n"
    "    void MglGraph.map(mglData const &a, mglData const &b)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.stfa

  call-seq:
    stfa(x, y, re, im, dn, sch="", opt="")
    stfa(x, y, re, im, dn, sch="")
    stfa(x, y, re, im, dn)
    stfa(re, im, dn, sch="", opt="")
    stfa(re, im, dn, sch="")
    stfa(re, im, dn)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_stfa__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","STFA", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "int","STFA", 6, argv[4] ));
  } 
  arg6 = static_cast< int >(val6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","STFA", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","STFA", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->STFA((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,arg6,(char const *)arg7,(char const *)arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_stfa__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","STFA", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "int","STFA", 6, argv[4] ));
  } 
  arg6 = static_cast< int >(val6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","STFA", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->STFA((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_stfa__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","STFA", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "int","STFA", 6, argv[4] ));
  } 
  arg6 = static_cast< int >(val6);
  (arg1)->STFA((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_stfa__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","STFA", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","STFA", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","STFA", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","STFA", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->STFA((mglData const &)*arg2,(mglData const &)*arg3,arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_stfa__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","STFA", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","STFA", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","STFA", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->STFA((mglData const &)*arg2,(mglData const &)*arg3,arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_stfa__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","STFA", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","STFA", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  (arg1)->STFA((mglData const &)*arg2,(mglData const &)*arg3,arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_stfa(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[9];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 9) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_stfa__SWIG_5(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_stfa__SWIG_4(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_stfa__SWIG_3(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglGraph_stfa__SWIG_2(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_stfa__SWIG_1(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_stfa__SWIG_0(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 9, "MglGraph.stfa", 
    "    void MglGraph.stfa(mglData const &x, mglData const &y, mglData const &re, mglData const &im, int dn, char const *sch, char const *opt)\n"
    "    void MglGraph.stfa(mglData const &x, mglData const &y, mglData const &re, mglData const &im, int dn, char const *sch)\n"
    "    void MglGraph.stfa(mglData const &x, mglData const &y, mglData const &re, mglData const &im, int dn)\n"
    "    void MglGraph.stfa(mglData const &re, mglData const &im, int dn, char const *sch, char const *opt)\n"
    "    void MglGraph.stfa(mglData const &re, mglData const &im, int dn, char const *sch)\n"
    "    void MglGraph.stfa(mglData const &re, mglData const &im, int dn)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.surf_3a

  call-seq:
    surf_3a(Val, x, y, z, a, b, stl="", opt="")
    surf_3a(Val, x, y, z, a, b, stl="")
    surf_3a(Val, x, y, z, a, b)
    surf_3a(Val, a, b, stl="", opt="")
    surf_3a(Val, a, b, stl="")
    surf_3a(Val, a, b)
    surf_3a(x, y, z, a, b, stl="", opt="")
    surf_3a(x, y, z, a, b, stl="")
    surf_3a(x, y, z, a, b)
    surf_3a(a, b, stl="", opt="")
    surf_3a(a, b, stl="")
    surf_3a(a, b)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_surf_3a__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3A", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Surf3A", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Surf3A", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  res9 = SWIG_AsCharPtrAndSize(argv[7], &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), Ruby_Format_TypeError( "", "char const *","Surf3A", 9, argv[7] ));
  }
  arg9 = reinterpret_cast< char * >(buf9);
  (arg1)->Surf3A(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7,(char const *)arg8,(char const *)arg9);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_3a__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3A", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Surf3A", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Surf3A", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->Surf3A(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7,(char const *)arg8);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_3a__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3A", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Surf3A", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  (arg1)->Surf3A(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_3a__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3A", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Surf3A", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Surf3A", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Surf3A", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Surf3A(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_3a__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3A", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Surf3A", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Surf3A", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Surf3A(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_3a__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3A", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Surf3A", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Surf3A(arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_3a__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3A", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Surf3A", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Surf3A", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->Surf3A((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7,(char const *)arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_3a__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3A", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Surf3A", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Surf3A((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_3a__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3A", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  (arg1)->Surf3A((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_3a__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3A", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Surf3A", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Surf3A", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Surf3A((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_3a__SWIG_10(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3A", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Surf3A", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Surf3A((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_3a__SWIG_11(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3A", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->Surf3A((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_surf_3a(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[10];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 10) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_surf_3a__SWIG_11(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_surf_3a__SWIG_5(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_surf_3a__SWIG_10(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_surf_3a__SWIG_4(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_surf_3a__SWIG_9(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_surf_3a__SWIG_3(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                return _wrap_MglGraph_surf_3a__SWIG_8(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  return _wrap_MglGraph_surf_3a__SWIG_2(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_surf_3a__SWIG_7(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_surf_3a__SWIG_1(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_surf_3a__SWIG_6(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_AsCharPtrAndSize(argv[8], 0, NULL, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_MglGraph_surf_3a__SWIG_0(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 10, "MglGraph.surf_3a", 
    "    void MglGraph.surf_3a(double Val, mglData const &x, mglData const &y, mglData const &z, mglData const &a, mglData const &b, char const *stl, char const *opt)\n"
    "    void MglGraph.surf_3a(double Val, mglData const &x, mglData const &y, mglData const &z, mglData const &a, mglData const &b, char const *stl)\n"
    "    void MglGraph.surf_3a(double Val, mglData const &x, mglData const &y, mglData const &z, mglData const &a, mglData const &b)\n"
    "    void MglGraph.surf_3a(double Val, mglData const &a, mglData const &b, char const *stl, char const *opt)\n"
    "    void MglGraph.surf_3a(double Val, mglData const &a, mglData const &b, char const *stl)\n"
    "    void MglGraph.surf_3a(double Val, mglData const &a, mglData const &b)\n"
    "    void MglGraph.surf_3a(mglData const &x, mglData const &y, mglData const &z, mglData const &a, mglData const &b, char const *stl, char const *opt)\n"
    "    void MglGraph.surf_3a(mglData const &x, mglData const &y, mglData const &z, mglData const &a, mglData const &b, char const *stl)\n"
    "    void MglGraph.surf_3a(mglData const &x, mglData const &y, mglData const &z, mglData const &a, mglData const &b)\n"
    "    void MglGraph.surf_3a(mglData const &a, mglData const &b, char const *stl, char const *opt)\n"
    "    void MglGraph.surf_3a(mglData const &a, mglData const &b, char const *stl)\n"
    "    void MglGraph.surf_3a(mglData const &a, mglData const &b)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.surf_3c

  call-seq:
    surf_3c(Val, x, y, z, a, b, stl="", opt="")
    surf_3c(Val, x, y, z, a, b, stl="")
    surf_3c(Val, x, y, z, a, b)
    surf_3c(Val, a, b, stl="", opt="")
    surf_3c(Val, a, b, stl="")
    surf_3c(Val, a, b)
    surf_3c(x, y, z, a, b, stl="", opt="")
    surf_3c(x, y, z, a, b, stl="")
    surf_3c(x, y, z, a, b)
    surf_3c(a, b, stl="", opt="")
    surf_3c(a, b, stl="")
    surf_3c(a, b)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_surf_3c__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3C", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Surf3C", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Surf3C", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  res9 = SWIG_AsCharPtrAndSize(argv[7], &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), Ruby_Format_TypeError( "", "char const *","Surf3C", 9, argv[7] ));
  }
  arg9 = reinterpret_cast< char * >(buf9);
  (arg1)->Surf3C(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7,(char const *)arg8,(char const *)arg9);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_3c__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3C", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Surf3C", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Surf3C", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->Surf3C(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7,(char const *)arg8);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_3c__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3C", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Surf3C", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  (arg1)->Surf3C(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_3c__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3C", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Surf3C", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Surf3C", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Surf3C", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Surf3C(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_3c__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3C", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Surf3C", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Surf3C", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Surf3C(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_3c__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  double arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3C", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Surf3C", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Surf3C(arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_3c__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3C", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Surf3C", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Surf3C", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->Surf3C((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7,(char const *)arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_3c__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3C", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Surf3C", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Surf3C((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_3c__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3C", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  (arg1)->Surf3C((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_3c__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3C", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Surf3C", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Surf3C", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Surf3C((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_3c__SWIG_10(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3C", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Surf3C", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Surf3C((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_surf_3c__SWIG_11(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Surf3C", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->Surf3C((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_surf_3c(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[10];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 10) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_surf_3c__SWIG_11(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_surf_3c__SWIG_5(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_surf_3c__SWIG_10(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_surf_3c__SWIG_4(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_surf_3c__SWIG_9(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_surf_3c__SWIG_3(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                return _wrap_MglGraph_surf_3c__SWIG_8(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  return _wrap_MglGraph_surf_3c__SWIG_2(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_surf_3c__SWIG_7(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_surf_3c__SWIG_1(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_surf_3c__SWIG_6(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_AsCharPtrAndSize(argv[8], 0, NULL, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_MglGraph_surf_3c__SWIG_0(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 10, "MglGraph.surf_3c", 
    "    void MglGraph.surf_3c(double Val, mglData const &x, mglData const &y, mglData const &z, mglData const &a, mglData const &b, char const *stl, char const *opt)\n"
    "    void MglGraph.surf_3c(double Val, mglData const &x, mglData const &y, mglData const &z, mglData const &a, mglData const &b, char const *stl)\n"
    "    void MglGraph.surf_3c(double Val, mglData const &x, mglData const &y, mglData const &z, mglData const &a, mglData const &b)\n"
    "    void MglGraph.surf_3c(double Val, mglData const &a, mglData const &b, char const *stl, char const *opt)\n"
    "    void MglGraph.surf_3c(double Val, mglData const &a, mglData const &b, char const *stl)\n"
    "    void MglGraph.surf_3c(double Val, mglData const &a, mglData const &b)\n"
    "    void MglGraph.surf_3c(mglData const &x, mglData const &y, mglData const &z, mglData const &a, mglData const &b, char const *stl, char const *opt)\n"
    "    void MglGraph.surf_3c(mglData const &x, mglData const &y, mglData const &z, mglData const &a, mglData const &b, char const *stl)\n"
    "    void MglGraph.surf_3c(mglData const &x, mglData const &y, mglData const &z, mglData const &a, mglData const &b)\n"
    "    void MglGraph.surf_3c(mglData const &a, mglData const &b, char const *stl, char const *opt)\n"
    "    void MglGraph.surf_3c(mglData const &a, mglData const &b, char const *stl)\n"
    "    void MglGraph.surf_3c(mglData const &a, mglData const &b)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.dew

  call-seq:
    dew(x, y, ax, ay, sch="", opt="")
    dew(x, y, ax, ay, sch="")
    dew(x, y, ax, ay)
    dew(ax, ay, sch="", opt="")
    dew(ax, ay, sch="")
    dew(ax, ay)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_dew__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Dew", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Dew", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Dew", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Dew((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dew__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Dew", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Dew", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Dew((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dew__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Dew", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->Dew((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dew__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Dew", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Dew", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Dew", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Dew((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dew__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Dew", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Dew", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Dew((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dew__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Dew", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->Dew((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_dew(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_dew__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_dew__SWIG_4(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_dew__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_dew__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_dew__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_dew__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.dew", 
    "    void MglGraph.dew(mglData const &x, mglData const &y, mglData const &ax, mglData const &ay, char const *sch, char const *opt)\n"
    "    void MglGraph.dew(mglData const &x, mglData const &y, mglData const &ax, mglData const &ay, char const *sch)\n"
    "    void MglGraph.dew(mglData const &x, mglData const &y, mglData const &ax, mglData const &ay)\n"
    "    void MglGraph.dew(mglData const &ax, mglData const &ay, char const *sch, char const *opt)\n"
    "    void MglGraph.dew(mglData const &ax, mglData const &ay, char const *sch)\n"
    "    void MglGraph.dew(mglData const &ax, mglData const &ay)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.traj

  call-seq:
    traj(x, y, ax, ay, sch="", opt="")
    traj(x, y, ax, ay, sch="")
    traj(x, y, ax, ay)
    traj(x, y, z, ax, ay, az, sch="", opt="")
    traj(x, y, z, ax, ay, az, sch="")
    traj(x, y, z, ax, ay, az)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_traj__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Traj", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Traj", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Traj", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Traj((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_traj__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Traj", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Traj", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Traj((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_traj__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Traj", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->Traj((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_traj__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Traj", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Traj", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  res9 = SWIG_AsCharPtrAndSize(argv[7], &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), Ruby_Format_TypeError( "", "char const *","Traj", 9, argv[7] ));
  }
  arg9 = reinterpret_cast< char * >(buf9);
  (arg1)->Traj((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7,(char const *)arg8,(char const *)arg9);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_traj__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Traj", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Traj", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->Traj((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7,(char const *)arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_traj__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Traj", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  (arg1)->Traj((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_traj(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[10];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 10) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_traj__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_traj__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_traj__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  return _wrap_MglGraph_traj__SWIG_5(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_traj__SWIG_4(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_AsCharPtrAndSize(argv[8], 0, NULL, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_MglGraph_traj__SWIG_3(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 10, "MglGraph.traj", 
    "    void MglGraph.traj(mglData const &x, mglData const &y, mglData const &ax, mglData const &ay, char const *sch, char const *opt)\n"
    "    void MglGraph.traj(mglData const &x, mglData const &y, mglData const &ax, mglData const &ay, char const *sch)\n"
    "    void MglGraph.traj(mglData const &x, mglData const &y, mglData const &ax, mglData const &ay)\n"
    "    void MglGraph.traj(mglData const &x, mglData const &y, mglData const &z, mglData const &ax, mglData const &ay, mglData const &az, char const *sch, char const *opt)\n"
    "    void MglGraph.traj(mglData const &x, mglData const &y, mglData const &z, mglData const &ax, mglData const &ay, mglData const &az, char const *sch)\n"
    "    void MglGraph.traj(mglData const &x, mglData const &y, mglData const &z, mglData const &ax, mglData const &ay, mglData const &az)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.vect

  call-seq:
    vect(x, y, ax, ay, sch="", opt="")
    vect(x, y, ax, ay, sch="")
    vect(x, y, ax, ay)
    vect(ax, ay, sch="", opt="")
    vect(ax, ay, sch="")
    vect(ax, ay)
    vect(x, y, z, ax, ay, az, sch="", opt="")
    vect(x, y, z, ax, ay, az, sch="")
    vect(x, y, z, ax, ay, az)
    vect(ax, ay, az, sch="", opt="")
    vect(ax, ay, az, sch="")
    vect(ax, ay, az)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_vect__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Vect", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Vect", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Vect", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Vect((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_vect__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Vect", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Vect", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Vect((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_vect__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Vect", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->Vect((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_vect__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Vect", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Vect", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Vect", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Vect((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_vect__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Vect", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Vect", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Vect((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_vect__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Vect", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->Vect((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_vect__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Vect", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Vect", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  res9 = SWIG_AsCharPtrAndSize(argv[7], &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), Ruby_Format_TypeError( "", "char const *","Vect", 9, argv[7] ));
  }
  arg9 = reinterpret_cast< char * >(buf9);
  (arg1)->Vect((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7,(char const *)arg8,(char const *)arg9);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_vect__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Vect", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Vect", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->Vect((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7,(char const *)arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_vect__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Vect", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  (arg1)->Vect((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_vect__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Vect", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Vect", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Vect", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Vect((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_vect__SWIG_10(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Vect", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Vect", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Vect((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_vect__SWIG_11(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Vect", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Vect((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_vect(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[10];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 10) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_vect__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_vect__SWIG_4(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_vect__SWIG_11(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_vect__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_vect__SWIG_10(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_vect__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_vect__SWIG_9(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_vect__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_vect__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  return _wrap_MglGraph_vect__SWIG_8(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_vect__SWIG_7(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_AsCharPtrAndSize(argv[8], 0, NULL, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_MglGraph_vect__SWIG_6(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 10, "MglGraph.vect", 
    "    void MglGraph.vect(mglData const &x, mglData const &y, mglData const &ax, mglData const &ay, char const *sch, char const *opt)\n"
    "    void MglGraph.vect(mglData const &x, mglData const &y, mglData const &ax, mglData const &ay, char const *sch)\n"
    "    void MglGraph.vect(mglData const &x, mglData const &y, mglData const &ax, mglData const &ay)\n"
    "    void MglGraph.vect(mglData const &ax, mglData const &ay, char const *sch, char const *opt)\n"
    "    void MglGraph.vect(mglData const &ax, mglData const &ay, char const *sch)\n"
    "    void MglGraph.vect(mglData const &ax, mglData const &ay)\n"
    "    void MglGraph.vect(mglData const &x, mglData const &y, mglData const &z, mglData const &ax, mglData const &ay, mglData const &az, char const *sch, char const *opt)\n"
    "    void MglGraph.vect(mglData const &x, mglData const &y, mglData const &z, mglData const &ax, mglData const &ay, mglData const &az, char const *sch)\n"
    "    void MglGraph.vect(mglData const &x, mglData const &y, mglData const &z, mglData const &ax, mglData const &ay, mglData const &az)\n"
    "    void MglGraph.vect(mglData const &ax, mglData const &ay, mglData const &az, char const *sch, char const *opt)\n"
    "    void MglGraph.vect(mglData const &ax, mglData const &ay, mglData const &az, char const *sch)\n"
    "    void MglGraph.vect(mglData const &ax, mglData const &ay, mglData const &az)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.vect3

  call-seq:
    vect3(x, y, z, ax, ay, az, stl="", sVal=-1, opt="")
    vect3(x, y, z, ax, ay, az, stl="", sVal=-1)
    vect3(x, y, z, ax, ay, az, stl="")
    vect3(x, y, z, ax, ay, az)
    vect3(ax, ay, az, stl="", sVal=-1, opt="")
    vect3(ax, ay, az, stl="", sVal=-1)
    vect3(ax, ay, az, stl="")
    vect3(ax, ay, az)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_vect3__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  char *arg8 = (char *) 0 ;
  double arg9 ;
  char *arg10 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  int res10 ;
  char *buf10 = 0 ;
  int alloc10 = 0 ;
  
  if ((argc < 9) || (argc > 9)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 9)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Vect3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Vect3", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  ecode9 = SWIG_AsVal_double(argv[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), Ruby_Format_TypeError( "", "double","Vect3", 9, argv[7] ));
  } 
  arg9 = static_cast< double >(val9);
  res10 = SWIG_AsCharPtrAndSize(argv[8], &buf10, NULL, &alloc10);
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), Ruby_Format_TypeError( "", "char const *","Vect3", 10, argv[8] ));
  }
  arg10 = reinterpret_cast< char * >(buf10);
  (arg1)->Vect3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7,(char const *)arg8,arg9,(char const *)arg10);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc10 == SWIG_NEWOBJ) delete[] buf10;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc10 == SWIG_NEWOBJ) delete[] buf10;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_vect3__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  char *arg8 = (char *) 0 ;
  double arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Vect3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Vect3", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  ecode9 = SWIG_AsVal_double(argv[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), Ruby_Format_TypeError( "", "double","Vect3", 9, argv[7] ));
  } 
  arg9 = static_cast< double >(val9);
  (arg1)->Vect3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7,(char const *)arg8,arg9);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_vect3__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Vect3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Vect3", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->Vect3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7,(char const *)arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_vect3__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Vect3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  (arg1)->Vect3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_vect3__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  double arg6 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Vect3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Vect3", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","Vect3", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Vect3", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Vect3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_vect3__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Vect3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Vect3", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","Vect3", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  (arg1)->Vect3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_vect3__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Vect3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Vect3", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Vect3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_vect3__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Vect3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Vect3((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_vect3(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[11];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 11) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_vect3__SWIG_7(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_vect3__SWIG_6(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglGraph_vect3__SWIG_5(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_vect3__SWIG_4(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  return _wrap_MglGraph_vect3__SWIG_3(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_vect3__SWIG_2(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_MglGraph_vect3__SWIG_1(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      int res = SWIG_AsCharPtrAndSize(argv[9], 0, NULL, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        return _wrap_MglGraph_vect3__SWIG_0(nargs, args, self);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 11, "MglGraph.vect3", 
    "    void MglGraph.vect3(mglData const &x, mglData const &y, mglData const &z, mglData const &ax, mglData const &ay, mglData const &az, char const *stl, double sVal, char const *opt)\n"
    "    void MglGraph.vect3(mglData const &x, mglData const &y, mglData const &z, mglData const &ax, mglData const &ay, mglData const &az, char const *stl, double sVal)\n"
    "    void MglGraph.vect3(mglData const &x, mglData const &y, mglData const &z, mglData const &ax, mglData const &ay, mglData const &az, char const *stl)\n"
    "    void MglGraph.vect3(mglData const &x, mglData const &y, mglData const &z, mglData const &ax, mglData const &ay, mglData const &az)\n"
    "    void MglGraph.vect3(mglData const &ax, mglData const &ay, mglData const &az, char const *stl, double sVal, char const *opt)\n"
    "    void MglGraph.vect3(mglData const &ax, mglData const &ay, mglData const &az, char const *stl, double sVal)\n"
    "    void MglGraph.vect3(mglData const &ax, mglData const &ay, mglData const &az, char const *stl)\n"
    "    void MglGraph.vect3(mglData const &ax, mglData const &ay, mglData const &az)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.flow

  call-seq:
    flow(x, y, ax, ay, sch="", opt="")
    flow(x, y, ax, ay, sch="")
    flow(x, y, ax, ay)
    flow(ax, ay, sch="", opt="")
    flow(ax, ay, sch="")
    flow(ax, ay)
    flow(x, y, z, ax, ay, az, sch="", opt="")
    flow(x, y, z, ax, ay, az, sch="")
    flow(x, y, z, ax, ay, az)
    flow(ax, ay, az, sch="", opt="")
    flow(ax, ay, az, sch="")
    flow(ax, ay, az)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_flow__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Flow", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Flow", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Flow", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Flow((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_flow__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Flow", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Flow", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Flow((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_flow__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Flow", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->Flow((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_flow__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Flow", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Flow", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Flow", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Flow((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_flow__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Flow", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Flow", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Flow((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_flow__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Flow", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->Flow((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_flow__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Flow", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Flow", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  res9 = SWIG_AsCharPtrAndSize(argv[7], &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), Ruby_Format_TypeError( "", "char const *","Flow", 9, argv[7] ));
  }
  arg9 = reinterpret_cast< char * >(buf9);
  (arg1)->Flow((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7,(char const *)arg8,(char const *)arg9);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_flow__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Flow", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Flow", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->Flow((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7,(char const *)arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_flow__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Flow", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  (arg1)->Flow((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_flow__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Flow", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Flow", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Flow", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Flow((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_flow__SWIG_10(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Flow", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Flow", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Flow((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_flow__SWIG_11(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Flow", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Flow((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_flow(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[10];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 10) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_flow__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_flow__SWIG_4(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_flow__SWIG_11(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_flow__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_flow__SWIG_10(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_flow__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_flow__SWIG_9(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_flow__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_flow__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  return _wrap_MglGraph_flow__SWIG_8(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_flow__SWIG_7(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_AsCharPtrAndSize(argv[8], 0, NULL, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_MglGraph_flow__SWIG_6(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 10, "MglGraph.flow", 
    "    void MglGraph.flow(mglData const &x, mglData const &y, mglData const &ax, mglData const &ay, char const *sch, char const *opt)\n"
    "    void MglGraph.flow(mglData const &x, mglData const &y, mglData const &ax, mglData const &ay, char const *sch)\n"
    "    void MglGraph.flow(mglData const &x, mglData const &y, mglData const &ax, mglData const &ay)\n"
    "    void MglGraph.flow(mglData const &ax, mglData const &ay, char const *sch, char const *opt)\n"
    "    void MglGraph.flow(mglData const &ax, mglData const &ay, char const *sch)\n"
    "    void MglGraph.flow(mglData const &ax, mglData const &ay)\n"
    "    void MglGraph.flow(mglData const &x, mglData const &y, mglData const &z, mglData const &ax, mglData const &ay, mglData const &az, char const *sch, char const *opt)\n"
    "    void MglGraph.flow(mglData const &x, mglData const &y, mglData const &z, mglData const &ax, mglData const &ay, mglData const &az, char const *sch)\n"
    "    void MglGraph.flow(mglData const &x, mglData const &y, mglData const &z, mglData const &ax, mglData const &ay, mglData const &az)\n"
    "    void MglGraph.flow(mglData const &ax, mglData const &ay, mglData const &az, char const *sch, char const *opt)\n"
    "    void MglGraph.flow(mglData const &ax, mglData const &ay, mglData const &az, char const *sch)\n"
    "    void MglGraph.flow(mglData const &ax, mglData const &ay, mglData const &az)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.flow_p

  call-seq:
    flow_p(p, x, y, ax, ay, sch="", opt="")
    flow_p(p, x, y, ax, ay, sch="")
    flow_p(p, x, y, ax, ay)
    flow_p(p, ax, ay, sch="", opt="")
    flow_p(p, ax, ay, sch="")
    flow_p(p, ax, ay)
    flow_p(p, x, y, z, ax, ay, az, sch="", opt="")
    flow_p(p, x, y, z, ax, ay, az, sch="")
    flow_p(p, x, y, z, ax, ay, az)
    flow_p(p, ax, ay, az, sch="", opt="")
    flow_p(p, ax, ay, az, sch="")
    flow_p(p, ax, ay, az)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_flow_p__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FlowP", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","FlowP", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","FlowP", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->FlowP(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7,(char const *)arg8);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_flow_p__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FlowP", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","FlowP", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->FlowP(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_flow_p__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FlowP", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  (arg1)->FlowP(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_flow_p__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FlowP", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","FlowP", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","FlowP", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->FlowP(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_flow_p__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FlowP", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","FlowP", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->FlowP(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_flow_p__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FlowP", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->FlowP(arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_flow_p__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  mglData *arg8 = 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  int res10 ;
  char *buf10 = 0 ;
  int alloc10 = 0 ;
  
  if ((argc < 9) || (argc > 9)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 9)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FlowP", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  {
    arg8 = GetMglData(argv[6]);
  }
  res9 = SWIG_AsCharPtrAndSize(argv[7], &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), Ruby_Format_TypeError( "", "char const *","FlowP", 9, argv[7] ));
  }
  arg9 = reinterpret_cast< char * >(buf9);
  res10 = SWIG_AsCharPtrAndSize(argv[8], &buf10, NULL, &alloc10);
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), Ruby_Format_TypeError( "", "char const *","FlowP", 10, argv[8] ));
  }
  arg10 = reinterpret_cast< char * >(buf10);
  (arg1)->FlowP(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7,(mglData const &)*arg8,(char const *)arg9,(char const *)arg10);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  {
    delete arg8;
  }
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  if (alloc10 == SWIG_NEWOBJ) delete[] buf10;
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  {
    delete arg8;
  }
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  if (alloc10 == SWIG_NEWOBJ) delete[] buf10;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_flow_p__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  mglData *arg8 = 0 ;
  char *arg9 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FlowP", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  {
    arg8 = GetMglData(argv[6]);
  }
  res9 = SWIG_AsCharPtrAndSize(argv[7], &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), Ruby_Format_TypeError( "", "char const *","FlowP", 9, argv[7] ));
  }
  arg9 = reinterpret_cast< char * >(buf9);
  (arg1)->FlowP(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7,(mglData const &)*arg8,(char const *)arg9);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  {
    delete arg8;
  }
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  {
    delete arg8;
  }
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_flow_p__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  mglData *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FlowP", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  {
    arg8 = GetMglData(argv[6]);
  }
  (arg1)->FlowP(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7,(mglData const &)*arg8);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  {
    delete arg8;
  }
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  {
    delete arg8;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_flow_p__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FlowP", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","FlowP", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","FlowP", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->FlowP(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_flow_p__SWIG_10(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FlowP", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","FlowP", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->FlowP(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_flow_p__SWIG_11(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FlowP", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->FlowP(arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_flow_p(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[11];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 11) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_flow_p__SWIG_5(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_flow_p__SWIG_4(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_flow_p__SWIG_11(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_flow_p__SWIG_3(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_flow_p__SWIG_10(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                return _wrap_MglGraph_flow_p__SWIG_2(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_flow_p__SWIG_9(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_flow_p__SWIG_1(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_flow_p__SWIG_0(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  {
                    _v = (TYPE(argv[7])==T_ARRAY);
                    if (!(_v)) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_mglData, 0);
                      _v = SWIG_CheckState(res);
                    }
                  }
                  if (_v) {
                    return _wrap_MglGraph_flow_p__SWIG_8(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  {
                    _v = (TYPE(argv[7])==T_ARRAY);
                    if (!(_v)) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_mglData, 0);
                      _v = SWIG_CheckState(res);
                    }
                  }
                  if (_v) {
                    int res = SWIG_AsCharPtrAndSize(argv[8], 0, NULL, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_MglGraph_flow_p__SWIG_7(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  {
                    _v = (TYPE(argv[7])==T_ARRAY);
                    if (!(_v)) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_mglData, 0);
                      _v = SWIG_CheckState(res);
                    }
                  }
                  if (_v) {
                    int res = SWIG_AsCharPtrAndSize(argv[8], 0, NULL, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      int res = SWIG_AsCharPtrAndSize(argv[9], 0, NULL, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        return _wrap_MglGraph_flow_p__SWIG_6(nargs, args, self);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 11, "MglGraph.flow_p", 
    "    void MglGraph.flow_p(mglPoint p, mglData const &x, mglData const &y, mglData const &ax, mglData const &ay, char const *sch, char const *opt)\n"
    "    void MglGraph.flow_p(mglPoint p, mglData const &x, mglData const &y, mglData const &ax, mglData const &ay, char const *sch)\n"
    "    void MglGraph.flow_p(mglPoint p, mglData const &x, mglData const &y, mglData const &ax, mglData const &ay)\n"
    "    void MglGraph.flow_p(mglPoint p, mglData const &ax, mglData const &ay, char const *sch, char const *opt)\n"
    "    void MglGraph.flow_p(mglPoint p, mglData const &ax, mglData const &ay, char const *sch)\n"
    "    void MglGraph.flow_p(mglPoint p, mglData const &ax, mglData const &ay)\n"
    "    void MglGraph.flow_p(mglPoint p, mglData const &x, mglData const &y, mglData const &z, mglData const &ax, mglData const &ay, mglData const &az, char const *sch, char const *opt)\n"
    "    void MglGraph.flow_p(mglPoint p, mglData const &x, mglData const &y, mglData const &z, mglData const &ax, mglData const &ay, mglData const &az, char const *sch)\n"
    "    void MglGraph.flow_p(mglPoint p, mglData const &x, mglData const &y, mglData const &z, mglData const &ax, mglData const &ay, mglData const &az)\n"
    "    void MglGraph.flow_p(mglPoint p, mglData const &ax, mglData const &ay, mglData const &az, char const *sch, char const *opt)\n"
    "    void MglGraph.flow_p(mglPoint p, mglData const &ax, mglData const &ay, mglData const &az, char const *sch)\n"
    "    void MglGraph.flow_p(mglPoint p, mglData const &ax, mglData const &ay, mglData const &az)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.grad

  call-seq:
    grad(x, y, z, phi, sch="", opt="")
    grad(x, y, z, phi, sch="")
    grad(x, y, z, phi)
    grad(x, y, phi, sch="", opt="")
    grad(x, y, phi, sch="")
    grad(x, y, phi)
    grad(phi, sch="", opt="")
    grad(phi, sch="")
    grad(phi)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_grad__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Grad", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Grad", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Grad", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Grad((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_grad__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Grad", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Grad", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Grad((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_grad__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Grad", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->Grad((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_grad__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Grad", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Grad", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Grad", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Grad((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_grad__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Grad", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Grad", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Grad((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_grad__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Grad", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Grad((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_grad__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Grad", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Grad", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Grad", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Grad((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_grad__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Grad", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Grad", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Grad((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_grad__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Grad", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->Grad((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_grad(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_grad__SWIG_8(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_grad__SWIG_7(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_grad__SWIG_6(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_grad__SWIG_5(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_grad__SWIG_4(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_grad__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_grad__SWIG_3(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_grad__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_grad__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.grad", 
    "    void MglGraph.grad(mglData const &x, mglData const &y, mglData const &z, mglData const &phi, char const *sch, char const *opt)\n"
    "    void MglGraph.grad(mglData const &x, mglData const &y, mglData const &z, mglData const &phi, char const *sch)\n"
    "    void MglGraph.grad(mglData const &x, mglData const &y, mglData const &z, mglData const &phi)\n"
    "    void MglGraph.grad(mglData const &x, mglData const &y, mglData const &phi, char const *sch, char const *opt)\n"
    "    void MglGraph.grad(mglData const &x, mglData const &y, mglData const &phi, char const *sch)\n"
    "    void MglGraph.grad(mglData const &x, mglData const &y, mglData const &phi)\n"
    "    void MglGraph.grad(mglData const &phi, char const *sch, char const *opt)\n"
    "    void MglGraph.grad(mglData const &phi, char const *sch)\n"
    "    void MglGraph.grad(mglData const &phi)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.pipe

  call-seq:
    pipe(x, y, ax, ay, sch="", r0=0.05, opt="")
    pipe(x, y, ax, ay, sch="", r0=0.05)
    pipe(x, y, ax, ay, sch="")
    pipe(x, y, ax, ay)
    pipe(ax, ay, sch="", r0=0.05, opt="")
    pipe(ax, ay, sch="", r0=0.05)
    pipe(ax, ay, sch="")
    pipe(ax, ay)
    pipe(x, y, z, ax, ay, az, sch="", r0=0.05, opt="")
    pipe(x, y, z, ax, ay, az, sch="", r0=0.05)
    pipe(x, y, z, ax, ay, az, sch="")
    pipe(x, y, z, ax, ay, az)
    pipe(ax, ay, az, sch="", r0=0.05, opt="")
    pipe(ax, ay, az, sch="", r0=0.05)
    pipe(ax, ay, az, sch="")
    pipe(ax, ay, az)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_pipe__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  double arg7 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Pipe", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Pipe", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","Pipe", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Pipe", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->Pipe((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,arg7,(char const *)arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_pipe__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Pipe", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Pipe", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","Pipe", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  (arg1)->Pipe((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_pipe__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Pipe", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Pipe", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Pipe((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_pipe__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Pipe", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->Pipe((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_pipe__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  double arg5 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Pipe", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Pipe", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","Pipe", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Pipe", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Pipe((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_pipe__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Pipe", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Pipe", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","Pipe", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->Pipe((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_pipe__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Pipe", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Pipe", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Pipe((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_pipe__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Pipe", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->Pipe((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_pipe__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  char *arg8 = (char *) 0 ;
  double arg9 ;
  char *arg10 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  int res10 ;
  char *buf10 = 0 ;
  int alloc10 = 0 ;
  
  if ((argc < 9) || (argc > 9)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 9)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Pipe", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Pipe", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  ecode9 = SWIG_AsVal_double(argv[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), Ruby_Format_TypeError( "", "double","Pipe", 9, argv[7] ));
  } 
  arg9 = static_cast< double >(val9);
  res10 = SWIG_AsCharPtrAndSize(argv[8], &buf10, NULL, &alloc10);
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), Ruby_Format_TypeError( "", "char const *","Pipe", 10, argv[8] ));
  }
  arg10 = reinterpret_cast< char * >(buf10);
  (arg1)->Pipe((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7,(char const *)arg8,arg9,(char const *)arg10);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc10 == SWIG_NEWOBJ) delete[] buf10;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc10 == SWIG_NEWOBJ) delete[] buf10;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_pipe__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  char *arg8 = (char *) 0 ;
  double arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Pipe", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Pipe", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  ecode9 = SWIG_AsVal_double(argv[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), Ruby_Format_TypeError( "", "double","Pipe", 9, argv[7] ));
  } 
  arg9 = static_cast< double >(val9);
  (arg1)->Pipe((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7,(char const *)arg8,arg9);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_pipe__SWIG_10(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Pipe", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Pipe", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->Pipe((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7,(char const *)arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_pipe__SWIG_11(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Pipe", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  (arg1)->Pipe((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_pipe__SWIG_12(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  double arg6 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Pipe", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Pipe", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","Pipe", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Pipe", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Pipe((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_pipe__SWIG_13(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Pipe", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Pipe", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","Pipe", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  (arg1)->Pipe((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_pipe__SWIG_14(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Pipe", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Pipe", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Pipe((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_pipe__SWIG_15(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Pipe", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Pipe((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_pipe(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[11];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 11) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_pipe__SWIG_7(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_pipe__SWIG_6(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_pipe__SWIG_15(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_pipe__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_pipe__SWIG_14(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_pipe__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_pipe__SWIG_4(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglGraph_pipe__SWIG_13(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_pipe__SWIG_2(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_pipe__SWIG_12(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_MglGraph_pipe__SWIG_1(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  return _wrap_MglGraph_pipe__SWIG_11(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_pipe__SWIG_0(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_pipe__SWIG_10(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_MglGraph_pipe__SWIG_9(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      int res = SWIG_AsCharPtrAndSize(argv[9], 0, NULL, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        return _wrap_MglGraph_pipe__SWIG_8(nargs, args, self);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 11, "MglGraph.pipe", 
    "    void MglGraph.pipe(mglData const &x, mglData const &y, mglData const &ax, mglData const &ay, char const *sch, double r0, char const *opt)\n"
    "    void MglGraph.pipe(mglData const &x, mglData const &y, mglData const &ax, mglData const &ay, char const *sch, double r0)\n"
    "    void MglGraph.pipe(mglData const &x, mglData const &y, mglData const &ax, mglData const &ay, char const *sch)\n"
    "    void MglGraph.pipe(mglData const &x, mglData const &y, mglData const &ax, mglData const &ay)\n"
    "    void MglGraph.pipe(mglData const &ax, mglData const &ay, char const *sch, double r0, char const *opt)\n"
    "    void MglGraph.pipe(mglData const &ax, mglData const &ay, char const *sch, double r0)\n"
    "    void MglGraph.pipe(mglData const &ax, mglData const &ay, char const *sch)\n"
    "    void MglGraph.pipe(mglData const &ax, mglData const &ay)\n"
    "    void MglGraph.pipe(mglData const &x, mglData const &y, mglData const &z, mglData const &ax, mglData const &ay, mglData const &az, char const *sch, double r0, char const *opt)\n"
    "    void MglGraph.pipe(mglData const &x, mglData const &y, mglData const &z, mglData const &ax, mglData const &ay, mglData const &az, char const *sch, double r0)\n"
    "    void MglGraph.pipe(mglData const &x, mglData const &y, mglData const &z, mglData const &ax, mglData const &ay, mglData const &az, char const *sch)\n"
    "    void MglGraph.pipe(mglData const &x, mglData const &y, mglData const &z, mglData const &ax, mglData const &ay, mglData const &az)\n"
    "    void MglGraph.pipe(mglData const &ax, mglData const &ay, mglData const &az, char const *sch, double r0, char const *opt)\n"
    "    void MglGraph.pipe(mglData const &ax, mglData const &ay, mglData const &az, char const *sch, double r0)\n"
    "    void MglGraph.pipe(mglData const &ax, mglData const &ay, mglData const &az, char const *sch)\n"
    "    void MglGraph.pipe(mglData const &ax, mglData const &ay, mglData const &az)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.dens_x

  call-seq:
    dens_x(a, stl="", sVal=NaN, opt="")
    dens_x(a, stl="", sVal=NaN)
    dens_x(a, stl="")
    dens_x(a)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_dens_x__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","DensX", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","DensX", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","DensX", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","DensX", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->DensX((mglData const &)*arg2,(char const *)arg3,arg4,(char const *)arg5);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dens_x__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","DensX", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","DensX", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","DensX", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->DensX((mglData const &)*arg2,(char const *)arg3,arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dens_x__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","DensX", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","DensX", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->DensX((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dens_x__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","DensX", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->DensX((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_dens_x(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_dens_x__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_dens_x__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_dens_x__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_dens_x__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglGraph.dens_x", 
    "    void MglGraph.dens_x(mglData const &a, char const *stl, double sVal, char const *opt)\n"
    "    void MglGraph.dens_x(mglData const &a, char const *stl, double sVal)\n"
    "    void MglGraph.dens_x(mglData const &a, char const *stl)\n"
    "    void MglGraph.dens_x(mglData const &a)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.dens_y

  call-seq:
    dens_y(a, stl="", sVal=NaN, opt="")
    dens_y(a, stl="", sVal=NaN)
    dens_y(a, stl="")
    dens_y(a)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_dens_y__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","DensY", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","DensY", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","DensY", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","DensY", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->DensY((mglData const &)*arg2,(char const *)arg3,arg4,(char const *)arg5);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dens_y__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","DensY", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","DensY", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","DensY", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->DensY((mglData const &)*arg2,(char const *)arg3,arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dens_y__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","DensY", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","DensY", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->DensY((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dens_y__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","DensY", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->DensY((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_dens_y(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_dens_y__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_dens_y__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_dens_y__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_dens_y__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglGraph.dens_y", 
    "    void MglGraph.dens_y(mglData const &a, char const *stl, double sVal, char const *opt)\n"
    "    void MglGraph.dens_y(mglData const &a, char const *stl, double sVal)\n"
    "    void MglGraph.dens_y(mglData const &a, char const *stl)\n"
    "    void MglGraph.dens_y(mglData const &a)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.dens_z

  call-seq:
    dens_z(a, stl="", sVal=NaN, opt="")
    dens_z(a, stl="", sVal=NaN)
    dens_z(a, stl="")
    dens_z(a)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_dens_z__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","DensZ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","DensZ", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","DensZ", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","DensZ", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->DensZ((mglData const &)*arg2,(char const *)arg3,arg4,(char const *)arg5);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dens_z__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","DensZ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","DensZ", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","DensZ", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->DensZ((mglData const &)*arg2,(char const *)arg3,arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dens_z__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","DensZ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","DensZ", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->DensZ((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dens_z__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","DensZ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->DensZ((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_dens_z(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_dens_z__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_dens_z__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_dens_z__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_dens_z__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglGraph.dens_z", 
    "    void MglGraph.dens_z(mglData const &a, char const *stl, double sVal, char const *opt)\n"
    "    void MglGraph.dens_z(mglData const &a, char const *stl, double sVal)\n"
    "    void MglGraph.dens_z(mglData const &a, char const *stl)\n"
    "    void MglGraph.dens_z(mglData const &a)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.cont_x

  call-seq:
    cont_x(a, stl="", sVal=NaN, opt="")
    cont_x(a, stl="", sVal=NaN)
    cont_x(a, stl="")
    cont_x(a)
    cont_x(v, a, stl="", sVal=NaN, opt="")
    cont_x(v, a, stl="", sVal=NaN)
    cont_x(v, a, stl="")
    cont_x(v, a)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_cont_x__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContX", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","ContX", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","ContX", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","ContX", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->ContX((mglData const &)*arg2,(char const *)arg3,arg4,(char const *)arg5);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_x__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContX", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","ContX", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","ContX", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->ContX((mglData const &)*arg2,(char const *)arg3,arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_x__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContX", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","ContX", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->ContX((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_x__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContX", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->ContX((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_x__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  double arg5 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContX", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContX", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","ContX", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","ContX", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->ContX((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_x__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContX", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContX", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","ContX", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->ContX((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_x__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContX", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContX", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->ContX((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_x__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContX", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->ContX((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_cont_x(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_cont_x__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_cont_x__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_cont_x__SWIG_7(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_cont_x__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_cont_x__SWIG_6(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_cont_x__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_cont_x__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_cont_x__SWIG_4(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.cont_x", 
    "    void MglGraph.cont_x(mglData const &a, char const *stl, double sVal, char const *opt)\n"
    "    void MglGraph.cont_x(mglData const &a, char const *stl, double sVal)\n"
    "    void MglGraph.cont_x(mglData const &a, char const *stl)\n"
    "    void MglGraph.cont_x(mglData const &a)\n"
    "    void MglGraph.cont_x(mglData const &v, mglData const &a, char const *stl, double sVal, char const *opt)\n"
    "    void MglGraph.cont_x(mglData const &v, mglData const &a, char const *stl, double sVal)\n"
    "    void MglGraph.cont_x(mglData const &v, mglData const &a, char const *stl)\n"
    "    void MglGraph.cont_x(mglData const &v, mglData const &a)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.cont_y

  call-seq:
    cont_y(a, stl="", sVal=NaN, opt="")
    cont_y(a, stl="", sVal=NaN)
    cont_y(a, stl="")
    cont_y(a)
    cont_y(v, a, stl="", sVal=NaN, opt="")
    cont_y(v, a, stl="", sVal=NaN)
    cont_y(v, a, stl="")
    cont_y(v, a)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_cont_y__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContY", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","ContY", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","ContY", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","ContY", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->ContY((mglData const &)*arg2,(char const *)arg3,arg4,(char const *)arg5);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_y__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContY", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","ContY", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","ContY", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->ContY((mglData const &)*arg2,(char const *)arg3,arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_y__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContY", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","ContY", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->ContY((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_y__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContY", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->ContY((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_y__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  double arg5 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContY", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContY", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","ContY", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","ContY", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->ContY((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_y__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContY", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContY", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","ContY", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->ContY((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_y__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContY", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContY", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->ContY((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_y__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContY", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->ContY((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_cont_y(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_cont_y__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_cont_y__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_cont_y__SWIG_7(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_cont_y__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_cont_y__SWIG_6(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_cont_y__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_cont_y__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_cont_y__SWIG_4(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.cont_y", 
    "    void MglGraph.cont_y(mglData const &a, char const *stl, double sVal, char const *opt)\n"
    "    void MglGraph.cont_y(mglData const &a, char const *stl, double sVal)\n"
    "    void MglGraph.cont_y(mglData const &a, char const *stl)\n"
    "    void MglGraph.cont_y(mglData const &a)\n"
    "    void MglGraph.cont_y(mglData const &v, mglData const &a, char const *stl, double sVal, char const *opt)\n"
    "    void MglGraph.cont_y(mglData const &v, mglData const &a, char const *stl, double sVal)\n"
    "    void MglGraph.cont_y(mglData const &v, mglData const &a, char const *stl)\n"
    "    void MglGraph.cont_y(mglData const &v, mglData const &a)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.cont_z

  call-seq:
    cont_z(a, stl="", sVal=NaN, opt="")
    cont_z(a, stl="", sVal=NaN)
    cont_z(a, stl="")
    cont_z(a)
    cont_z(v, a, stl="", sVal=NaN, opt="")
    cont_z(v, a, stl="", sVal=NaN)
    cont_z(v, a, stl="")
    cont_z(v, a)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_cont_z__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContZ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","ContZ", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","ContZ", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","ContZ", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->ContZ((mglData const &)*arg2,(char const *)arg3,arg4,(char const *)arg5);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_z__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContZ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","ContZ", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","ContZ", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->ContZ((mglData const &)*arg2,(char const *)arg3,arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_z__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContZ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","ContZ", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->ContZ((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_z__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContZ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->ContZ((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_z__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  double arg5 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContZ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContZ", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","ContZ", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","ContZ", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->ContZ((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_z__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContZ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContZ", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","ContZ", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->ContZ((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_z__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContZ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContZ", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->ContZ((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_z__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContZ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->ContZ((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_cont_z(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_cont_z__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_cont_z__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_cont_z__SWIG_7(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_cont_z__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_cont_z__SWIG_6(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_cont_z__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_cont_z__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_cont_z__SWIG_4(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.cont_z", 
    "    void MglGraph.cont_z(mglData const &a, char const *stl, double sVal, char const *opt)\n"
    "    void MglGraph.cont_z(mglData const &a, char const *stl, double sVal)\n"
    "    void MglGraph.cont_z(mglData const &a, char const *stl)\n"
    "    void MglGraph.cont_z(mglData const &a)\n"
    "    void MglGraph.cont_z(mglData const &v, mglData const &a, char const *stl, double sVal, char const *opt)\n"
    "    void MglGraph.cont_z(mglData const &v, mglData const &a, char const *stl, double sVal)\n"
    "    void MglGraph.cont_z(mglData const &v, mglData const &a, char const *stl)\n"
    "    void MglGraph.cont_z(mglData const &v, mglData const &a)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.cont_fx

  call-seq:
    cont_fx(a, stl="", sVal=NaN, opt="")
    cont_fx(a, stl="", sVal=NaN)
    cont_fx(a, stl="")
    cont_fx(a)
    cont_fx(v, a, stl="", sVal=NaN, opt="")
    cont_fx(v, a, stl="", sVal=NaN)
    cont_fx(v, a, stl="")
    cont_fx(v, a)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_cont_fx__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContFX", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","ContFX", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","ContFX", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","ContFX", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->ContFX((mglData const &)*arg2,(char const *)arg3,arg4,(char const *)arg5);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_fx__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContFX", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","ContFX", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","ContFX", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->ContFX((mglData const &)*arg2,(char const *)arg3,arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_fx__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContFX", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","ContFX", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->ContFX((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_fx__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContFX", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->ContFX((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_fx__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  double arg5 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContFX", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContFX", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","ContFX", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","ContFX", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->ContFX((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_fx__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContFX", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContFX", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","ContFX", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->ContFX((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_fx__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContFX", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContFX", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->ContFX((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_fx__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContFX", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->ContFX((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_cont_fx(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_cont_fx__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_cont_fx__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_cont_fx__SWIG_7(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_cont_fx__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_cont_fx__SWIG_6(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_cont_fx__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_cont_fx__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_cont_fx__SWIG_4(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.cont_fx", 
    "    void MglGraph.cont_fx(mglData const &a, char const *stl, double sVal, char const *opt)\n"
    "    void MglGraph.cont_fx(mglData const &a, char const *stl, double sVal)\n"
    "    void MglGraph.cont_fx(mglData const &a, char const *stl)\n"
    "    void MglGraph.cont_fx(mglData const &a)\n"
    "    void MglGraph.cont_fx(mglData const &v, mglData const &a, char const *stl, double sVal, char const *opt)\n"
    "    void MglGraph.cont_fx(mglData const &v, mglData const &a, char const *stl, double sVal)\n"
    "    void MglGraph.cont_fx(mglData const &v, mglData const &a, char const *stl)\n"
    "    void MglGraph.cont_fx(mglData const &v, mglData const &a)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.cont_fy

  call-seq:
    cont_fy(a, stl="", sVal=NaN, opt="")
    cont_fy(a, stl="", sVal=NaN)
    cont_fy(a, stl="")
    cont_fy(a)
    cont_fy(v, a, stl="", sVal=NaN, opt="")
    cont_fy(v, a, stl="", sVal=NaN)
    cont_fy(v, a, stl="")
    cont_fy(v, a)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_cont_fy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContFY", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","ContFY", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","ContFY", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","ContFY", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->ContFY((mglData const &)*arg2,(char const *)arg3,arg4,(char const *)arg5);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_fy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContFY", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","ContFY", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","ContFY", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->ContFY((mglData const &)*arg2,(char const *)arg3,arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_fy__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContFY", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","ContFY", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->ContFY((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_fy__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContFY", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->ContFY((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_fy__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  double arg5 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContFY", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContFY", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","ContFY", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","ContFY", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->ContFY((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_fy__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContFY", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContFY", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","ContFY", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->ContFY((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_fy__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContFY", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContFY", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->ContFY((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_fy__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContFY", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->ContFY((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_cont_fy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_cont_fy__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_cont_fy__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_cont_fy__SWIG_7(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_cont_fy__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_cont_fy__SWIG_6(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_cont_fy__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_cont_fy__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_cont_fy__SWIG_4(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.cont_fy", 
    "    void MglGraph.cont_fy(mglData const &a, char const *stl, double sVal, char const *opt)\n"
    "    void MglGraph.cont_fy(mglData const &a, char const *stl, double sVal)\n"
    "    void MglGraph.cont_fy(mglData const &a, char const *stl)\n"
    "    void MglGraph.cont_fy(mglData const &a)\n"
    "    void MglGraph.cont_fy(mglData const &v, mglData const &a, char const *stl, double sVal, char const *opt)\n"
    "    void MglGraph.cont_fy(mglData const &v, mglData const &a, char const *stl, double sVal)\n"
    "    void MglGraph.cont_fy(mglData const &v, mglData const &a, char const *stl)\n"
    "    void MglGraph.cont_fy(mglData const &v, mglData const &a)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.cont_fz

  call-seq:
    cont_fz(a, stl="", sVal=NaN, opt="")
    cont_fz(a, stl="", sVal=NaN)
    cont_fz(a, stl="")
    cont_fz(a)
    cont_fz(v, a, stl="", sVal=NaN, opt="")
    cont_fz(v, a, stl="", sVal=NaN)
    cont_fz(v, a, stl="")
    cont_fz(v, a)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_cont_fz__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContFZ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","ContFZ", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","ContFZ", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","ContFZ", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->ContFZ((mglData const &)*arg2,(char const *)arg3,arg4,(char const *)arg5);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_fz__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContFZ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","ContFZ", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","ContFZ", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->ContFZ((mglData const &)*arg2,(char const *)arg3,arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_fz__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContFZ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","ContFZ", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->ContFZ((mglData const &)*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_fz__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContFZ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  (arg1)->ContFZ((mglData const &)*arg2);
  {
    delete arg2;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_fz__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  double arg5 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContFZ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContFZ", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","ContFZ", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","ContFZ", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->ContFZ((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_fz__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContFZ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContFZ", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","ContFZ", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->ContFZ((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_fz__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContFZ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","ContFZ", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->ContFZ((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_cont_fz__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","ContFZ", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  (arg1)->ContFZ((mglData const &)*arg2,(mglData const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_cont_fz(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_cont_fz__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_cont_fz__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_cont_fz__SWIG_7(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_cont_fz__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_cont_fz__SWIG_6(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_cont_fz__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_cont_fz__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_cont_fz__SWIG_4(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.cont_fz", 
    "    void MglGraph.cont_fz(mglData const &a, char const *stl, double sVal, char const *opt)\n"
    "    void MglGraph.cont_fz(mglData const &a, char const *stl, double sVal)\n"
    "    void MglGraph.cont_fz(mglData const &a, char const *stl)\n"
    "    void MglGraph.cont_fz(mglData const &a)\n"
    "    void MglGraph.cont_fz(mglData const &v, mglData const &a, char const *stl, double sVal, char const *opt)\n"
    "    void MglGraph.cont_fz(mglData const &v, mglData const &a, char const *stl, double sVal)\n"
    "    void MglGraph.cont_fz(mglData const &v, mglData const &a, char const *stl)\n"
    "    void MglGraph.cont_fz(mglData const &v, mglData const &a)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.fplot

  call-seq:
    fplot(fy, stl="", opt="")
    fplot(fy, stl="")
    fplot(fy)
    fplot(fx, fy, fz, stl, opt="")
    fplot(fx, fy, fz, stl)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_fplot__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","FPlot", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","FPlot", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","FPlot", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->FPlot((char const *)arg2,(char const *)arg3,(char const *)arg4);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fplot__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","FPlot", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","FPlot", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->FPlot((char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fplot__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","FPlot", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->FPlot((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fplot__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","FPlot", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","FPlot", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","FPlot", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","FPlot", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","FPlot", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->FPlot((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fplot__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","FPlot", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","FPlot", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","FPlot", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","FPlot", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->FPlot((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_fplot(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_fplot__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_fplot__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_fplot__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_fplot__SWIG_4(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_fplot__SWIG_3(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.fplot", 
    "    void MglGraph.fplot(char const *fy, char const *stl, char const *opt)\n"
    "    void MglGraph.fplot(char const *fy, char const *stl)\n"
    "    void MglGraph.fplot(char const *fy)\n"
    "    void MglGraph.fplot(char const *fx, char const *fy, char const *fz, char const *stl, char const *opt)\n"
    "    void MglGraph.fplot(char const *fx, char const *fy, char const *fz, char const *stl)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.fsurf

  call-seq:
    fsurf(fz, stl="", opt="")
    fsurf(fz, stl="")
    fsurf(fz)
    fsurf(fx, fy, fz, stl, opt="")
    fsurf(fx, fy, fz, stl)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_fsurf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FSurf", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","FSurf", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","FSurf", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","FSurf", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->FSurf((char const *)arg2,(char const *)arg3,(char const *)arg4);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fsurf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FSurf", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","FSurf", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","FSurf", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->FSurf((char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fsurf__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FSurf", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","FSurf", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->FSurf((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fsurf__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FSurf", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","FSurf", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","FSurf", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","FSurf", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","FSurf", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","FSurf", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->FSurf((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fsurf__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FSurf", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","FSurf", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","FSurf", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","FSurf", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","FSurf", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->FSurf((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_fsurf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_fsurf__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_fsurf__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_fsurf__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_fsurf__SWIG_4(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_fsurf__SWIG_3(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.fsurf", 
    "    void MglGraph.fsurf(char const *fz, char const *stl, char const *opt)\n"
    "    void MglGraph.fsurf(char const *fz, char const *stl)\n"
    "    void MglGraph.fsurf(char const *fz)\n"
    "    void MglGraph.fsurf(char const *fx, char const *fy, char const *fz, char const *stl, char const *opt)\n"
    "    void MglGraph.fsurf(char const *fx, char const *fy, char const *fz, char const *stl)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.tri_plot

  call-seq:
    tri_plot(nums, x, y, z, c, sch="", opt="")
    tri_plot(nums, x, y, z, c, sch="")
    tri_plot(nums, x, y, z, c)
    tri_plot(nums, x, y, z, sch="", opt="")
    tri_plot(nums, x, y, z, sch="")
    tri_plot(nums, x, y, z)
    tri_plot(nums, x, y, sch="", opt="")
    tri_plot(nums, x, y, sch="")
    tri_plot(nums, x, y)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_tri_plot__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","TriPlot", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","TriPlot", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->TriPlot((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7,(char const *)arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tri_plot__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","TriPlot", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->TriPlot((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tri_plot__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  (arg1)->TriPlot((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tri_plot__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","TriPlot", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","TriPlot", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->TriPlot((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tri_plot__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","TriPlot", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->TriPlot((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tri_plot__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->TriPlot((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tri_plot__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","TriPlot", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","TriPlot", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->TriPlot((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tri_plot__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","TriPlot", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->TriPlot((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tri_plot__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->TriPlot((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_tri_plot(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[9];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 9) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_tri_plot__SWIG_8(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_tri_plot__SWIG_7(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_tri_plot__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_tri_plot__SWIG_6(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_tri_plot__SWIG_4(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                return _wrap_MglGraph_tri_plot__SWIG_2(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_tri_plot__SWIG_3(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_tri_plot__SWIG_1(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_tri_plot__SWIG_0(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 9, "MglGraph.tri_plot", 
    "    void MglGraph.tri_plot(mglData const &nums, mglData const &x, mglData const &y, mglData const &z, mglData const &c, char const *sch, char const *opt)\n"
    "    void MglGraph.tri_plot(mglData const &nums, mglData const &x, mglData const &y, mglData const &z, mglData const &c, char const *sch)\n"
    "    void MglGraph.tri_plot(mglData const &nums, mglData const &x, mglData const &y, mglData const &z, mglData const &c)\n"
    "    void MglGraph.tri_plot(mglData const &nums, mglData const &x, mglData const &y, mglData const &z, char const *sch, char const *opt)\n"
    "    void MglGraph.tri_plot(mglData const &nums, mglData const &x, mglData const &y, mglData const &z, char const *sch)\n"
    "    void MglGraph.tri_plot(mglData const &nums, mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.tri_plot(mglData const &nums, mglData const &x, mglData const &y, char const *sch, char const *opt)\n"
    "    void MglGraph.tri_plot(mglData const &nums, mglData const &x, mglData const &y, char const *sch)\n"
    "    void MglGraph.tri_plot(mglData const &nums, mglData const &x, mglData const &y)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.quad_plot

  call-seq:
    quad_plot(nums, x, y, z, c, sch="", opt="")
    quad_plot(nums, x, y, z, c, sch="")
    quad_plot(nums, x, y, z, c)
    quad_plot(nums, x, y, z, sch="", opt="")
    quad_plot(nums, x, y, z, sch="")
    quad_plot(nums, x, y, z)
    quad_plot(nums, x, y, sch="", opt="")
    quad_plot(nums, x, y, sch="")
    quad_plot(nums, x, y)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_quad_plot__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","QuadPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","QuadPlot", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","QuadPlot", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->QuadPlot((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7,(char const *)arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_quad_plot__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","QuadPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","QuadPlot", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->QuadPlot((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_quad_plot__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","QuadPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  (arg1)->QuadPlot((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_quad_plot__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","QuadPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","QuadPlot", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","QuadPlot", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->QuadPlot((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_quad_plot__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","QuadPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","QuadPlot", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->QuadPlot((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_quad_plot__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","QuadPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->QuadPlot((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_quad_plot__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","QuadPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","QuadPlot", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","QuadPlot", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->QuadPlot((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_quad_plot__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","QuadPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","QuadPlot", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->QuadPlot((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_quad_plot__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","QuadPlot", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->QuadPlot((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_quad_plot(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[9];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 9) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_quad_plot__SWIG_8(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_quad_plot__SWIG_7(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_quad_plot__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_quad_plot__SWIG_6(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_quad_plot__SWIG_4(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                return _wrap_MglGraph_quad_plot__SWIG_2(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_quad_plot__SWIG_3(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_quad_plot__SWIG_1(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_quad_plot__SWIG_0(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 9, "MglGraph.quad_plot", 
    "    void MglGraph.quad_plot(mglData const &nums, mglData const &x, mglData const &y, mglData const &z, mglData const &c, char const *sch, char const *opt)\n"
    "    void MglGraph.quad_plot(mglData const &nums, mglData const &x, mglData const &y, mglData const &z, mglData const &c, char const *sch)\n"
    "    void MglGraph.quad_plot(mglData const &nums, mglData const &x, mglData const &y, mglData const &z, mglData const &c)\n"
    "    void MglGraph.quad_plot(mglData const &nums, mglData const &x, mglData const &y, mglData const &z, char const *sch, char const *opt)\n"
    "    void MglGraph.quad_plot(mglData const &nums, mglData const &x, mglData const &y, mglData const &z, char const *sch)\n"
    "    void MglGraph.quad_plot(mglData const &nums, mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.quad_plot(mglData const &nums, mglData const &x, mglData const &y, char const *sch, char const *opt)\n"
    "    void MglGraph.quad_plot(mglData const &nums, mglData const &x, mglData const &y, char const *sch)\n"
    "    void MglGraph.quad_plot(mglData const &nums, mglData const &x, mglData const &y)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.tri_cont

  call-seq:
    tri_cont(nums, x, y, z, sch="", opt="")
    tri_cont(nums, x, y, z, sch="")
    tri_cont(nums, x, y, z)
    tri_cont(nums, x, y, z, a, sch="", opt="")
    tri_cont(nums, x, y, z, a, sch="")
    tri_cont(nums, x, y, z, a)
    tri_cont(v, nums, x, y, z, a, sch="", opt="")
    tri_cont(v, nums, x, y, z, a, sch="")
    tri_cont(v, nums, x, y, z, a)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_tri_cont__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriCont", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","TriCont", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","TriCont", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->TriCont((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tri_cont__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriCont", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","TriCont", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->TriCont((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tri_cont__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriCont", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->TriCont((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.tri_cont_v

  call-seq:
    tri_cont_v(v, nums, x, y, z, sch="", opt="")
    tri_cont_v(v, nums, x, y, z, sch="")
    tri_cont_v(v, nums, x, y, z)
    tri_cont_v(v, nums, x, y, z, a, sch="", opt="")
    tri_cont_v(v, nums, x, y, z, a, sch="")
    tri_cont_v(v, nums, x, y, z, a)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_tri_cont_v__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriContV", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","TriContV", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","TriContV", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->TriContV((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7,(char const *)arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tri_cont_v__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriContV", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","TriContV", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->TriContV((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tri_cont_v__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriContV", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  (arg1)->TriContV((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.tri_cont

  call-seq:
    tri_cont(nums, x, y, z, sch="", opt="")
    tri_cont(nums, x, y, z, sch="")
    tri_cont(nums, x, y, z)
    tri_cont(nums, x, y, z, a, sch="", opt="")
    tri_cont(nums, x, y, z, a, sch="")
    tri_cont(nums, x, y, z, a)
    tri_cont(v, nums, x, y, z, a, sch="", opt="")
    tri_cont(v, nums, x, y, z, a, sch="")
    tri_cont(v, nums, x, y, z, a)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_tri_cont__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriCont", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","TriCont", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","TriCont", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->TriCont((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7,(char const *)arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tri_cont__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriCont", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","TriCont", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->TriCont((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tri_cont__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriCont", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  (arg1)->TriCont((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.tri_cont_v

  call-seq:
    tri_cont_v(v, nums, x, y, z, sch="", opt="")
    tri_cont_v(v, nums, x, y, z, sch="")
    tri_cont_v(v, nums, x, y, z)
    tri_cont_v(v, nums, x, y, z, a, sch="", opt="")
    tri_cont_v(v, nums, x, y, z, a, sch="")
    tri_cont_v(v, nums, x, y, z, a)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_tri_cont_v__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriContV", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","TriContV", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  res9 = SWIG_AsCharPtrAndSize(argv[7], &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), Ruby_Format_TypeError( "", "char const *","TriContV", 9, argv[7] ));
  }
  arg9 = reinterpret_cast< char * >(buf9);
  (arg1)->TriContV((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7,(char const *)arg8,(char const *)arg9);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tri_cont_v__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriContV", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","TriContV", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->TriContV((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7,(char const *)arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tri_cont_v__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriContV", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  (arg1)->TriContV((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_tri_cont_v(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[10];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 10) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                return _wrap_MglGraph_tri_cont_v__SWIG_2(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_tri_cont_v__SWIG_1(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  return _wrap_MglGraph_tri_cont_v__SWIG_5(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_tri_cont_v__SWIG_0(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_tri_cont_v__SWIG_4(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_AsCharPtrAndSize(argv[8], 0, NULL, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_MglGraph_tri_cont_v__SWIG_3(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 10, "MglGraph.tri_cont_v", 
    "    void MglGraph.tri_cont_v(mglData const &v, mglData const &nums, mglData const &x, mglData const &y, mglData const &z, char const *sch, char const *opt)\n"
    "    void MglGraph.tri_cont_v(mglData const &v, mglData const &nums, mglData const &x, mglData const &y, mglData const &z, char const *sch)\n"
    "    void MglGraph.tri_cont_v(mglData const &v, mglData const &nums, mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.tri_cont_v(mglData const &v, mglData const &nums, mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *sch, char const *opt)\n"
    "    void MglGraph.tri_cont_v(mglData const &v, mglData const &nums, mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *sch)\n"
    "    void MglGraph.tri_cont_v(mglData const &v, mglData const &nums, mglData const &x, mglData const &y, mglData const &z, mglData const &a)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.tri_cont

  call-seq:
    tri_cont(nums, x, y, z, sch="", opt="")
    tri_cont(nums, x, y, z, sch="")
    tri_cont(nums, x, y, z)
    tri_cont(nums, x, y, z, a, sch="", opt="")
    tri_cont(nums, x, y, z, a, sch="")
    tri_cont(nums, x, y, z, a)
    tri_cont(v, nums, x, y, z, a, sch="", opt="")
    tri_cont(v, nums, x, y, z, a, sch="")
    tri_cont(v, nums, x, y, z, a)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_tri_cont__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriCont", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","TriCont", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  res9 = SWIG_AsCharPtrAndSize(argv[7], &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), Ruby_Format_TypeError( "", "char const *","TriCont", 9, argv[7] ));
  }
  arg9 = reinterpret_cast< char * >(buf9);
  (arg1)->TriCont((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7,(char const *)arg8,(char const *)arg9);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tri_cont__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriCont", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","TriCont", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->TriCont((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7,(char const *)arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tri_cont__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriCont", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  (arg1)->TriCont((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_tri_cont(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[10];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 10) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_tri_cont__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_tri_cont__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                return _wrap_MglGraph_tri_cont__SWIG_5(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_tri_cont__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_tri_cont__SWIG_4(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  return _wrap_MglGraph_tri_cont__SWIG_8(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_tri_cont__SWIG_3(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_tri_cont__SWIG_7(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_AsCharPtrAndSize(argv[8], 0, NULL, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_MglGraph_tri_cont__SWIG_6(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 10, "MglGraph.tri_cont", 
    "    void MglGraph.tri_cont(mglData const &nums, mglData const &x, mglData const &y, mglData const &z, char const *sch, char const *opt)\n"
    "    void MglGraph.tri_cont(mglData const &nums, mglData const &x, mglData const &y, mglData const &z, char const *sch)\n"
    "    void MglGraph.tri_cont(mglData const &nums, mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.tri_cont(mglData const &nums, mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *sch, char const *opt)\n"
    "    void MglGraph.tri_cont(mglData const &nums, mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *sch)\n"
    "    void MglGraph.tri_cont(mglData const &nums, mglData const &x, mglData const &y, mglData const &z, mglData const &a)\n"
    "    void MglGraph.tri_cont(mglData const &v, mglData const &nums, mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *sch, char const *opt)\n"
    "    void MglGraph.tri_cont(mglData const &v, mglData const &nums, mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *sch)\n"
    "    void MglGraph.tri_cont(mglData const &v, mglData const &nums, mglData const &x, mglData const &y, mglData const &z, mglData const &a)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.tri_cont_vt

  call-seq:
    tri_cont_vt(nums, x, y, z, sch="", opt="")
    tri_cont_vt(nums, x, y, z, sch="")
    tri_cont_vt(nums, x, y, z)
    tri_cont_vt(nums, x, y, z, a, sch="", opt="")
    tri_cont_vt(nums, x, y, z, a, sch="")
    tri_cont_vt(nums, x, y, z, a)
    tri_cont_vt(v, nums, x, y, z, a, sch="", opt="")
    tri_cont_vt(v, nums, x, y, z, a, sch="")
    tri_cont_vt(v, nums, x, y, z, a)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_tri_cont_vt__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriContVt", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","TriContVt", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","TriContVt", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->TriContVt((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tri_cont_vt__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriContVt", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","TriContVt", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->TriContVt((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tri_cont_vt__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriContVt", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->TriContVt((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tri_cont_vt__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriContVt", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","TriContVt", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","TriContVt", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->TriContVt((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7,(char const *)arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tri_cont_vt__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriContVt", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","TriContVt", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->TriContVt((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tri_cont_vt__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriContVt", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  (arg1)->TriContVt((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tri_cont_vt__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriContVt", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","TriContVt", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  res9 = SWIG_AsCharPtrAndSize(argv[7], &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), Ruby_Format_TypeError( "", "char const *","TriContVt", 9, argv[7] ));
  }
  arg9 = reinterpret_cast< char * >(buf9);
  (arg1)->TriContVt((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7,(char const *)arg8,(char const *)arg9);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tri_cont_vt__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriContVt", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","TriContVt", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->TriContVt((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7,(char const *)arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_tri_cont_vt__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  mglData *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","TriContVt", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  {
    arg7 = GetMglData(argv[5]);
  }
  (arg1)->TriContVt((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(mglData const &)*arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_tri_cont_vt(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[10];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 10) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_tri_cont_vt__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_tri_cont_vt__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                return _wrap_MglGraph_tri_cont_vt__SWIG_5(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_tri_cont_vt__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_tri_cont_vt__SWIG_4(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  return _wrap_MglGraph_tri_cont_vt__SWIG_8(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_tri_cont_vt__SWIG_3(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_tri_cont_vt__SWIG_7(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_AsCharPtrAndSize(argv[8], 0, NULL, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_MglGraph_tri_cont_vt__SWIG_6(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 10, "MglGraph.tri_cont_vt", 
    "    void MglGraph.tri_cont_vt(mglData const &nums, mglData const &x, mglData const &y, mglData const &z, char const *sch, char const *opt)\n"
    "    void MglGraph.tri_cont_vt(mglData const &nums, mglData const &x, mglData const &y, mglData const &z, char const *sch)\n"
    "    void MglGraph.tri_cont_vt(mglData const &nums, mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.tri_cont_vt(mglData const &nums, mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *sch, char const *opt)\n"
    "    void MglGraph.tri_cont_vt(mglData const &nums, mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *sch)\n"
    "    void MglGraph.tri_cont_vt(mglData const &nums, mglData const &x, mglData const &y, mglData const &z, mglData const &a)\n"
    "    void MglGraph.tri_cont_vt(mglData const &v, mglData const &nums, mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *sch, char const *opt)\n"
    "    void MglGraph.tri_cont_vt(mglData const &v, mglData const &nums, mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *sch)\n"
    "    void MglGraph.tri_cont_vt(mglData const &v, mglData const &nums, mglData const &x, mglData const &y, mglData const &z, mglData const &a)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.dots

  call-seq:
    dots(x, y, z, sch="", opt="")
    dots(x, y, z, sch="")
    dots(x, y, z)
    dots(x, y, z, a, sch="", opt="")
    dots(x, y, z, a, sch="")
    dots(x, y, z, a)
    dots(x, y, z, c, a, sch="", opt="")
    dots(x, y, z, c, a, sch="")
    dots(x, y, z, c, a)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_dots__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Dots", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Dots", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Dots", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Dots((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dots__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Dots", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Dots", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Dots((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dots__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Dots", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Dots((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dots__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Dots", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Dots", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Dots", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Dots((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dots__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Dots", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Dots", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Dots((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dots__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Dots", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->Dots((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dots__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Dots", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Dots", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Dots", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  (arg1)->Dots((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7,(char const *)arg8);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dots__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Dots", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Dots", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Dots((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_dots__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Dots", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  (arg1)->Dots((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_dots(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[9];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 9) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_dots__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_dots__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_dots__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_dots__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_dots__SWIG_4(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                return _wrap_MglGraph_dots__SWIG_8(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_dots__SWIG_3(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_dots__SWIG_7(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_dots__SWIG_6(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 9, "MglGraph.dots", 
    "    void MglGraph.dots(mglData const &x, mglData const &y, mglData const &z, char const *sch, char const *opt)\n"
    "    void MglGraph.dots(mglData const &x, mglData const &y, mglData const &z, char const *sch)\n"
    "    void MglGraph.dots(mglData const &x, mglData const &y, mglData const &z)\n"
    "    void MglGraph.dots(mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *sch, char const *opt)\n"
    "    void MglGraph.dots(mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *sch)\n"
    "    void MglGraph.dots(mglData const &x, mglData const &y, mglData const &z, mglData const &a)\n"
    "    void MglGraph.dots(mglData const &x, mglData const &y, mglData const &z, mglData const &c, mglData const &a, char const *sch, char const *opt)\n"
    "    void MglGraph.dots(mglData const &x, mglData const &y, mglData const &z, mglData const &c, mglData const &a, char const *sch)\n"
    "    void MglGraph.dots(mglData const &x, mglData const &y, mglData const &z, mglData const &c, mglData const &a)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.crust

  call-seq:
    crust(x, y, z, sch="", opt="")
    crust(x, y, z, sch="")
    crust(x, y, z)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_crust__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Crust", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Crust", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Crust", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Crust((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_crust__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Crust", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Crust", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Crust((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_crust__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Crust", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Crust((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_crust(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_crust__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_crust__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_crust__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.crust", 
    "    void MglGraph.crust(mglData const &x, mglData const &y, mglData const &z, char const *sch, char const *opt)\n"
    "    void MglGraph.crust(mglData const &x, mglData const &y, mglData const &z, char const *sch)\n"
    "    void MglGraph.crust(mglData const &x, mglData const &y, mglData const &z)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.fit

  call-seq:
    fit(y, eq, var, opt="") -> MglData
    fit(y, eq, var) -> MglData
    fit(y, eq, var, ini, opt="") -> MglData
    fit(y, eq, var, ini) -> MglData
    fit(x, y, eq, var, opt="") -> MglData
    fit(x, y, eq, var) -> MglData
    fit(x, y, eq, var, ini, opt="") -> MglData
    fit(x, y, eq, var, ini) -> MglData
    fit(x, y, z, eq, var, opt="") -> MglData
    fit(x, y, z, eq, var) -> MglData
    fit(x, y, z, eq, var, ini, opt="") -> MglData
    fit(x, y, z, eq, var, ini) -> MglData
    fit(x, y, z, a, eq, var, opt="") -> MglData
    fit(x, y, z, a, eq, var) -> MglData
    fit(x, y, z, a, eq, var, ini, opt="") -> MglData
    fit(x, y, z, a, eq, var, ini) -> MglData

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_fit__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fit", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fit", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Fit", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Fit", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  result = (arg1)->Fit((mglData const &)*arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return vresult;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fit", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fit", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Fit", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  result = (arg1)->Fit((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return vresult;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fit", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fit", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Fit", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Fit", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  result = (arg1)->Fit((mglData const &)*arg2,(char const *)arg3,(char const *)arg4,*arg5,(char const *)arg6);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return vresult;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fit", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fit", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Fit", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  {
    arg5 = GetMglData(argv[3]);
  }
  result = (arg1)->Fit((mglData const &)*arg2,(char const *)arg3,(char const *)arg4,*arg5);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    delete arg5;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    delete arg5;
  }
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.fit2

  call-seq:
    fit2(z, eq, var, opt="") -> MglData
    fit2(z, eq, var) -> MglData
    fit2(z, eq, var, ini, opt="") -> MglData
    fit2(z, eq, var, ini) -> MglData

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_fit2__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fit2", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fit2", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Fit2", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Fit2", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  result = (arg1)->Fit2((mglData const &)*arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return vresult;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit2__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fit2", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fit2", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Fit2", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  result = (arg1)->Fit2((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return vresult;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit2__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fit2", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fit2", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Fit2", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Fit2", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  result = (arg1)->Fit2((mglData const &)*arg2,(char const *)arg3,(char const *)arg4,*arg5,(char const *)arg6);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return vresult;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit2__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fit2", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fit2", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Fit2", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  {
    arg5 = GetMglData(argv[3]);
  }
  result = (arg1)->Fit2((mglData const &)*arg2,(char const *)arg3,(char const *)arg4,*arg5);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    delete arg5;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_fit2(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_fit2__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_fit2__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_fit2__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_fit2__SWIG_2(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.fit2", 
    "    mglData MglGraph.fit2(mglData const &z, char const *eq, char const *var, char const *opt)\n"
    "    mglData MglGraph.fit2(mglData const &z, char const *eq, char const *var)\n"
    "    mglData MglGraph.fit2(mglData const &z, char const *eq, char const *var, mglData &ini, char const *opt)\n"
    "    mglData MglGraph.fit2(mglData const &z, char const *eq, char const *var, mglData &ini)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.fit3

  call-seq:
    fit3(a, eq, var, opt="") -> MglData
    fit3(a, eq, var) -> MglData
    fit3(a, eq, var, ini, opt="") -> MglData
    fit3(a, eq, var, ini) -> MglData

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_fit3__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fit3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fit3", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Fit3", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Fit3", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  result = (arg1)->Fit3((mglData const &)*arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return vresult;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit3__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fit3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fit3", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Fit3", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  result = (arg1)->Fit3((mglData const &)*arg2,(char const *)arg3,(char const *)arg4);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return vresult;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit3__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fit3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fit3", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Fit3", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Fit3", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  result = (arg1)->Fit3((mglData const &)*arg2,(char const *)arg3,(char const *)arg4,*arg5,(char const *)arg6);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return vresult;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit3__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fit3", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fit3", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Fit3", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  {
    arg5 = GetMglData(argv[3]);
  }
  result = (arg1)->Fit3((mglData const &)*arg2,(char const *)arg3,(char const *)arg4,*arg5);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    delete arg5;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_fit3(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_fit3__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_fit3__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_fit3__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_fit3__SWIG_2(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.fit3", 
    "    mglData MglGraph.fit3(mglData const &a, char const *eq, char const *var, char const *opt)\n"
    "    mglData MglGraph.fit3(mglData const &a, char const *eq, char const *var)\n"
    "    mglData MglGraph.fit3(mglData const &a, char const *eq, char const *var, mglData &ini, char const *opt)\n"
    "    mglData MglGraph.fit3(mglData const &a, char const *eq, char const *var, mglData &ini)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.fit

  call-seq:
    fit(y, eq, var, opt="") -> MglData
    fit(y, eq, var) -> MglData
    fit(y, eq, var, ini, opt="") -> MglData
    fit(y, eq, var, ini) -> MglData
    fit(x, y, eq, var, opt="") -> MglData
    fit(x, y, eq, var) -> MglData
    fit(x, y, eq, var, ini, opt="") -> MglData
    fit(x, y, eq, var, ini) -> MglData
    fit(x, y, z, eq, var, opt="") -> MglData
    fit(x, y, z, eq, var) -> MglData
    fit(x, y, z, eq, var, ini, opt="") -> MglData
    fit(x, y, z, eq, var, ini) -> MglData
    fit(x, y, z, a, eq, var, opt="") -> MglData
    fit(x, y, z, a, eq, var) -> MglData
    fit(x, y, z, a, eq, var, ini, opt="") -> MglData
    fit(x, y, z, a, eq, var, ini) -> MglData

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_fit__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fit", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Fit", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Fit", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Fit", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  result = (arg1)->Fit((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fit", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Fit", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Fit", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  result = (arg1)->Fit((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fit", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Fit", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Fit", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Fit", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  result = (arg1)->Fit((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5,*arg6,(char const *)arg7);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  mglData *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fit", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Fit", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Fit", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  {
    arg6 = GetMglData(argv[4]);
  }
  result = (arg1)->Fit((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5,*arg6);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    delete arg6;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    delete arg6;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fit", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Fit", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Fit", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Fit", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  result = (arg1)->Fit((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fit", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Fit", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Fit", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  result = (arg1)->Fit((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit__SWIG_10(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  mglData *arg7 = 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fit", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Fit", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Fit", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  {
    arg7 = GetMglData(argv[5]);
  }
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Fit", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  result = (arg1)->Fit((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6,*arg7,(char const *)arg8);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit__SWIG_11(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  mglData *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fit", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Fit", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Fit", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  {
    arg7 = GetMglData(argv[5]);
  }
  result = (arg1)->Fit((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6,*arg7);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  {
    delete arg7;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  {
    delete arg7;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit__SWIG_12(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fit", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Fit", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Fit", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","Fit", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  result = (arg1)->Fit((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit__SWIG_13(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fit", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Fit", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Fit", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  result = (arg1)->Fit((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit__SWIG_14(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  mglData *arg8 = 0 ;
  char *arg9 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fit", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Fit", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Fit", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  {
    arg8 = GetMglData(argv[6]);
  }
  res9 = SWIG_AsCharPtrAndSize(argv[7], &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), Ruby_Format_TypeError( "", "char const *","Fit", 9, argv[7] ));
  }
  arg9 = reinterpret_cast< char * >(buf9);
  result = (arg1)->Fit((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7,*arg8,(char const *)arg9);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  {
    delete arg8;
  }
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  {
    delete arg8;
  }
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit__SWIG_15(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  mglData *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fit", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Fit", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Fit", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  {
    arg8 = GetMglData(argv[6]);
  }
  result = (arg1)->Fit((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7,*arg8);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  {
    delete arg8;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  {
    delete arg8;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_fit(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[10];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 10) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_fit__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_fit__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_fit__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_fit__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_fit__SWIG_2(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_fit__SWIG_4(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                return _wrap_MglGraph_fit__SWIG_7(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_fit__SWIG_9(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_fit__SWIG_6(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_fit__SWIG_8(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  return _wrap_MglGraph_fit__SWIG_11(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_fit__SWIG_13(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_fit__SWIG_10(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_fit__SWIG_12(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    _v = (TYPE(argv[7])==T_ARRAY);
                    if (!(_v)) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_mglData, 0);
                      _v = SWIG_CheckState(res);
                    }
                  }
                  if (_v) {
                    return _wrap_MglGraph_fit__SWIG_15(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    _v = (TYPE(argv[7])==T_ARRAY);
                    if (!(_v)) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_mglData, 0);
                      _v = SWIG_CheckState(res);
                    }
                  }
                  if (_v) {
                    int res = SWIG_AsCharPtrAndSize(argv[8], 0, NULL, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_MglGraph_fit__SWIG_14(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 10, "MglGraph.fit", 
    "    mglData MglGraph.fit(mglData const &y, char const *eq, char const *var, char const *opt)\n"
    "    mglData MglGraph.fit(mglData const &y, char const *eq, char const *var)\n"
    "    mglData MglGraph.fit(mglData const &y, char const *eq, char const *var, mglData &ini, char const *opt)\n"
    "    mglData MglGraph.fit(mglData const &y, char const *eq, char const *var, mglData &ini)\n"
    "    mglData MglGraph.fit(mglData const &x, mglData const &y, char const *eq, char const *var, char const *opt)\n"
    "    mglData MglGraph.fit(mglData const &x, mglData const &y, char const *eq, char const *var)\n"
    "    mglData MglGraph.fit(mglData const &x, mglData const &y, char const *eq, char const *var, mglData &ini, char const *opt)\n"
    "    mglData MglGraph.fit(mglData const &x, mglData const &y, char const *eq, char const *var, mglData &ini)\n"
    "    mglData MglGraph.fit(mglData const &x, mglData const &y, mglData const &z, char const *eq, char const *var, char const *opt)\n"
    "    mglData MglGraph.fit(mglData const &x, mglData const &y, mglData const &z, char const *eq, char const *var)\n"
    "    mglData MglGraph.fit(mglData const &x, mglData const &y, mglData const &z, char const *eq, char const *var, mglData &ini, char const *opt)\n"
    "    mglData MglGraph.fit(mglData const &x, mglData const &y, mglData const &z, char const *eq, char const *var, mglData &ini)\n"
    "    mglData MglGraph.fit(mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *eq, char const *var, char const *opt)\n"
    "    mglData MglGraph.fit(mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *eq, char const *var)\n"
    "    mglData MglGraph.fit(mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *eq, char const *var, mglData &ini, char const *opt)\n"
    "    mglData MglGraph.fit(mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *eq, char const *var, mglData &ini)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.fit_s

  call-seq:
    fit_s(y, s, eq, var, opt="") -> MglData
    fit_s(y, s, eq, var) -> MglData
    fit_s(y, s, eq, var, ini, opt="") -> MglData
    fit_s(y, s, eq, var, ini) -> MglData
    fit_s(x, y, s, eq, var, opt="") -> MglData
    fit_s(x, y, s, eq, var) -> MglData
    fit_s(x, y, s, eq, var, ini, opt="") -> MglData
    fit_s(x, y, s, eq, var, ini) -> MglData
    fit_s(x, y, z, s, eq, var, opt="") -> MglData
    fit_s(x, y, z, s, eq, var) -> MglData
    fit_s(x, y, z, s, eq, var, ini, opt="") -> MglData
    fit_s(x, y, z, s, eq, var, ini) -> MglData
    fit_s(x, y, z, a, s, eq, var, opt="") -> MglData
    fit_s(x, y, z, a, s, eq, var) -> MglData
    fit_s(x, y, z, a, s, eq, var, ini, opt="") -> MglData
    fit_s(x, y, z, a, s, eq, var, ini) -> MglData

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_fit_s__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FitS", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","FitS", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","FitS", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","FitS", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  result = (arg1)->FitS((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit_s__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FitS", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","FitS", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","FitS", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  result = (arg1)->FitS((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit_s__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FitS", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","FitS", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","FitS", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","FitS", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  result = (arg1)->FitS((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5,*arg6,(char const *)arg7);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit_s__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  mglData *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FitS", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","FitS", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","FitS", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  {
    arg6 = GetMglData(argv[4]);
  }
  result = (arg1)->FitS((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4,(char const *)arg5,*arg6);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    delete arg6;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    delete arg6;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit_s__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FitS", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","FitS", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","FitS", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","FitS", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  result = (arg1)->FitS((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit_s__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FitS", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","FitS", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","FitS", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  result = (arg1)->FitS((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit_s__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  mglData *arg7 = 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FitS", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","FitS", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","FitS", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  {
    arg7 = GetMglData(argv[5]);
  }
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","FitS", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  result = (arg1)->FitS((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6,*arg7,(char const *)arg8);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  {
    delete arg7;
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit_s__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  mglData *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FitS", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","FitS", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","FitS", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  {
    arg7 = GetMglData(argv[5]);
  }
  result = (arg1)->FitS((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5,(char const *)arg6,*arg7);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  {
    delete arg7;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  {
    delete arg7;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit_s__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FitS", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","FitS", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","FitS", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","FitS", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  result = (arg1)->FitS((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit_s__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FitS", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","FitS", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","FitS", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  result = (arg1)->FitS((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit_s__SWIG_10(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  mglData *arg8 = 0 ;
  char *arg9 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FitS", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","FitS", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","FitS", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  {
    arg8 = GetMglData(argv[6]);
  }
  res9 = SWIG_AsCharPtrAndSize(argv[7], &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), Ruby_Format_TypeError( "", "char const *","FitS", 9, argv[7] ));
  }
  arg9 = reinterpret_cast< char * >(buf9);
  result = (arg1)->FitS((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7,*arg8,(char const *)arg9);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  {
    delete arg8;
  }
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  {
    delete arg8;
  }
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit_s__SWIG_11(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  mglData *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FitS", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","FitS", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","FitS", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  {
    arg8 = GetMglData(argv[6]);
  }
  result = (arg1)->FitS((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6,(char const *)arg7,*arg8);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  {
    delete arg8;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  {
    delete arg8;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit_s__SWIG_12(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FitS", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","FitS", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","FitS", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  res9 = SWIG_AsCharPtrAndSize(argv[7], &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), Ruby_Format_TypeError( "", "char const *","FitS", 9, argv[7] ));
  }
  arg9 = reinterpret_cast< char * >(buf9);
  result = (arg1)->FitS((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit_s__SWIG_13(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FitS", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","FitS", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","FitS", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  result = (arg1)->FitS((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7,(char const *)arg8);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit_s__SWIG_14(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  mglData *arg9 = 0 ;
  char *arg10 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  int res10 ;
  char *buf10 = 0 ;
  int alloc10 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 9) || (argc > 9)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 9)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FitS", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","FitS", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","FitS", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  {
    arg9 = GetMglData(argv[7]);
  }
  res10 = SWIG_AsCharPtrAndSize(argv[8], &buf10, NULL, &alloc10);
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), Ruby_Format_TypeError( "", "char const *","FitS", 10, argv[8] ));
  }
  arg10 = reinterpret_cast< char * >(buf10);
  result = (arg1)->FitS((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7,(char const *)arg8,*arg9,(char const *)arg10);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  {
    delete arg9;
  }
  if (alloc10 == SWIG_NEWOBJ) delete[] buf10;
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  {
    delete arg9;
  }
  if (alloc10 == SWIG_NEWOBJ) delete[] buf10;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fit_s__SWIG_15(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  mglData *arg9 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","FitS", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","FitS", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","FitS", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  {
    arg9 = GetMglData(argv[7]);
  }
  result = (arg1)->FitS((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7,(char const *)arg8,*arg9);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  {
    delete arg9;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  {
    delete arg9;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_fit_s(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[11];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 11) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_fit_s__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_fit_s__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                return _wrap_MglGraph_fit_s__SWIG_3(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_fit_s__SWIG_5(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_fit_s__SWIG_2(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_fit_s__SWIG_4(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  return _wrap_MglGraph_fit_s__SWIG_7(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_fit_s__SWIG_9(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  _v = (TYPE(argv[6])==T_ARRAY);
                  if (!(_v)) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_mglData, 0);
                    _v = SWIG_CheckState(res);
                  }
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_fit_s__SWIG_6(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_fit_s__SWIG_8(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    _v = (TYPE(argv[7])==T_ARRAY);
                    if (!(_v)) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_mglData, 0);
                      _v = SWIG_CheckState(res);
                    }
                  }
                  if (_v) {
                    return _wrap_MglGraph_fit_s__SWIG_11(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MglGraph_fit_s__SWIG_13(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    _v = (TYPE(argv[7])==T_ARRAY);
                    if (!(_v)) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_mglData, 0);
                      _v = SWIG_CheckState(res);
                    }
                  }
                  if (_v) {
                    int res = SWIG_AsCharPtrAndSize(argv[8], 0, NULL, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_MglGraph_fit_s__SWIG_10(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_AsCharPtrAndSize(argv[8], 0, NULL, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_MglGraph_fit_s__SWIG_12(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    {
                      _v = (TYPE(argv[8])==T_ARRAY);
                      if (!(_v)) {
                        void *vptr = 0;
                        int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_mglData, 0);
                        _v = SWIG_CheckState(res);
                      }
                    }
                    if (_v) {
                      return _wrap_MglGraph_fit_s__SWIG_15(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    {
                      _v = (TYPE(argv[8])==T_ARRAY);
                      if (!(_v)) {
                        void *vptr = 0;
                        int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_mglData, 0);
                        _v = SWIG_CheckState(res);
                      }
                    }
                    if (_v) {
                      int res = SWIG_AsCharPtrAndSize(argv[9], 0, NULL, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        return _wrap_MglGraph_fit_s__SWIG_14(nargs, args, self);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 11, "MglGraph.fit_s", 
    "    mglData MglGraph.fit_s(mglData const &y, mglData const &s, char const *eq, char const *var, char const *opt)\n"
    "    mglData MglGraph.fit_s(mglData const &y, mglData const &s, char const *eq, char const *var)\n"
    "    mglData MglGraph.fit_s(mglData const &y, mglData const &s, char const *eq, char const *var, mglData &ini, char const *opt)\n"
    "    mglData MglGraph.fit_s(mglData const &y, mglData const &s, char const *eq, char const *var, mglData &ini)\n"
    "    mglData MglGraph.fit_s(mglData const &x, mglData const &y, mglData const &s, char const *eq, char const *var, char const *opt)\n"
    "    mglData MglGraph.fit_s(mglData const &x, mglData const &y, mglData const &s, char const *eq, char const *var)\n"
    "    mglData MglGraph.fit_s(mglData const &x, mglData const &y, mglData const &s, char const *eq, char const *var, mglData &ini, char const *opt)\n"
    "    mglData MglGraph.fit_s(mglData const &x, mglData const &y, mglData const &s, char const *eq, char const *var, mglData &ini)\n"
    "    mglData MglGraph.fit_s(mglData const &x, mglData const &y, mglData const &z, mglData const &s, char const *eq, char const *var, char const *opt)\n"
    "    mglData MglGraph.fit_s(mglData const &x, mglData const &y, mglData const &z, mglData const &s, char const *eq, char const *var)\n"
    "    mglData MglGraph.fit_s(mglData const &x, mglData const &y, mglData const &z, mglData const &s, char const *eq, char const *var, mglData &ini, char const *opt)\n"
    "    mglData MglGraph.fit_s(mglData const &x, mglData const &y, mglData const &z, mglData const &s, char const *eq, char const *var, mglData &ini)\n"
    "    mglData MglGraph.fit_s(mglData const &x, mglData const &y, mglData const &z, mglData const &a, mglData const &s, char const *eq, char const *var, char const *opt)\n"
    "    mglData MglGraph.fit_s(mglData const &x, mglData const &y, mglData const &z, mglData const &a, mglData const &s, char const *eq, char const *var)\n"
    "    mglData MglGraph.fit_s(mglData const &x, mglData const &y, mglData const &z, mglData const &a, mglData const &s, char const *eq, char const *var, mglData &ini, char const *opt)\n"
    "    mglData MglGraph.fit_s(mglData const &x, mglData const &y, mglData const &z, mglData const &a, mglData const &s, char const *eq, char const *var, mglData &ini)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.puts_fit

  call-seq:
    puts_fit(p, prefix=None, font="", size=-1)
    puts_fit(p, prefix=None, font="")
    puts_fit(p, prefix=None)
    puts_fit(p)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_puts_fit__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","PutsFit", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","PutsFit", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","PutsFit", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","PutsFit", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->PutsFit(arg2,(char const *)arg3,(char const *)arg4,arg5);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_puts_fit__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","PutsFit", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","PutsFit", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","PutsFit", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->PutsFit(arg2,(char const *)arg3,(char const *)arg4);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_puts_fit__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","PutsFit", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","PutsFit", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->PutsFit(arg2,(char const *)arg3);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_puts_fit__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglPoint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","PutsFit", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglPoint(argv[0]);
  }
  (arg1)->PutsFit(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_puts_fit(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        return _wrap_MglGraph_puts_fit__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_puts_fit__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_puts_fit__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglPoint, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_puts_fit__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglGraph.puts_fit", 
    "    void MglGraph.puts_fit(mglPoint p, char const *prefix, char const *font, double size)\n"
    "    void MglGraph.puts_fit(mglPoint p, char const *prefix, char const *font)\n"
    "    void MglGraph.puts_fit(mglPoint p, char const *prefix)\n"
    "    void MglGraph.puts_fit(mglPoint p)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.get_fit

  call-seq:
    get_fit -> char const *

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_get_fit(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","GetFit", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  result = (char *)(arg1)->GetFit();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.pde

  call-seq:
    pde(ham, ini_re, ini_im, dz=0.1, k0=100, opt="") -> MglData
    pde(ham, ini_re, ini_im, dz=0.1, k0=100) -> MglData
    pde(ham, ini_re, ini_im, dz=0.1) -> MglData
    pde(ham, ini_re, ini_im) -> MglData

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_pde__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  double arg5 ;
  double arg6 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","PDE", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","PDE", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","PDE", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","PDE", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","PDE", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  result = (arg1)->PDE((char const *)arg2,(mglData const &)*arg3,(mglData const &)*arg4,arg5,arg6,(char const *)arg7);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_pde__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","PDE", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","PDE", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","PDE", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","PDE", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  result = (arg1)->PDE((char const *)arg2,(mglData const &)*arg3,(mglData const &)*arg4,arg5,arg6);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_pde__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","PDE", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","PDE", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","PDE", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  result = (arg1)->PDE((char const *)arg2,(mglData const &)*arg3,(mglData const &)*arg4,arg5);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_pde__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","PDE", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","PDE", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  result = (arg1)->PDE((char const *)arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_pde(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_pde__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_pde__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglGraph_pde__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_pde__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.pde", 
    "    mglData MglGraph.pde(char const *ham, mglData const &ini_re, mglData const &ini_im, double dz, double k0, char const *opt)\n"
    "    mglData MglGraph.pde(char const *ham, mglData const &ini_re, mglData const &ini_im, double dz, double k0)\n"
    "    mglData MglGraph.pde(char const *ham, mglData const &ini_re, mglData const &ini_im, double dz)\n"
    "    mglData MglGraph.pde(char const *ham, mglData const &ini_re, mglData const &ini_im)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.fill

  call-seq:
    fill(u, eq, opt="")
    fill(u, eq)
    fill(u, eq, v, opt="")
    fill(u, eq, v)
    fill(u, eq, v, w, opt="")
    fill(u, eq, v, w)
    fill(u, eq, opt="")
    fill(u, eq)
    fill(u, eq, v, opt="")
    fill(u, eq, v)
    fill(u, eq, v, w, opt="")
    fill(u, eq, v, w)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_fill__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fill", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Fill", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Fill(*arg2,(char const *)arg3,(char const *)arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fill__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fill", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Fill(*arg2,(char const *)arg3);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fill__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fill", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Fill", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Fill(*arg2,(char const *)arg3,(mglData const &)*arg4,(char const *)arg5);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fill__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fill", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Fill(*arg2,(char const *)arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fill__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fill", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Fill", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Fill(*arg2,(char const *)arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fill__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fill", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->Fill(*arg2,(char const *)arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fill__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglDataC *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_mglDataC,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglDataC &","Fill", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mglDataC &","Fill", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< mglDataC * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fill", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Fill", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->Fill(*arg2,(char const *)arg3,(char const *)arg4);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fill__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglDataC *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_mglDataC,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglDataC &","Fill", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mglDataC &","Fill", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< mglDataC * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fill", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Fill(*arg2,(char const *)arg3);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fill__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglDataC *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_mglDataC,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglDataC &","Fill", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mglDataC &","Fill", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< mglDataC * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fill", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Fill", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->Fill(*arg2,(char const *)arg3,(mglData const &)*arg4,(char const *)arg5);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fill__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglDataC *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_mglDataC,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglDataC &","Fill", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mglDataC &","Fill", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< mglDataC * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fill", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Fill(*arg2,(char const *)arg3,(mglData const &)*arg4);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete arg4;
  }
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fill__SWIG_10(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglDataC *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_mglDataC,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglDataC &","Fill", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mglDataC &","Fill", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< mglDataC * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fill", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Fill", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Fill(*arg2,(char const *)arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_fill__SWIG_11(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglDataC *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Fill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_mglDataC,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglDataC &","Fill", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mglDataC &","Fill", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< mglDataC * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Fill", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->Fill(*arg2,(char const *)arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_fill(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglDataC, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_fill__SWIG_7(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_fill__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglDataC, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_fill__SWIG_6(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglDataC, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_fill__SWIG_9(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_fill__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_fill__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglDataC, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_fill__SWIG_8(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglDataC, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_fill__SWIG_11(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_fill__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_fill__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglDataC, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_fill__SWIG_10(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_fill__SWIG_4(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.fill", 
    "    void MglGraph.fill(mglData &u, char const *eq, char const *opt)\n"
    "    void MglGraph.fill(mglData &u, char const *eq)\n"
    "    void MglGraph.fill(mglData &u, char const *eq, mglData const &v, char const *opt)\n"
    "    void MglGraph.fill(mglData &u, char const *eq, mglData const &v)\n"
    "    void MglGraph.fill(mglData &u, char const *eq, mglData const &v, mglData const &w, char const *opt)\n"
    "    void MglGraph.fill(mglData &u, char const *eq, mglData const &v, mglData const &w)\n"
    "    void MglGraph.fill(mglDataC &u, char const *eq, char const *opt)\n"
    "    void MglGraph.fill(mglDataC &u, char const *eq)\n"
    "    void MglGraph.fill(mglDataC &u, char const *eq, mglData const &v, char const *opt)\n"
    "    void MglGraph.fill(mglDataC &u, char const *eq, mglData const &v)\n"
    "    void MglGraph.fill(mglDataC &u, char const *eq, mglData const &v, mglData const &w, char const *opt)\n"
    "    void MglGraph.fill(mglDataC &u, char const *eq, mglData const &v, mglData const &w)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.refill

  call-seq:
    refill(dat, xdat, vdat, sl=-1, opt="")
    refill(dat, xdat, vdat, sl=-1)
    refill(dat, xdat, vdat)
    refill(dat, xdat, ydat, vdat, sl=-1, opt="")
    refill(dat, xdat, ydat, vdat, sl=-1)
    refill(dat, xdat, ydat, vdat)
    refill(dat, xdat, ydat, zdat, vdat, opt="")
    refill(dat, xdat, ydat, zdat, vdat)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_refill__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  long arg5 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Refill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  ecode5 = SWIG_AsVal_long(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "long","Refill", 5, argv[3] ));
  } 
  arg5 = static_cast< long >(val5);
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Refill", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->Refill(*arg2,(mglData const &)*arg3,(mglData const &)*arg4,arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_refill__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  long arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Refill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  ecode5 = SWIG_AsVal_long(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "long","Refill", 5, argv[3] ));
  } 
  arg5 = static_cast< long >(val5);
  (arg1)->Refill(*arg2,(mglData const &)*arg3,(mglData const &)*arg4,arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_refill__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Refill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  (arg1)->Refill(*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_refill__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  long arg6 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Refill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  ecode6 = SWIG_AsVal_long(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "long","Refill", 6, argv[4] ));
  } 
  arg6 = static_cast< long >(val6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Refill", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Refill(*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_refill__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  long arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Refill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  ecode6 = SWIG_AsVal_long(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "long","Refill", 6, argv[4] ));
  } 
  arg6 = static_cast< long >(val6);
  (arg1)->Refill(*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_refill__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Refill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->Refill(*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_refill__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Refill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","Refill", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->Refill(*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6,(char const *)arg7);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_refill__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  mglData *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Refill", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  {
    arg6 = GetMglData(argv[4]);
  }
  (arg1)->Refill(*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(mglData const &)*arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_refill(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_refill__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_refill__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_refill__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_refill__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                int res = SWIG_AsVal_long(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_MglGraph_refill__SWIG_4(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                return _wrap_MglGraph_refill__SWIG_7(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                int res = SWIG_AsVal_long(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_refill__SWIG_3(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              {
                _v = (TYPE(argv[5])==T_ARRAY);
                if (!(_v)) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mglData, 0);
                  _v = SWIG_CheckState(res);
                }
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MglGraph_refill__SWIG_6(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "MglGraph.refill", 
    "    void MglGraph.refill(mglData &dat, mglData const &xdat, mglData const &vdat, long sl, char const *opt)\n"
    "    void MglGraph.refill(mglData &dat, mglData const &xdat, mglData const &vdat, long sl)\n"
    "    void MglGraph.refill(mglData &dat, mglData const &xdat, mglData const &vdat)\n"
    "    void MglGraph.refill(mglData &dat, mglData const &xdat, mglData const &ydat, mglData const &vdat, long sl, char const *opt)\n"
    "    void MglGraph.refill(mglData &dat, mglData const &xdat, mglData const &ydat, mglData const &vdat, long sl)\n"
    "    void MglGraph.refill(mglData &dat, mglData const &xdat, mglData const &ydat, mglData const &vdat)\n"
    "    void MglGraph.refill(mglData &dat, mglData const &xdat, mglData const &ydat, mglData const &zdat, mglData const &vdat, char const *opt)\n"
    "    void MglGraph.refill(mglData &dat, mglData const &xdat, mglData const &ydat, mglData const &zdat, mglData const &vdat)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.data_grid

  call-seq:
    data_grid(d, x, y, z, opt="")
    data_grid(d, x, y, z)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_data_grid__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","DataGrid", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","DataGrid", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  (arg1)->DataGrid(*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_data_grid__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","DataGrid", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  (arg1)->DataGrid(*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_data_grid(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_data_grid__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_data_grid__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.data_grid", 
    "    void MglGraph.data_grid(mglData &d, mglData const &x, mglData const &y, mglData const &z, char const *opt)\n"
    "    void MglGraph.data_grid(mglData &d, mglData const &x, mglData const &y, mglData const &z)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.hist

  call-seq:
    hist(x, a, opt="") -> MglData
    hist(x, a) -> MglData
    hist(x, y, a, opt="") -> MglData
    hist(x, y, a) -> MglData
    hist(x, y, z, a, opt="") -> MglData
    hist(x, y, z, a) -> MglData

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_hist__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Hist", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","Hist", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  result = (arg1)->Hist((mglData const &)*arg2,(mglData const &)*arg3,(char const *)arg4);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_hist__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Hist", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  result = (arg1)->Hist((mglData const &)*arg2,(mglData const &)*arg3);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_hist__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Hist", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","Hist", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  result = (arg1)->Hist((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(char const *)arg5);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_hist__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Hist", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  result = (arg1)->Hist((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_hist__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Hist", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  res6 = SWIG_AsCharPtrAndSize(argv[4], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "char const *","Hist", 6, argv[4] ));
  }
  arg6 = reinterpret_cast< char * >(buf6);
  result = (arg1)->Hist((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5,(char const *)arg6);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_hist__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  mglData *arg2 = 0 ;
  mglData *arg3 = 0 ;
  mglData *arg4 = 0 ;
  mglData *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Hist", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  {
    arg2 = GetMglData(argv[0]);
  }
  {
    arg3 = GetMglData(argv[1]);
  }
  {
    arg4 = GetMglData(argv[2]);
  }
  {
    arg5 = GetMglData(argv[3]);
  }
  result = (arg1)->Hist((mglData const &)*arg2,(mglData const &)*arg3,(mglData const &)*arg4,(mglData const &)*arg5);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return vresult;
fail:
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_hist(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          return _wrap_MglGraph_hist__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_hist__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            return _wrap_MglGraph_hist__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_hist__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              return _wrap_MglGraph_hist__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (TYPE(argv[1])==T_ARRAY);
        if (!(_v)) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglData, 0);
          _v = SWIG_CheckState(res);
        }
      }
      if (_v) {
        {
          _v = (TYPE(argv[2])==T_ARRAY);
          if (!(_v)) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mglData, 0);
            _v = SWIG_CheckState(res);
          }
        }
        if (_v) {
          {
            _v = (TYPE(argv[3])==T_ARRAY);
            if (!(_v)) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mglData, 0);
              _v = SWIG_CheckState(res);
            }
          }
          if (_v) {
            {
              _v = (TYPE(argv[4])==T_ARRAY);
              if (!(_v)) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mglData, 0);
                _v = SWIG_CheckState(res);
              }
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_MglGraph_hist__SWIG_4(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "MglGraph.hist", 
    "    mglData MglGraph.hist(mglData const &x, mglData const &a, char const *opt)\n"
    "    mglData MglGraph.hist(mglData const &x, mglData const &a)\n"
    "    mglData MglGraph.hist(mglData const &x, mglData const &y, mglData const &a, char const *opt)\n"
    "    mglData MglGraph.hist(mglData const &x, mglData const &y, mglData const &a)\n"
    "    mglData MglGraph.hist(mglData const &x, mglData const &y, mglData const &z, mglData const &a, char const *opt)\n"
    "    mglData MglGraph.hist(mglData const &x, mglData const &y, mglData const &z, mglData const &a)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.compression

  call-seq:
    compression(arg2)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_compression(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","Compression", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","Compression", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->Compression(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.vertex_color

  call-seq:
    vertex_color(enable)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_vertex_color(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","VertexColor", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","VertexColor", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->VertexColor(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.double_sided

  call-seq:
    double_sided(enable)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_double_sided(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","DoubleSided", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","DoubleSided", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->DoubleSided(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglGraph.set_func

  call-seq:
    set_func(EqX, EqY, EqZ=nil, EqA=nil)
    set_func(EqX, EqY=0, EqZ=0, EqA=0)
    set_func(EqX, EqY=0, EqZ=0)
    set_func(EqX, EqY=0)
    set_func(EqX)
    set_func(EqX, EqY, EqZ=0, EqA=0)
    set_func(EqX, EqY, EqZ=0)
    set_func(EqX, EqY)
    set_func(EqX, EqY, EqZ=nil, EqA=0)
    set_func(EqX, EqY, EqZ=nil)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglGraph_set_func__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetFunc", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SetFunc", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","SetFunc", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","SetFunc", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int","SetFunc", 5, argv[3] ));
  } 
  arg5 = static_cast< int >(val5);
  mglGraph_SetFunc__SWIG_1(arg1,(char const *)arg2,arg3,arg4,arg5);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_func__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetFunc", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SetFunc", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","SetFunc", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","SetFunc", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  mglGraph_SetFunc__SWIG_1(arg1,(char const *)arg2,arg3,arg4);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_func__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetFunc", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SetFunc", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","SetFunc", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  mglGraph_SetFunc__SWIG_1(arg1,(char const *)arg2,arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_func__SWIG_4(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetFunc", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SetFunc", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  mglGraph_SetFunc__SWIG_1(arg1,(char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_func__SWIG_5(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetFunc", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SetFunc", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","SetFunc", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","SetFunc", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int","SetFunc", 5, argv[3] ));
  } 
  arg5 = static_cast< int >(val5);
  mglGraph_SetFunc__SWIG_5(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_func__SWIG_6(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetFunc", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SetFunc", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","SetFunc", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","SetFunc", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  mglGraph_SetFunc__SWIG_5(arg1,(char const *)arg2,(char const *)arg3,arg4);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_func__SWIG_7(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetFunc", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SetFunc", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","SetFunc", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  mglGraph_SetFunc__SWIG_5(arg1,(char const *)arg2,(char const *)arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_func__SWIG_8(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetFunc", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SetFunc", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","SetFunc", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","SetFunc", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int","SetFunc", 5, argv[3] ));
  } 
  arg5 = static_cast< int >(val5);
  mglGraph_SetFunc__SWIG_8(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglGraph_set_func__SWIG_9(int argc, VALUE *argv, VALUE self) {
  mglGraph *arg1 = (mglGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglGraph *","SetFunc", 1, self )); 
  }
  arg1 = reinterpret_cast< mglGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SetFunc", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","SetFunc", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","SetFunc", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  mglGraph_SetFunc__SWIG_8(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglGraph_set_func(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglGraph_set_func__SWIG_4(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MglGraph_set_func__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglGraph_set_func__SWIG_7(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_set_func__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglGraph_set_func__SWIG_6(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MglGraph_set_func__SWIG_9(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_set_func__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_set_func__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MglGraph_set_func__SWIG_8(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MglGraph_set_func__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "MglGraph.set_func", 
    "    void MglGraph.set_func(char const *EqX, char const *EqY, char const *EqZ, char const *EqA)\n"
    "    void MglGraph.set_func(char const *EqX, int EqY, int EqZ, int EqA)\n"
    "    void MglGraph.set_func(char const *EqX, int EqY, int EqZ)\n"
    "    void MglGraph.set_func(char const *EqX, int EqY)\n"
    "    void MglGraph.set_func(char const *EqX)\n"
    "    void MglGraph.set_func(char const *EqX, char const *EqY, int EqZ, int EqA)\n"
    "    void MglGraph.set_func(char const *EqX, char const *EqY, int EqZ)\n"
    "    void MglGraph.set_func(char const *EqX, char const *EqY)\n"
    "    void MglGraph.set_func(char const *EqX, char const *EqY, char const *EqZ, int EqA)\n"
    "    void MglGraph.set_func(char const *EqX, char const *EqY, char const *EqZ)\n");
  
  return Qnil;
}



/*
  Document-class: MathGL::MglParse

  Proxy of C++ MathGL::MglParse class


*/
static swig_class SwigClassMglParse;


/*
  Document-method: MathGL::MglParse.new

  call-seq:
    MglParse.new(p)
    MglParse.new(p)
    MglParse.new(setsize=false)
    MglParse.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_MglParse__SWIG_0(int argc, VALUE *argv, VALUE self) {
  HMPR arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  mglParse *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_HMPR,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "HMPR","mglParse", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "HMPR","mglParse", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< HMPR * >(argp1));
    }
  }
  result = (mglParse *)new mglParse(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglParse.new

  call-seq:
    MglParse.new(p)
    MglParse.new(p)
    MglParse.new(setsize=false)
    MglParse.new()

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_MglParse__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mglParse *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_mglParse,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse &","mglParse", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "mglParse &","mglParse", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  result = (mglParse *)new mglParse(*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_MglParse__SWIG_2(int argc, VALUE *argv, VALUE self) {
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  mglParse *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_bool(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "bool","mglParse", 1, argv[0] ));
  } 
  arg1 = static_cast< bool >(val1);
  result = (mglParse *)new mglParse(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_MglParse_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_MglParse_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_mglParse);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_MglParse__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglParse *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (mglParse *)new mglParse();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_MglParse(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_MglParse__SWIG_3(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglParse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MglParse__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HMPR, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MglParse__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_MglParse__SWIG_2(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "mglParse.new", 
    "    mglParse.new(HMPR p)\n"
    "    mglParse.new(mglParse &p)\n"
    "    mglParse.new(bool setsize)\n"
    "    mglParse.new()\n");
  
  return Qnil;
}


SWIGINTERN void
free_mglParse(mglParse *arg1) {
    delete arg1;
}


/*
  Document-method: MathGL::MglParse.self

  call-seq:
    self -> HMPR

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglParse_self(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = (mglParse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  HMPR result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglParse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse *","Self", 1, self )); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  result = (arg1)->Self();
  vresult = SWIG_NewPointerObj((new HMPR(static_cast< const HMPR& >(result))), SWIGTYPE_p_HMPR, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglParse.parse

  call-seq:
    parse(gr, str, pos) -> int
    parse(gr, str, pos) -> int

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglParse_parse__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = (mglParse *) 0 ;
  mglGraph *arg2 = (mglGraph *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglParse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse *","Parse", 1, self )); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglGraph *","Parse", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< mglGraph * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Parse", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","Parse", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  result = (int)(arg1)->Parse(arg2,(char const *)arg3,arg4);
  vresult = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return vresult;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglParse_parse__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = (mglParse *) 0 ;
  mglGraph *arg2 = (mglGraph *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglParse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse *","Parse", 1, self )); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglGraph *","Parse", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< mglGraph * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "wchar_t const *","Parse", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< wchar_t * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","Parse", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  result = (int)(arg1)->Parse(arg2,(wchar_t const *)arg3,arg4);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglParse_parse(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglParse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglGraph, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wchar_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglParse_parse__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglParse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglGraph, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglParse_parse__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglParse.parse", 
    "    int MglParse.parse(mglGraph *gr, char const *str, int pos)\n"
    "    int MglParse.parse(mglGraph *gr, wchar_t const *str, int pos)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglParse.execute

  call-seq:
    execute(gr, str)
    execute(gr, str)
    execute(gr, fp, print=false)
    execute(gr, fp)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglParse_execute__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = (mglParse *) 0 ;
  mglGraph *arg2 = (mglGraph *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglParse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse *","Execute", 1, self )); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglGraph *","Execute", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< mglGraph * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","Execute", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->Execute(arg2,(char const *)arg3);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglParse_execute__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = (mglParse *) 0 ;
  mglGraph *arg2 = (mglGraph *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglParse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse *","Execute", 1, self )); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglGraph *","Execute", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< mglGraph * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "wchar_t const *","Execute", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< wchar_t * >(argp3);
  (arg1)->Execute(arg2,(wchar_t const *)arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglParse_execute__SWIG_2(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = (mglParse *) 0 ;
  mglGraph *arg2 = (mglGraph *) 0 ;
  FILE *arg3 = (FILE *) 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglParse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse *","Execute", 1, self )); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglGraph *","Execute", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< mglGraph * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "FILE *","Execute", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< FILE * >(argp3);
  ecode4 = SWIG_AsVal_bool(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "bool","Execute", 4, argv[2] ));
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->Execute(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglParse_execute__SWIG_3(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = (mglParse *) 0 ;
  mglGraph *arg2 = (mglGraph *) 0 ;
  FILE *arg3 = (FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglParse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse *","Execute", 1, self )); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_mglGraph, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "mglGraph *","Execute", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< mglGraph * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "FILE *","Execute", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< FILE * >(argp3);
  (arg1)->Execute(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglParse_execute(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglParse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglGraph, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wchar_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglParse_execute__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglParse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglGraph, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_FILE, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglParse_execute__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglParse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglGraph, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglParse_execute__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglParse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mglGraph, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_FILE, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MglParse_execute__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MglParse.execute", 
    "    void MglParse.execute(mglGraph *gr, char const *str)\n"
    "    void MglParse.execute(mglGraph *gr, wchar_t const *str)\n"
    "    void MglParse.execute(mglGraph *gr, FILE *fp, bool print)\n"
    "    void MglParse.execute(mglGraph *gr, FILE *fp)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglParse.cmd_type

  call-seq:
    cmd_type(name) -> int

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglParse_cmd_type(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = (mglParse *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglParse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse *","CmdType", 1, self )); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","CmdType", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (int)(arg1)->CmdType((char const *)arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: MathGL::MglParse.cmd_format

  call-seq:
    cmd_format(name) -> char const *

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglParse_cmd_format(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = (mglParse *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglParse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse *","CmdFormat", 1, self )); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","CmdFormat", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (char *)(arg1)->CmdFormat((char const *)arg2);
  vresult = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: MathGL::MglParse.cmd_desc

  call-seq:
    cmd_desc(name) -> char const *

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglParse_cmd_desc(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = (mglParse *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglParse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse *","CmdDesc", 1, self )); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","CmdDesc", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (char *)(arg1)->CmdDesc((char const *)arg2);
  vresult = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: MathGL::MglParse.get_cmd_name

  call-seq:
    get_cmd_name(n) -> char const *

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglParse_get_cmd_name(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = (mglParse *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglParse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse *","GetCmdName", 1, self )); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","GetCmdName", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  result = (char *)(arg1)->GetCmdName(arg2);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglParse.get_cmd_num

  call-seq:
    get_cmd_num -> long

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglParse_get_cmd_num(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = (mglParse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglParse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse *","GetCmdNum", 1, self )); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  result = (long)(arg1)->GetCmdNum();
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglParse.add_param

  call-seq:
    add_param(id, str)
    add_param(id, str)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglParse_add_param__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = (mglParse *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglParse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse *","AddParam", 1, self )); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","AddParam", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","AddParam", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->AddParam(arg2,(char const *)arg3);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglParse_add_param__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = (mglParse *) 0 ;
  int arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglParse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse *","AddParam", 1, self )); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","AddParam", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "wchar_t const *","AddParam", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< wchar_t * >(argp3);
  (arg1)->AddParam(arg2,(wchar_t const *)arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglParse_add_param(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglParse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wchar_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglParse_add_param__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglParse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MglParse_add_param__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MglParse.add_param", 
    "    void MglParse.add_param(int id, char const *str)\n"
    "    void MglParse.add_param(int id, wchar_t const *str)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglParse.restore_once

  call-seq:
    restore_once

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglParse_restore_once(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = (mglParse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglParse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse *","RestoreOnce", 1, self )); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  (arg1)->RestoreOnce();
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglParse.allow_set_size

  call-seq:
    allow_set_size(allow)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglParse_allow_set_size(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = (mglParse *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglParse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse *","AllowSetSize", 1, self )); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","AllowSetSize", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->AllowSetSize(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglParse.allow_file_io

  call-seq:
    allow_file_io(allow)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglParse_allow_file_io(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = (mglParse *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglParse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse *","AllowFileIO", 1, self )); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","AllowFileIO", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->AllowFileIO(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglParse.stop

  call-seq:
    stop

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglParse_stop(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = (mglParse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglParse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse *","Stop", 1, self )); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  (arg1)->Stop();
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglParse.calc

  call-seq:
    calc(formula) -> MglData
    calc(formula) -> MglData

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglParse_calc__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = (mglParse *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglParse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse *","Calc", 1, self )); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Calc", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (arg1)->Calc((char const *)arg2);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglParse_calc__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = (mglParse *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mglData result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglParse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse *","Calc", 1, self )); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "wchar_t const *","Calc", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< wchar_t * >(argp2);
  result = (arg1)->Calc((wchar_t const *)arg2);
  vresult = SWIG_NewPointerObj((new mglData(static_cast< const mglData& >(result))), SWIGTYPE_p_mglData, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglParse_calc(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglParse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wchar_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglParse_calc__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglParse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglParse_calc__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MglParse.calc", 
    "    mglData MglParse.calc(char const *formula)\n"
    "    mglData MglParse.calc(wchar_t const *formula)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglParse.add_var

  call-seq:
    add_var(name) -> MglData
    add_var(name) -> MglData

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglParse_add_var__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = (mglParse *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  mglData *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglParse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse *","AddVar", 1, self )); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","AddVar", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (mglData *)(arg1)->AddVar((char const *)arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mglData, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglParse_add_var__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = (mglParse *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mglData *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglParse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse *","AddVar", 1, self )); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "wchar_t const *","AddVar", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< wchar_t * >(argp2);
  result = (mglData *)(arg1)->AddVar((wchar_t const *)arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mglData, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglParse_add_var(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglParse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wchar_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglParse_add_var__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglParse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglParse_add_var__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MglParse.add_var", 
    "    mglData * MglParse.add_var(char const *name)\n"
    "    mglData * MglParse.add_var(wchar_t const *name)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglParse.find_var

  call-seq:
    find_var(name) -> MglData
    find_var(name) -> MglData

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglParse_find_var__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = (mglParse *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  mglData *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglParse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse *","FindVar", 1, self )); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","FindVar", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (mglData *)(arg1)->FindVar((char const *)arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mglData, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglParse_find_var__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = (mglParse *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mglData *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglParse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse *","FindVar", 1, self )); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "wchar_t const *","FindVar", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< wchar_t * >(argp2);
  result = (mglData *)(arg1)->FindVar((wchar_t const *)arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mglData, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglParse_find_var(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglParse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wchar_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglParse_find_var__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglParse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglParse_find_var__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MglParse.find_var", 
    "    mglData * MglParse.find_var(char const *name)\n"
    "    mglData * MglParse.find_var(wchar_t const *name)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglParse.get_var

  call-seq:
    get_var(id) -> MglData

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglParse_get_var(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = (mglParse *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  mglData *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglParse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse *","GetVar", 1, self )); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned long","GetVar", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned long >(val2);
  result = (mglData *)(arg1)->GetVar(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mglData, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglParse.get_num_var

  call-seq:
    get_num_var -> long

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglParse_get_num_var(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = (mglParse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglParse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse *","GetNumVar", 1, self )); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  result = (long)(arg1)->GetNumVar();
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MathGL::MglParse.delete_var

  call-seq:
    delete_var(name)
    delete_var(name)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglParse_delete_var__SWIG_0(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = (mglParse *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglParse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse *","DeleteVar", 1, self )); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","DeleteVar", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->DeleteVar((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MglParse_delete_var__SWIG_1(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = (mglParse *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglParse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse *","DeleteVar", 1, self )); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "wchar_t const *","DeleteVar", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< wchar_t * >(argp2);
  (arg1)->DeleteVar((wchar_t const *)arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MglParse_delete_var(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglParse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wchar_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglParse_delete_var__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mglParse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MglParse_delete_var__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MglParse.delete_var", 
    "    void MglParse.delete_var(char const *name)\n"
    "    void MglParse.delete_var(wchar_t const *name)\n");
  
  return Qnil;
}



/*
  Document-method: MathGL::MglParse.delete_all

  call-seq:
    delete_all

An instance method.

*/
SWIGINTERN VALUE
_wrap_MglParse_delete_all(int argc, VALUE *argv, VALUE self) {
  mglParse *arg1 = (mglParse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_mglParse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "mglParse *","DeleteAll", 1, self )); 
  }
  arg1 = reinterpret_cast< mglParse * >(argp1);
  (arg1)->DeleteAll();
  return Qnil;
fail:
  return Qnil;
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_FILE = {"_p_FILE", "FILE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HMGL = {"_p_HMGL", "HMGL *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HMPR = {"_p_HMPR", "HMPR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void__void = {"_p_f_p_void__void", "void (*)(void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|mreal *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gsl_matrix = {"_p_gsl_matrix", "gsl_matrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gsl_vector = {"_p_gsl_vector", "gsl_vector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mglColor = {"_p_mglColor", "mglColor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mglData = {"_p_mglData", "mglData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mglDataA = {"_p_mglDataA", "mglDataA *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mglDataC = {"_p_mglDataC", "mglDataC *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mglExpr = {"_p_mglExpr", "mglExpr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mglGraph = {"_p_mglGraph", "mglGraph *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mglParse = {"_p_mglParse", "mglParse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mglPoint = {"_p_mglPoint", "mglPoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_double = {"_p_p_double", "double **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_float = {"_p_p_float", "float **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_p_double = {"_p_p_p_double", "double ***", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_p_float = {"_p_p_p_float", "float ***", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint64_t = {"_p_uint64_t", "uint64_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wchar_t = {"_p_wchar_t", "wchar_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_FILE,
  &_swigt__p_HMGL,
  &_swigt__p_HMPR,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_f_p_void__void,
  &_swigt__p_float,
  &_swigt__p_gsl_matrix,
  &_swigt__p_gsl_vector,
  &_swigt__p_long,
  &_swigt__p_mglColor,
  &_swigt__p_mglData,
  &_swigt__p_mglDataA,
  &_swigt__p_mglDataC,
  &_swigt__p_mglExpr,
  &_swigt__p_mglGraph,
  &_swigt__p_mglParse,
  &_swigt__p_mglPoint,
  &_swigt__p_p_double,
  &_swigt__p_p_float,
  &_swigt__p_p_p_double,
  &_swigt__p_p_p_float,
  &_swigt__p_std__string,
  &_swigt__p_uint64_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_wchar_t,
};

static swig_cast_info _swigc__p_FILE[] = {  {&_swigt__p_FILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HMGL[] = {  {&_swigt__p_HMGL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HMPR[] = {  {&_swigt__p_HMPR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void__void[] = {  {&_swigt__p_f_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsl_matrix[] = {  {&_swigt__p_gsl_matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsl_vector[] = {  {&_swigt__p_gsl_vector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mglColor[] = {  {&_swigt__p_mglColor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mglData[] = {  {&_swigt__p_mglData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mglDataA[] = {  {&_swigt__p_mglDataA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mglDataC[] = {  {&_swigt__p_mglDataC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mglExpr[] = {  {&_swigt__p_mglExpr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mglGraph[] = {  {&_swigt__p_mglGraph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mglParse[] = {  {&_swigt__p_mglParse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mglPoint[] = {  {&_swigt__p_mglPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_double[] = {  {&_swigt__p_p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_float[] = {  {&_swigt__p_p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_p_double[] = {  {&_swigt__p_p_p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_p_float[] = {  {&_swigt__p_p_p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint64_t[] = {  {&_swigt__p_uint64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wchar_t[] = {  {&_swigt__p_wchar_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_FILE,
  _swigc__p_HMGL,
  _swigc__p_HMPR,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_f_p_void__void,
  _swigc__p_float,
  _swigc__p_gsl_matrix,
  _swigc__p_gsl_vector,
  _swigc__p_long,
  _swigc__p_mglColor,
  _swigc__p_mglData,
  _swigc__p_mglDataA,
  _swigc__p_mglDataC,
  _swigc__p_mglExpr,
  _swigc__p_mglGraph,
  _swigc__p_mglParse,
  _swigc__p_mglPoint,
  _swigc__p_p_double,
  _swigc__p_p_float,
  _swigc__p_p_p_double,
  _swigc__p_p_p_float,
  _swigc__p_std__string,
  _swigc__p_uint64_t,
  _swigc__p_unsigned_char,
  _swigc__p_wchar_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/*

*/
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_MathGL(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mMathGL = rb_define_module("MathGL");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  rb_define_singleton_method(mMathGL, "Pi", VALUEFUNC(_wrap_Pi_get), 0);
  rb_define_singleton_method(mMathGL, "NaN", VALUEFUNC(_wrap_NaN_get), 0);
  rb_define_singleton_method(mMathGL, "Inf", VALUEFUNC(_wrap_Inf_get), 0);
  rb_define_singleton_method(mMathGL, "mgl_min_a", VALUEFUNC(_wrap_mgl_min_a_get), 0);
  
  SwigClassMglPoint.klass = rb_define_class_under(mMathGL, "MglPoint", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_mglPoint, (void *) &SwigClassMglPoint);
  rb_define_alloc_func(SwigClassMglPoint.klass, _wrap_MglPoint_allocate);
  rb_define_method(SwigClassMglPoint.klass, "initialize", VALUEFUNC(_wrap_new_MglPoint), -1);
  rb_define_method(SwigClassMglPoint.klass, "x=", VALUEFUNC(_wrap_MglPoint_x_set), -1);
  rb_define_method(SwigClassMglPoint.klass, "x", VALUEFUNC(_wrap_MglPoint_x_get), -1);
  rb_define_method(SwigClassMglPoint.klass, "y=", VALUEFUNC(_wrap_MglPoint_y_set), -1);
  rb_define_method(SwigClassMglPoint.klass, "y", VALUEFUNC(_wrap_MglPoint_y_get), -1);
  rb_define_method(SwigClassMglPoint.klass, "z=", VALUEFUNC(_wrap_MglPoint_z_set), -1);
  rb_define_method(SwigClassMglPoint.klass, "z", VALUEFUNC(_wrap_MglPoint_z_get), -1);
  rb_define_method(SwigClassMglPoint.klass, "c=", VALUEFUNC(_wrap_MglPoint_c_set), -1);
  rb_define_method(SwigClassMglPoint.klass, "c", VALUEFUNC(_wrap_MglPoint_c_get), -1);
  rb_define_method(SwigClassMglPoint.klass, "is_nan", VALUEFUNC(_wrap_MglPoint_is_nan), -1);
  rb_define_method(SwigClassMglPoint.klass, "val", VALUEFUNC(_wrap_MglPoint_val), -1);
  rb_define_method(SwigClassMglPoint.klass, "norm", VALUEFUNC(_wrap_MglPoint_norm), -1);
  rb_define_method(SwigClassMglPoint.klass, "normalize", VALUEFUNC(_wrap_MglPoint_normalize), -1);
  SwigClassMglPoint.mark = 0;
  SwigClassMglPoint.destroy = (void (*)(void *)) free_mglPoint;
  SwigClassMglPoint.trackObjects = 0;
  
  SwigClassMglColor.klass = rb_define_class_under(mMathGL, "MglColor", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_mglColor, (void *) &SwigClassMglColor);
  rb_define_alloc_func(SwigClassMglColor.klass, _wrap_MglColor_allocate);
  rb_define_method(SwigClassMglColor.klass, "initialize", VALUEFUNC(_wrap_new_MglColor), -1);
  rb_define_method(SwigClassMglColor.klass, "r=", VALUEFUNC(_wrap_MglColor_r_set), -1);
  rb_define_method(SwigClassMglColor.klass, "r", VALUEFUNC(_wrap_MglColor_r_get), -1);
  rb_define_method(SwigClassMglColor.klass, "g=", VALUEFUNC(_wrap_MglColor_g_set), -1);
  rb_define_method(SwigClassMglColor.klass, "g", VALUEFUNC(_wrap_MglColor_g_get), -1);
  rb_define_method(SwigClassMglColor.klass, "b=", VALUEFUNC(_wrap_MglColor_b_set), -1);
  rb_define_method(SwigClassMglColor.klass, "b", VALUEFUNC(_wrap_MglColor_b_get), -1);
  rb_define_method(SwigClassMglColor.klass, "a=", VALUEFUNC(_wrap_MglColor_a_set), -1);
  rb_define_method(SwigClassMglColor.klass, "a", VALUEFUNC(_wrap_MglColor_a_get), -1);
  rb_define_method(SwigClassMglColor.klass, "valid", VALUEFUNC(_wrap_MglColor_valid), -1);
  rb_define_method(SwigClassMglColor.klass, "norm", VALUEFUNC(_wrap_MglColor_norm), -1);
  rb_define_method(SwigClassMglColor.klass, "norm_s", VALUEFUNC(_wrap_MglColor_norm_s), -1);
  rb_define_method(SwigClassMglColor.klass, "set", VALUEFUNC(_wrap_MglColor_set), -1);
  rb_define_method(SwigClassMglColor.klass, "==", VALUEFUNC(_wrap_MglColor___eq__), -1);
  rb_define_method(SwigClassMglColor.klass, "<", VALUEFUNC(_wrap_MglColor___lt__), -1);
  SwigClassMglColor.mark = 0;
  SwigClassMglColor.destroy = (void (*)(void *)) free_mglColor;
  SwigClassMglColor.trackObjects = 0;
  
  SwigClassMglData.klass = rb_define_class_under(mMathGL, "MglData", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_mglData, (void *) &SwigClassMglData);
  rb_define_alloc_func(SwigClassMglData.klass, _wrap_MglData_allocate);
  rb_define_method(SwigClassMglData.klass, "initialize", VALUEFUNC(_wrap_new_MglData), -1);
  rb_define_method(SwigClassMglData.klass, "nx=", VALUEFUNC(_wrap_MglData_nx_set), -1);
  rb_define_method(SwigClassMglData.klass, "nx", VALUEFUNC(_wrap_MglData_nx_get), -1);
  rb_define_method(SwigClassMglData.klass, "ny=", VALUEFUNC(_wrap_MglData_ny_set), -1);
  rb_define_method(SwigClassMglData.klass, "ny", VALUEFUNC(_wrap_MglData_ny_get), -1);
  rb_define_method(SwigClassMglData.klass, "nz=", VALUEFUNC(_wrap_MglData_nz_set), -1);
  rb_define_method(SwigClassMglData.klass, "nz", VALUEFUNC(_wrap_MglData_nz_get), -1);
  rb_define_method(SwigClassMglData.klass, "a=", VALUEFUNC(_wrap_MglData_a_set), -1);
  rb_define_method(SwigClassMglData.klass, "a", VALUEFUNC(_wrap_MglData_a_get), -1);
  rb_define_method(SwigClassMglData.klass, "id=", VALUEFUNC(_wrap_MglData_id_set), -1);
  rb_define_method(SwigClassMglData.klass, "id", VALUEFUNC(_wrap_MglData_id_get), -1);
  rb_define_method(SwigClassMglData.klass, "link=", VALUEFUNC(_wrap_MglData_link_set), -1);
  rb_define_method(SwigClassMglData.klass, "link", VALUEFUNC(_wrap_MglData_link_get), -1);
  rb_define_method(SwigClassMglData.klass, "get_val", VALUEFUNC(_wrap_MglData_get_val), -1);
  rb_define_method(SwigClassMglData.klass, "set_val", VALUEFUNC(_wrap_MglData_set_val), -1);
  rb_define_method(SwigClassMglData.klass, "get_nx", VALUEFUNC(_wrap_MglData_get_nx), -1);
  rb_define_method(SwigClassMglData.klass, "get_ny", VALUEFUNC(_wrap_MglData_get_ny), -1);
  rb_define_method(SwigClassMglData.klass, "get_nz", VALUEFUNC(_wrap_MglData_get_nz), -1);
  rb_define_method(SwigClassMglData.klass, "create", VALUEFUNC(_wrap_MglData_create), -1);
  rb_define_method(SwigClassMglData.klass, "rearrange", VALUEFUNC(_wrap_MglData_rearrange), -1);
  rb_define_method(SwigClassMglData.klass, "transpose", VALUEFUNC(_wrap_MglData_transpose), -1);
  rb_define_method(SwigClassMglData.klass, "extend", VALUEFUNC(_wrap_MglData_extend), -1);
  rb_define_method(SwigClassMglData.klass, "squeeze", VALUEFUNC(_wrap_MglData_squeeze), -1);
  rb_define_method(SwigClassMglData.klass, "crop", VALUEFUNC(_wrap_MglData_crop), -1);
  rb_define_method(SwigClassMglData.klass, "insert", VALUEFUNC(_wrap_MglData_insert), -1);
  rb_define_method(SwigClassMglData.klass, "delete", VALUEFUNC(_wrap_MglData_delete), -1);
  rb_define_method(SwigClassMglData.klass, "clean", VALUEFUNC(_wrap_MglData_clean), -1);
  rb_define_method(SwigClassMglData.klass, "join", VALUEFUNC(_wrap_MglData_join), -1);
  rb_define_method(SwigClassMglData.klass, "modify", VALUEFUNC(_wrap_MglData_modify), -1);
  rb_define_method(SwigClassMglData.klass, "fill", VALUEFUNC(_wrap_MglData_fill), -1);
  rb_define_method(SwigClassMglData.klass, "refill_gs", VALUEFUNC(_wrap_MglData_refill_gs), -1);
  rb_define_method(SwigClassMglData.klass, "refill", VALUEFUNC(_wrap_MglData_refill), -1);
  rb_define_method(SwigClassMglData.klass, "grid", VALUEFUNC(_wrap_MglData_grid), -1);
  rb_define_method(SwigClassMglData.klass, "put", VALUEFUNC(_wrap_MglData_put), -1);
  rb_define_method(SwigClassMglData.klass, "set_column_id", VALUEFUNC(_wrap_MglData_set_column_id), -1);
  rb_define_method(SwigClassMglData.klass, "new_id", VALUEFUNC(_wrap_MglData_new_id), -1);
  rb_define_method(SwigClassMglData.klass, "read", VALUEFUNC(_wrap_MglData_read), -1);
  rb_define_method(SwigClassMglData.klass, "save", VALUEFUNC(_wrap_MglData_save), -1);
  rb_define_method(SwigClassMglData.klass, "export", VALUEFUNC(_wrap_MglData_export), -1);
  rb_define_method(SwigClassMglData.klass, "import", VALUEFUNC(_wrap_MglData_import), -1);
  rb_define_method(SwigClassMglData.klass, "read_range", VALUEFUNC(_wrap_MglData_read_range), -1);
  rb_define_method(SwigClassMglData.klass, "read_all", VALUEFUNC(_wrap_MglData_read_all), -1);
  rb_define_method(SwigClassMglData.klass, "read_mat", VALUEFUNC(_wrap_MglData_read_mat), -1);
  rb_define_method(SwigClassMglData.klass, "read_hdf", VALUEFUNC(_wrap_MglData_read_hdf), -1);
  rb_define_method(SwigClassMglData.klass, "save_hdf", VALUEFUNC(_wrap_MglData_save_hdf), -1);
  rb_define_singleton_method(SwigClassMglData.klass, "datas_hdf", VALUEFUNC(_wrap_MglData_datas_hdf), -1);
  rb_define_method(SwigClassMglData.klass, "column", VALUEFUNC(_wrap_MglData_column), -1);
  rb_define_method(SwigClassMglData.klass, "sub_data", VALUEFUNC(_wrap_MglData_sub_data), -1);
  rb_define_method(SwigClassMglData.klass, "trace", VALUEFUNC(_wrap_MglData_trace), -1);
  rb_define_method(SwigClassMglData.klass, "hist", VALUEFUNC(_wrap_MglData_hist), -1);
  rb_define_method(SwigClassMglData.klass, "sum", VALUEFUNC(_wrap_MglData_sum), -1);
  rb_define_method(SwigClassMglData.klass, "max", VALUEFUNC(_wrap_MglData_max), -1);
  rb_define_method(SwigClassMglData.klass, "min", VALUEFUNC(_wrap_MglData_min), -1);
  rb_define_method(SwigClassMglData.klass, "combine", VALUEFUNC(_wrap_MglData_combine), -1);
  rb_define_method(SwigClassMglData.klass, "resize", VALUEFUNC(_wrap_MglData_resize), -1);
  rb_define_method(SwigClassMglData.klass, "evaluate", VALUEFUNC(_wrap_MglData_evaluate), -1);
  rb_define_method(SwigClassMglData.klass, "roots", VALUEFUNC(_wrap_MglData_roots), -1);
  rb_define_method(SwigClassMglData.klass, "correl", VALUEFUNC(_wrap_MglData_correl), -1);
  rb_define_method(SwigClassMglData.klass, "auto_correl", VALUEFUNC(_wrap_MglData_auto_correl), -1);
  rb_define_method(SwigClassMglData.klass, "cum_sum", VALUEFUNC(_wrap_MglData_cum_sum), -1);
  rb_define_method(SwigClassMglData.klass, "integral", VALUEFUNC(_wrap_MglData_integral), -1);
  rb_define_method(SwigClassMglData.klass, "diff", VALUEFUNC(_wrap_MglData_diff), -1);
  rb_define_method(SwigClassMglData.klass, "diff2", VALUEFUNC(_wrap_MglData_diff2), -1);
  rb_define_method(SwigClassMglData.klass, "swap", VALUEFUNC(_wrap_MglData_swap), -1);
  rb_define_method(SwigClassMglData.klass, "roll", VALUEFUNC(_wrap_MglData_roll), -1);
  rb_define_method(SwigClassMglData.klass, "mirror", VALUEFUNC(_wrap_MglData_mirror), -1);
  rb_define_method(SwigClassMglData.klass, "sort", VALUEFUNC(_wrap_MglData_sort), -1);
  rb_define_method(SwigClassMglData.klass, "envelop", VALUEFUNC(_wrap_MglData_envelop), -1);
  rb_define_method(SwigClassMglData.klass, "sew", VALUEFUNC(_wrap_MglData_sew), -1);
  rb_define_method(SwigClassMglData.klass, "smooth", VALUEFUNC(_wrap_MglData_smooth), -1);
  rb_define_method(SwigClassMglData.klass, "norm", VALUEFUNC(_wrap_MglData_norm), -1);
  rb_define_method(SwigClassMglData.klass, "norm_sl", VALUEFUNC(_wrap_MglData_norm_sl), -1);
  rb_define_method(SwigClassMglData.klass, "hankel", VALUEFUNC(_wrap_MglData_hankel), -1);
  rb_define_method(SwigClassMglData.klass, "sin_fft", VALUEFUNC(_wrap_MglData_sin_fft), -1);
  rb_define_method(SwigClassMglData.klass, "cos_fft", VALUEFUNC(_wrap_MglData_cos_fft), -1);
  rb_define_method(SwigClassMglData.klass, "fill_sample", VALUEFUNC(_wrap_MglData_fill_sample), -1);
  rb_define_method(SwigClassMglData.klass, "solve", VALUEFUNC(_wrap_MglData_solve), -1);
  rb_define_method(SwigClassMglData.klass, "spline", VALUEFUNC(_wrap_MglData_spline), -1);
  rb_define_method(SwigClassMglData.klass, "spline1", VALUEFUNC(_wrap_MglData_spline1), -1);
  rb_define_method(SwigClassMglData.klass, "linear", VALUEFUNC(_wrap_MglData_linear), -1);
  rb_define_method(SwigClassMglData.klass, "linear1", VALUEFUNC(_wrap_MglData_linear1), -1);
  rb_define_method(SwigClassMglData.klass, "print_info", VALUEFUNC(_wrap_MglData_print_info), -1);
  rb_define_method(SwigClassMglData.klass, "maximal_neg", VALUEFUNC(_wrap_MglData_maximal_neg), -1);
  rb_define_method(SwigClassMglData.klass, "minimal_pos", VALUEFUNC(_wrap_MglData_minimal_pos), -1);
  rb_define_method(SwigClassMglData.klass, "maximal", VALUEFUNC(_wrap_MglData_maximal), -1);
  rb_define_method(SwigClassMglData.klass, "minimal", VALUEFUNC(_wrap_MglData_minimal), -1);
  rb_define_method(SwigClassMglData.klass, "momentum", VALUEFUNC(_wrap_MglData_momentum), -1);
  rb_define_method(SwigClassMglData.klass, "last", VALUEFUNC(_wrap_MglData_last), -1);
  rb_define_method(SwigClassMglData.klass, "find", VALUEFUNC(_wrap_MglData_find), -1);
  rb_define_method(SwigClassMglData.klass, "find_any", VALUEFUNC(_wrap_MglData_find_any), -1);
  rb_define_method(SwigClassMglData.klass, "set", VALUEFUNC(_wrap_MglData_set), -1);
  rb_define_method(SwigClassMglData.klass, "*", VALUEFUNC(_wrap_MglData___mul__), -1);
  rb_define_method(SwigClassMglData.klass, "-", VALUEFUNC(_wrap_MglData___sub__), -1);
  rb_define_method(SwigClassMglData.klass, "+", VALUEFUNC(_wrap_MglData___add__), -1);
  rb_define_method(SwigClassMglData.klass, "/", VALUEFUNC(_wrap_MglData___div__), -1);
  rb_define_method(SwigClassMglData.klass, "[]", VALUEFUNC(_wrap_MglData___getitem__), -1);
  rb_define_method(SwigClassMglData.klass, "__paren", VALUEFUNC(_wrap_MglData___paren), -1);
  rb_define_method(SwigClassMglData.klass, "[]=", VALUEFUNC(_wrap_MglData___setitem__), -1);
  rb_define_method(SwigClassMglData.klass, "__paren_asgn", VALUEFUNC(_wrap_MglData___paren_asgn), -1);
  SwigClassMglData.mark = 0;
  SwigClassMglData.destroy = (void (*)(void *)) free_mglData;
  SwigClassMglData.trackObjects = 0;
  rb_define_module_function(mMathGL, "mgl_transform_a", VALUEFUNC(_wrap_mgl_transform_a), -1);
  rb_define_module_function(mMathGL, "mgl_transform", VALUEFUNC(_wrap_mgl_transform), -1);
  rb_define_module_function(mMathGL, "mgl_fourier", VALUEFUNC(_wrap_mgl_fourier), -1);
  rb_define_module_function(mMathGL, "mgl_stfa", VALUEFUNC(_wrap_mgl_stfa), -1);
  rb_define_module_function(mMathGL, "mgl_pde", VALUEFUNC(_wrap_mgl_pde), -1);
  rb_define_module_function(mMathGL, "mgl_qo_2d", VALUEFUNC(_wrap_mgl_qo_2d), -1);
  rb_define_module_function(mMathGL, "mgl_qo_3d", VALUEFUNC(_wrap_mgl_qo_3d), -1);
  rb_define_module_function(mMathGL, "mgl_ray", VALUEFUNC(_wrap_mgl_ray), -1);
  rb_define_module_function(mMathGL, "mgl_ode", VALUEFUNC(_wrap_mgl_ode), -1);
  rb_define_module_function(mMathGL, "mgl_jacobian", VALUEFUNC(_wrap_mgl_jacobian), -1);
  rb_define_module_function(mMathGL, "mgl_triangulation", VALUEFUNC(_wrap_mgl_triangulation), -1);
  rb_define_module_function(mMathGL, "mgl_sub_data", VALUEFUNC(_wrap_mgl_sub_data), -1);
  rb_define_module_function(mMathGL, "mgl_gspline_init", VALUEFUNC(_wrap_mgl_gspline_init), -1);
  rb_define_module_function(mMathGL, "mgl_gspline", VALUEFUNC(_wrap_mgl_gspline), -1);
  
  SwigClassMglExpr.klass = rb_define_class_under(mMathGL, "MglExpr", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_mglExpr, (void *) &SwigClassMglExpr);
  rb_define_alloc_func(SwigClassMglExpr.klass, _wrap_MglExpr_allocate);
  rb_define_method(SwigClassMglExpr.klass, "initialize", VALUEFUNC(_wrap_new_MglExpr), -1);
  rb_define_method(SwigClassMglExpr.klass, "eval", VALUEFUNC(_wrap_MglExpr_eval), -1);
  rb_define_method(SwigClassMglExpr.klass, "diff", VALUEFUNC(_wrap_MglExpr_diff), -1);
  SwigClassMglExpr.mark = 0;
  SwigClassMglExpr.destroy = (void (*)(void *)) free_mglExpr;
  SwigClassMglExpr.trackObjects = 0;
  
  SwigClassMglGraph.klass = rb_define_class_under(mMathGL, "MglGraph", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_mglGraph, (void *) &SwigClassMglGraph);
  rb_define_alloc_func(SwigClassMglGraph.klass, _wrap_MglGraph_allocate);
  rb_define_method(SwigClassMglGraph.klass, "initialize", VALUEFUNC(_wrap_new_MglGraph), -1);
  rb_define_method(SwigClassMglGraph.klass, "self", VALUEFUNC(_wrap_MglGraph_self), -1);
  rb_define_method(SwigClassMglGraph.klass, "default_plot_param", VALUEFUNC(_wrap_MglGraph_default_plot_param), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_plot_id", VALUEFUNC(_wrap_MglGraph_set_plot_id), -1);
  rb_define_method(SwigClassMglGraph.klass, "get_plot_id", VALUEFUNC(_wrap_MglGraph_get_plot_id), -1);
  rb_define_method(SwigClassMglGraph.klass, "stop", VALUEFUNC(_wrap_MglGraph_stop), -1);
  rb_define_method(SwigClassMglGraph.klass, "need_stop", VALUEFUNC(_wrap_MglGraph_need_stop), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_event_func", VALUEFUNC(_wrap_MglGraph_set_event_func), -1);
  rb_define_method(SwigClassMglGraph.klass, "alpha", VALUEFUNC(_wrap_MglGraph_alpha), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_alpha_def", VALUEFUNC(_wrap_MglGraph_set_alpha_def), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_transp_type", VALUEFUNC(_wrap_MglGraph_set_transp_type), -1);
  rb_define_method(SwigClassMglGraph.klass, "light", VALUEFUNC(_wrap_MglGraph_light), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_dif_light", VALUEFUNC(_wrap_MglGraph_set_dif_light), -1);
  rb_define_method(SwigClassMglGraph.klass, "add_light", VALUEFUNC(_wrap_MglGraph_add_light), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_ambient", VALUEFUNC(_wrap_MglGraph_set_ambient), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_diffuse", VALUEFUNC(_wrap_MglGraph_set_diffuse), -1);
  rb_define_method(SwigClassMglGraph.klass, "fog", VALUEFUNC(_wrap_MglGraph_fog), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_bar_width", VALUEFUNC(_wrap_MglGraph_set_bar_width), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_mark_size", VALUEFUNC(_wrap_MglGraph_set_mark_size), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_arrow_size", VALUEFUNC(_wrap_MglGraph_set_arrow_size), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_mesh_num", VALUEFUNC(_wrap_MglGraph_set_mesh_num), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_face_num", VALUEFUNC(_wrap_MglGraph_set_face_num), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_cut", VALUEFUNC(_wrap_MglGraph_set_cut), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_cut_box", VALUEFUNC(_wrap_MglGraph_set_cut_box), -1);
  rb_define_method(SwigClassMglGraph.klass, "cut_off", VALUEFUNC(_wrap_MglGraph_cut_off), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_font_size", VALUEFUNC(_wrap_MglGraph_set_font_size), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_font_def", VALUEFUNC(_wrap_MglGraph_set_font_def), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_font_size_pt", VALUEFUNC(_wrap_MglGraph_set_font_size_pt), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_font_size_cm", VALUEFUNC(_wrap_MglGraph_set_font_size_cm), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_font_size_in", VALUEFUNC(_wrap_MglGraph_set_font_size_in), -1);
  rb_define_method(SwigClassMglGraph.klass, "load_font", VALUEFUNC(_wrap_MglGraph_load_font), -1);
  rb_define_method(SwigClassMglGraph.klass, "copy_font", VALUEFUNC(_wrap_MglGraph_copy_font), -1);
  rb_define_method(SwigClassMglGraph.klass, "restore_font", VALUEFUNC(_wrap_MglGraph_restore_font), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_rotated_text", VALUEFUNC(_wrap_MglGraph_set_rotated_text), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_palette", VALUEFUNC(_wrap_MglGraph_set_palette), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_def_scheme", VALUEFUNC(_wrap_MglGraph_set_def_scheme), -1);
  rb_define_singleton_method(SwigClassMglGraph.klass, "set_color", VALUEFUNC(_wrap_MglGraph_set_color), -1);
  rb_define_singleton_method(SwigClassMglGraph.klass, "set_mask", VALUEFUNC(_wrap_MglGraph_set_mask), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_mask_angle", VALUEFUNC(_wrap_MglGraph_set_mask_angle), -1);
  rb_define_method(SwigClassMglGraph.klass, "get_warn", VALUEFUNC(_wrap_MglGraph_get_warn), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_warn", VALUEFUNC(_wrap_MglGraph_set_warn), -1);
  rb_define_method(SwigClassMglGraph.klass, "message", VALUEFUNC(_wrap_MglGraph_message), -1);
  rb_define_method(SwigClassMglGraph.klass, "zoom_axis", VALUEFUNC(_wrap_MglGraph_zoom_axis), -1);
  rb_define_method(SwigClassMglGraph.klass, "add_range", VALUEFUNC(_wrap_MglGraph_add_range), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_range", VALUEFUNC(_wrap_MglGraph_set_range), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_ranges", VALUEFUNC(_wrap_MglGraph_set_ranges), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_auto_ranges", VALUEFUNC(_wrap_MglGraph_set_auto_ranges), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_origin", VALUEFUNC(_wrap_MglGraph_set_origin), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_coor", VALUEFUNC(_wrap_MglGraph_set_coor), -1);
  rb_define_method(SwigClassMglGraph.klass, "ternary", VALUEFUNC(_wrap_MglGraph_ternary), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_tick_rotate", VALUEFUNC(_wrap_MglGraph_set_tick_rotate), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_tick_skip", VALUEFUNC(_wrap_MglGraph_set_tick_skip), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_tick_len", VALUEFUNC(_wrap_MglGraph_set_tick_len), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_axis_stl", VALUEFUNC(_wrap_MglGraph_set_axis_stl), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_ticks_time", VALUEFUNC(_wrap_MglGraph_set_ticks_time), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_ticks_val", VALUEFUNC(_wrap_MglGraph_set_ticks_val), -1);
  rb_define_method(SwigClassMglGraph.klass, "add_tick", VALUEFUNC(_wrap_MglGraph_add_tick), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_ticks", VALUEFUNC(_wrap_MglGraph_set_ticks), -1);
  rb_define_method(SwigClassMglGraph.klass, "adjust", VALUEFUNC(_wrap_MglGraph_adjust), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_tick_templ", VALUEFUNC(_wrap_MglGraph_set_tick_templ), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_tune_ticks", VALUEFUNC(_wrap_MglGraph_set_tune_ticks), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_tick_shift", VALUEFUNC(_wrap_MglGraph_set_tick_shift), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_time_utc", VALUEFUNC(_wrap_MglGraph_set_time_utc), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_origin_tick", VALUEFUNC(_wrap_MglGraph_set_origin_tick), -1);
  rb_define_method(SwigClassMglGraph.klass, "sub_plot", VALUEFUNC(_wrap_MglGraph_sub_plot), -1);
  rb_define_method(SwigClassMglGraph.klass, "multi_plot", VALUEFUNC(_wrap_MglGraph_multi_plot), -1);
  rb_define_method(SwigClassMglGraph.klass, "in_plot", VALUEFUNC(_wrap_MglGraph_in_plot), -1);
  rb_define_method(SwigClassMglGraph.klass, "column_plot", VALUEFUNC(_wrap_MglGraph_column_plot), -1);
  rb_define_method(SwigClassMglGraph.klass, "grid_plot", VALUEFUNC(_wrap_MglGraph_grid_plot), -1);
  rb_define_method(SwigClassMglGraph.klass, "stick_plot", VALUEFUNC(_wrap_MglGraph_stick_plot), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_plot_factor", VALUEFUNC(_wrap_MglGraph_set_plot_factor), -1);
  rb_define_method(SwigClassMglGraph.klass, "push", VALUEFUNC(_wrap_MglGraph_push), -1);
  rb_define_method(SwigClassMglGraph.klass, "pop", VALUEFUNC(_wrap_MglGraph_pop), -1);
  rb_define_method(SwigClassMglGraph.klass, "title", VALUEFUNC(_wrap_MglGraph_title), -1);
  rb_define_method(SwigClassMglGraph.klass, "aspect", VALUEFUNC(_wrap_MglGraph_aspect), -1);
  rb_define_method(SwigClassMglGraph.klass, "rotate", VALUEFUNC(_wrap_MglGraph_rotate), -1);
  rb_define_method(SwigClassMglGraph.klass, "rotate_n", VALUEFUNC(_wrap_MglGraph_rotate_n), -1);
  rb_define_method(SwigClassMglGraph.klass, "perspective", VALUEFUNC(_wrap_MglGraph_perspective), -1);
  rb_define_method(SwigClassMglGraph.klass, "view", VALUEFUNC(_wrap_MglGraph_view), -1);
  rb_define_method(SwigClassMglGraph.klass, "view_as_rotate", VALUEFUNC(_wrap_MglGraph_view_as_rotate), -1);
  rb_define_method(SwigClassMglGraph.klass, "zoom", VALUEFUNC(_wrap_MglGraph_zoom), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_size", VALUEFUNC(_wrap_MglGraph_set_size), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_quality", VALUEFUNC(_wrap_MglGraph_set_quality), -1);
  rb_define_method(SwigClassMglGraph.klass, "get_quality", VALUEFUNC(_wrap_MglGraph_get_quality), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_draw_reg", VALUEFUNC(_wrap_MglGraph_set_draw_reg), -1);
  rb_define_method(SwigClassMglGraph.klass, "start_group", VALUEFUNC(_wrap_MglGraph_start_group), -1);
  rb_define_method(SwigClassMglGraph.klass, "end_group", VALUEFUNC(_wrap_MglGraph_end_group), -1);
  rb_define_method(SwigClassMglGraph.klass, "highlight", VALUEFUNC(_wrap_MglGraph_highlight), -1);
  rb_define_method(SwigClassMglGraph.klass, "show_image", VALUEFUNC(_wrap_MglGraph_show_image), -1);
  rb_define_method(SwigClassMglGraph.klass, "write_frame", VALUEFUNC(_wrap_MglGraph_write_frame), -1);
  rb_define_method(SwigClassMglGraph.klass, "write_jpeg", VALUEFUNC(_wrap_MglGraph_write_jpeg), -1);
  rb_define_method(SwigClassMglGraph.klass, "write_png", VALUEFUNC(_wrap_MglGraph_write_png), -1);
  rb_define_method(SwigClassMglGraph.klass, "write_bmp", VALUEFUNC(_wrap_MglGraph_write_bmp), -1);
  rb_define_method(SwigClassMglGraph.klass, "write_tga", VALUEFUNC(_wrap_MglGraph_write_tga), -1);
  rb_define_method(SwigClassMglGraph.klass, "write_eps", VALUEFUNC(_wrap_MglGraph_write_eps), -1);
  rb_define_method(SwigClassMglGraph.klass, "write_tex", VALUEFUNC(_wrap_MglGraph_write_tex), -1);
  rb_define_method(SwigClassMglGraph.klass, "write_bps", VALUEFUNC(_wrap_MglGraph_write_bps), -1);
  rb_define_method(SwigClassMglGraph.klass, "write_svg", VALUEFUNC(_wrap_MglGraph_write_svg), -1);
  rb_define_method(SwigClassMglGraph.klass, "write_gif", VALUEFUNC(_wrap_MglGraph_write_gif), -1);
  rb_define_method(SwigClassMglGraph.klass, "write_obj", VALUEFUNC(_wrap_MglGraph_write_obj), -1);
  rb_define_method(SwigClassMglGraph.klass, "write_objold", VALUEFUNC(_wrap_MglGraph_write_objold), -1);
  rb_define_method(SwigClassMglGraph.klass, "write_xyz", VALUEFUNC(_wrap_MglGraph_write_xyz), -1);
  rb_define_method(SwigClassMglGraph.klass, "write_stl", VALUEFUNC(_wrap_MglGraph_write_stl), -1);
  rb_define_method(SwigClassMglGraph.klass, "write_off", VALUEFUNC(_wrap_MglGraph_write_off), -1);
  rb_define_method(SwigClassMglGraph.klass, "write_prc", VALUEFUNC(_wrap_MglGraph_write_prc), -1);
  rb_define_method(SwigClassMglGraph.klass, "write_json", VALUEFUNC(_wrap_MglGraph_write_json), -1);
  rb_define_method(SwigClassMglGraph.klass, "get_json", VALUEFUNC(_wrap_MglGraph_get_json), -1);
  rb_define_method(SwigClassMglGraph.klass, "finish", VALUEFUNC(_wrap_MglGraph_finish), -1);
  rb_define_method(SwigClassMglGraph.klass, "new_frame", VALUEFUNC(_wrap_MglGraph_new_frame), -1);
  rb_define_method(SwigClassMglGraph.klass, "end_frame", VALUEFUNC(_wrap_MglGraph_end_frame), -1);
  rb_define_method(SwigClassMglGraph.klass, "get_num_frame", VALUEFUNC(_wrap_MglGraph_get_num_frame), -1);
  rb_define_method(SwigClassMglGraph.klass, "reset_frames", VALUEFUNC(_wrap_MglGraph_reset_frames), -1);
  rb_define_method(SwigClassMglGraph.klass, "del_frame", VALUEFUNC(_wrap_MglGraph_del_frame), -1);
  rb_define_method(SwigClassMglGraph.klass, "get_frame", VALUEFUNC(_wrap_MglGraph_get_frame), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_frame", VALUEFUNC(_wrap_MglGraph_set_frame), -1);
  rb_define_method(SwigClassMglGraph.klass, "show_frame", VALUEFUNC(_wrap_MglGraph_show_frame), -1);
  rb_define_method(SwigClassMglGraph.klass, "clear_frame", VALUEFUNC(_wrap_MglGraph_clear_frame), -1);
  rb_define_method(SwigClassMglGraph.klass, "start_gif", VALUEFUNC(_wrap_MglGraph_start_gif), -1);
  rb_define_method(SwigClassMglGraph.klass, "close_gif", VALUEFUNC(_wrap_MglGraph_close_gif), -1);
  rb_define_method(SwigClassMglGraph.klass, "export_mgld", VALUEFUNC(_wrap_MglGraph_export_mgld), -1);
  rb_define_method(SwigClassMglGraph.klass, "import_mgld", VALUEFUNC(_wrap_MglGraph_import_mgld), -1);
  rb_define_method(SwigClassMglGraph.klass, "get_rgb", VALUEFUNC(_wrap_MglGraph_get_rgb), -1);
  rb_define_method(SwigClassMglGraph.klass, "get_rgba", VALUEFUNC(_wrap_MglGraph_get_rgba), -1);
  rb_define_method(SwigClassMglGraph.klass, "get_bgrn", VALUEFUNC(_wrap_MglGraph_get_bgrn), -1);
  rb_define_method(SwigClassMglGraph.klass, "get_background", VALUEFUNC(_wrap_MglGraph_get_background), -1);
  rb_define_method(SwigClassMglGraph.klass, "get_width", VALUEFUNC(_wrap_MglGraph_get_width), -1);
  rb_define_method(SwigClassMglGraph.klass, "get_height", VALUEFUNC(_wrap_MglGraph_get_height), -1);
  rb_define_method(SwigClassMglGraph.klass, "calc_xyz", VALUEFUNC(_wrap_MglGraph_calc_xyz), -1);
  rb_define_method(SwigClassMglGraph.klass, "calc_scr", VALUEFUNC(_wrap_MglGraph_calc_scr), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_obj_id", VALUEFUNC(_wrap_MglGraph_set_obj_id), -1);
  rb_define_method(SwigClassMglGraph.klass, "get_obj_id", VALUEFUNC(_wrap_MglGraph_get_obj_id), -1);
  rb_define_method(SwigClassMglGraph.klass, "get_spl_id", VALUEFUNC(_wrap_MglGraph_get_spl_id), -1);
  rb_define_method(SwigClassMglGraph.klass, "is_active", VALUEFUNC(_wrap_MglGraph_is_active), -1);
  rb_define_method(SwigClassMglGraph.klass, "combine", VALUEFUNC(_wrap_MglGraph_combine), -1);
  rb_define_method(SwigClassMglGraph.klass, "clf", VALUEFUNC(_wrap_MglGraph_clf), -1);
  rb_define_method(SwigClassMglGraph.klass, "clear_unused", VALUEFUNC(_wrap_MglGraph_clear_unused), -1);
  rb_define_method(SwigClassMglGraph.klass, "load_background", VALUEFUNC(_wrap_MglGraph_load_background), -1);
  rb_define_method(SwigClassMglGraph.klass, "rasterize", VALUEFUNC(_wrap_MglGraph_rasterize), -1);
  rb_define_method(SwigClassMglGraph.klass, "ball", VALUEFUNC(_wrap_MglGraph_ball), -1);
  rb_define_method(SwigClassMglGraph.klass, "line", VALUEFUNC(_wrap_MglGraph_line), -1);
  rb_define_method(SwigClassMglGraph.klass, "curve", VALUEFUNC(_wrap_MglGraph_curve), -1);
  rb_define_method(SwigClassMglGraph.klass, "face", VALUEFUNC(_wrap_MglGraph_face), -1);
  rb_define_method(SwigClassMglGraph.klass, "face_x", VALUEFUNC(_wrap_MglGraph_face_x), -1);
  rb_define_method(SwigClassMglGraph.klass, "face_y", VALUEFUNC(_wrap_MglGraph_face_y), -1);
  rb_define_method(SwigClassMglGraph.klass, "face_z", VALUEFUNC(_wrap_MglGraph_face_z), -1);
  rb_define_method(SwigClassMglGraph.klass, "drop", VALUEFUNC(_wrap_MglGraph_drop), -1);
  rb_define_method(SwigClassMglGraph.klass, "sphere", VALUEFUNC(_wrap_MglGraph_sphere), -1);
  rb_define_method(SwigClassMglGraph.klass, "cone", VALUEFUNC(_wrap_MglGraph_cone), -1);
  rb_define_method(SwigClassMglGraph.klass, "ellipse", VALUEFUNC(_wrap_MglGraph_ellipse), -1);
  rb_define_method(SwigClassMglGraph.klass, "circle", VALUEFUNC(_wrap_MglGraph_circle), -1);
  rb_define_method(SwigClassMglGraph.klass, "rhomb", VALUEFUNC(_wrap_MglGraph_rhomb), -1);
  rb_define_method(SwigClassMglGraph.klass, "polygon", VALUEFUNC(_wrap_MglGraph_polygon), -1);
  rb_define_method(SwigClassMglGraph.klass, "arc", VALUEFUNC(_wrap_MglGraph_arc), -1);
  rb_define_method(SwigClassMglGraph.klass, "putsw", VALUEFUNC(_wrap_MglGraph_putsw), -1);
  rb_define_method(SwigClassMglGraph.klass, "puts", VALUEFUNC(_wrap_MglGraph_puts), -1);
  rb_define_method(SwigClassMglGraph.klass, "text", VALUEFUNC(_wrap_MglGraph_text), -1);
  rb_define_method(SwigClassMglGraph.klass, "box", VALUEFUNC(_wrap_MglGraph_box), -1);
  rb_define_method(SwigClassMglGraph.klass, "axis", VALUEFUNC(_wrap_MglGraph_axis), -1);
  rb_define_method(SwigClassMglGraph.klass, "colorbar", VALUEFUNC(_wrap_MglGraph_colorbar), -1);
  rb_define_method(SwigClassMglGraph.klass, "add_legend", VALUEFUNC(_wrap_MglGraph_add_legend), -1);
  rb_define_method(SwigClassMglGraph.klass, "clear_legend", VALUEFUNC(_wrap_MglGraph_clear_legend), -1);
  rb_define_method(SwigClassMglGraph.klass, "legend", VALUEFUNC(_wrap_MglGraph_legend), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_legend_marks", VALUEFUNC(_wrap_MglGraph_set_legend_marks), -1);
  rb_define_method(SwigClassMglGraph.klass, "plot", VALUEFUNC(_wrap_MglGraph_plot), -1);
  rb_define_method(SwigClassMglGraph.klass, "tape", VALUEFUNC(_wrap_MglGraph_tape), -1);
  rb_define_method(SwigClassMglGraph.klass, "radar", VALUEFUNC(_wrap_MglGraph_radar), -1);
  rb_define_method(SwigClassMglGraph.klass, "step", VALUEFUNC(_wrap_MglGraph_step), -1);
  rb_define_method(SwigClassMglGraph.klass, "tens", VALUEFUNC(_wrap_MglGraph_tens), -1);
  rb_define_method(SwigClassMglGraph.klass, "area", VALUEFUNC(_wrap_MglGraph_area), -1);
  rb_define_method(SwigClassMglGraph.klass, "region", VALUEFUNC(_wrap_MglGraph_region), -1);
  rb_define_method(SwigClassMglGraph.klass, "stem", VALUEFUNC(_wrap_MglGraph_stem), -1);
  rb_define_method(SwigClassMglGraph.klass, "bars", VALUEFUNC(_wrap_MglGraph_bars), -1);
  rb_define_method(SwigClassMglGraph.klass, "barh", VALUEFUNC(_wrap_MglGraph_barh), -1);
  rb_define_method(SwigClassMglGraph.klass, "chart", VALUEFUNC(_wrap_MglGraph_chart), -1);
  rb_define_method(SwigClassMglGraph.klass, "ohlc", VALUEFUNC(_wrap_MglGraph_ohlc), -1);
  rb_define_method(SwigClassMglGraph.klass, "box_plot", VALUEFUNC(_wrap_MglGraph_box_plot), -1);
  rb_define_method(SwigClassMglGraph.klass, "candle", VALUEFUNC(_wrap_MglGraph_candle), -1);
  rb_define_method(SwigClassMglGraph.klass, "cones", VALUEFUNC(_wrap_MglGraph_cones), -1);
  rb_define_method(SwigClassMglGraph.klass, "error", VALUEFUNC(_wrap_MglGraph_error), -1);
  rb_define_method(SwigClassMglGraph.klass, "mark", VALUEFUNC(_wrap_MglGraph_mark), -1);
  rb_define_method(SwigClassMglGraph.klass, "text_mark", VALUEFUNC(_wrap_MglGraph_text_mark), -1);
  rb_define_method(SwigClassMglGraph.klass, "label", VALUEFUNC(_wrap_MglGraph_label), -1);
  rb_define_method(SwigClassMglGraph.klass, "table", VALUEFUNC(_wrap_MglGraph_table), -1);
  rb_define_method(SwigClassMglGraph.klass, "tube", VALUEFUNC(_wrap_MglGraph_tube), -1);
  rb_define_method(SwigClassMglGraph.klass, "torus", VALUEFUNC(_wrap_MglGraph_torus), -1);
  rb_define_method(SwigClassMglGraph.klass, "mesh", VALUEFUNC(_wrap_MglGraph_mesh), -1);
  rb_define_method(SwigClassMglGraph.klass, "fall", VALUEFUNC(_wrap_MglGraph_fall), -1);
  rb_define_method(SwigClassMglGraph.klass, "belt", VALUEFUNC(_wrap_MglGraph_belt), -1);
  rb_define_method(SwigClassMglGraph.klass, "surf", VALUEFUNC(_wrap_MglGraph_surf), -1);
  rb_define_method(SwigClassMglGraph.klass, "grid", VALUEFUNC(_wrap_MglGraph_grid), -1);
  rb_define_method(SwigClassMglGraph.klass, "tile", VALUEFUNC(_wrap_MglGraph_tile), -1);
  rb_define_method(SwigClassMglGraph.klass, "dens", VALUEFUNC(_wrap_MglGraph_dens), -1);
  rb_define_method(SwigClassMglGraph.klass, "boxs", VALUEFUNC(_wrap_MglGraph_boxs), -1);
  rb_define_method(SwigClassMglGraph.klass, "cont", VALUEFUNC(_wrap_MglGraph_cont), -1);
  rb_define_method(SwigClassMglGraph.klass, "cont_f", VALUEFUNC(_wrap_MglGraph_cont_f), -1);
  rb_define_method(SwigClassMglGraph.klass, "cont_d", VALUEFUNC(_wrap_MglGraph_cont_d), -1);
  rb_define_method(SwigClassMglGraph.klass, "cont_v", VALUEFUNC(_wrap_MglGraph_cont_v), -1);
  rb_define_method(SwigClassMglGraph.klass, "axial", VALUEFUNC(_wrap_MglGraph_axial), -1);
  rb_define_method(SwigClassMglGraph.klass, "grid3", VALUEFUNC(_wrap_MglGraph_grid3), -1);
  rb_define_method(SwigClassMglGraph.klass, "dens3", VALUEFUNC(_wrap_MglGraph_dens3), -1);
  rb_define_method(SwigClassMglGraph.klass, "surf3", VALUEFUNC(_wrap_MglGraph_surf3), -1);
  rb_define_method(SwigClassMglGraph.klass, "cloud", VALUEFUNC(_wrap_MglGraph_cloud), -1);
  rb_define_method(SwigClassMglGraph.klass, "cont3", VALUEFUNC(_wrap_MglGraph_cont3), -1);
  rb_define_method(SwigClassMglGraph.klass, "cont_f3", VALUEFUNC(_wrap_MglGraph_cont_f3), -1);
  rb_define_method(SwigClassMglGraph.klass, "beam", VALUEFUNC(_wrap_MglGraph_beam), -1);
  rb_define_method(SwigClassMglGraph.klass, "tile_s", VALUEFUNC(_wrap_MglGraph_tile_s), -1);
  rb_define_method(SwigClassMglGraph.klass, "surf_c", VALUEFUNC(_wrap_MglGraph_surf_c), -1);
  rb_define_method(SwigClassMglGraph.klass, "surf_a", VALUEFUNC(_wrap_MglGraph_surf_a), -1);
  rb_define_method(SwigClassMglGraph.klass, "map", VALUEFUNC(_wrap_MglGraph_map), -1);
  rb_define_method(SwigClassMglGraph.klass, "stfa", VALUEFUNC(_wrap_MglGraph_stfa), -1);
  rb_define_method(SwigClassMglGraph.klass, "surf_3a", VALUEFUNC(_wrap_MglGraph_surf_3a), -1);
  rb_define_method(SwigClassMglGraph.klass, "surf_3c", VALUEFUNC(_wrap_MglGraph_surf_3c), -1);
  rb_define_method(SwigClassMglGraph.klass, "dew", VALUEFUNC(_wrap_MglGraph_dew), -1);
  rb_define_method(SwigClassMglGraph.klass, "traj", VALUEFUNC(_wrap_MglGraph_traj), -1);
  rb_define_method(SwigClassMglGraph.klass, "vect", VALUEFUNC(_wrap_MglGraph_vect), -1);
  rb_define_method(SwigClassMglGraph.klass, "vect3", VALUEFUNC(_wrap_MglGraph_vect3), -1);
  rb_define_method(SwigClassMglGraph.klass, "flow", VALUEFUNC(_wrap_MglGraph_flow), -1);
  rb_define_method(SwigClassMglGraph.klass, "flow_p", VALUEFUNC(_wrap_MglGraph_flow_p), -1);
  rb_define_method(SwigClassMglGraph.klass, "grad", VALUEFUNC(_wrap_MglGraph_grad), -1);
  rb_define_method(SwigClassMglGraph.klass, "pipe", VALUEFUNC(_wrap_MglGraph_pipe), -1);
  rb_define_method(SwigClassMglGraph.klass, "dens_x", VALUEFUNC(_wrap_MglGraph_dens_x), -1);
  rb_define_method(SwigClassMglGraph.klass, "dens_y", VALUEFUNC(_wrap_MglGraph_dens_y), -1);
  rb_define_method(SwigClassMglGraph.klass, "dens_z", VALUEFUNC(_wrap_MglGraph_dens_z), -1);
  rb_define_method(SwigClassMglGraph.klass, "cont_x", VALUEFUNC(_wrap_MglGraph_cont_x), -1);
  rb_define_method(SwigClassMglGraph.klass, "cont_y", VALUEFUNC(_wrap_MglGraph_cont_y), -1);
  rb_define_method(SwigClassMglGraph.klass, "cont_z", VALUEFUNC(_wrap_MglGraph_cont_z), -1);
  rb_define_method(SwigClassMglGraph.klass, "cont_fx", VALUEFUNC(_wrap_MglGraph_cont_fx), -1);
  rb_define_method(SwigClassMglGraph.klass, "cont_fy", VALUEFUNC(_wrap_MglGraph_cont_fy), -1);
  rb_define_method(SwigClassMglGraph.klass, "cont_fz", VALUEFUNC(_wrap_MglGraph_cont_fz), -1);
  rb_define_method(SwigClassMglGraph.klass, "fplot", VALUEFUNC(_wrap_MglGraph_fplot), -1);
  rb_define_method(SwigClassMglGraph.klass, "fsurf", VALUEFUNC(_wrap_MglGraph_fsurf), -1);
  rb_define_method(SwigClassMglGraph.klass, "tri_plot", VALUEFUNC(_wrap_MglGraph_tri_plot), -1);
  rb_define_method(SwigClassMglGraph.klass, "quad_plot", VALUEFUNC(_wrap_MglGraph_quad_plot), -1);
  rb_define_method(SwigClassMglGraph.klass, "tri_cont_v", VALUEFUNC(_wrap_MglGraph_tri_cont_v), -1);
  rb_define_method(SwigClassMglGraph.klass, "tri_cont", VALUEFUNC(_wrap_MglGraph_tri_cont), -1);
  rb_define_method(SwigClassMglGraph.klass, "tri_cont_vt", VALUEFUNC(_wrap_MglGraph_tri_cont_vt), -1);
  rb_define_method(SwigClassMglGraph.klass, "dots", VALUEFUNC(_wrap_MglGraph_dots), -1);
  rb_define_method(SwigClassMglGraph.klass, "crust", VALUEFUNC(_wrap_MglGraph_crust), -1);
  rb_define_method(SwigClassMglGraph.klass, "fit2", VALUEFUNC(_wrap_MglGraph_fit2), -1);
  rb_define_method(SwigClassMglGraph.klass, "fit3", VALUEFUNC(_wrap_MglGraph_fit3), -1);
  rb_define_method(SwigClassMglGraph.klass, "fit", VALUEFUNC(_wrap_MglGraph_fit), -1);
  rb_define_method(SwigClassMglGraph.klass, "fit_s", VALUEFUNC(_wrap_MglGraph_fit_s), -1);
  rb_define_method(SwigClassMglGraph.klass, "puts_fit", VALUEFUNC(_wrap_MglGraph_puts_fit), -1);
  rb_define_method(SwigClassMglGraph.klass, "get_fit", VALUEFUNC(_wrap_MglGraph_get_fit), -1);
  rb_define_method(SwigClassMglGraph.klass, "pde", VALUEFUNC(_wrap_MglGraph_pde), -1);
  rb_define_method(SwigClassMglGraph.klass, "fill", VALUEFUNC(_wrap_MglGraph_fill), -1);
  rb_define_method(SwigClassMglGraph.klass, "refill", VALUEFUNC(_wrap_MglGraph_refill), -1);
  rb_define_method(SwigClassMglGraph.klass, "data_grid", VALUEFUNC(_wrap_MglGraph_data_grid), -1);
  rb_define_method(SwigClassMglGraph.klass, "hist", VALUEFUNC(_wrap_MglGraph_hist), -1);
  rb_define_method(SwigClassMglGraph.klass, "compression", VALUEFUNC(_wrap_MglGraph_compression), -1);
  rb_define_method(SwigClassMglGraph.klass, "vertex_color", VALUEFUNC(_wrap_MglGraph_vertex_color), -1);
  rb_define_method(SwigClassMglGraph.klass, "double_sided", VALUEFUNC(_wrap_MglGraph_double_sided), -1);
  rb_define_method(SwigClassMglGraph.klass, "set_func", VALUEFUNC(_wrap_MglGraph_set_func), -1);
  SwigClassMglGraph.mark = 0;
  SwigClassMglGraph.destroy = (void (*)(void *)) free_mglGraph;
  SwigClassMglGraph.trackObjects = 0;
  
  SwigClassMglParse.klass = rb_define_class_under(mMathGL, "MglParse", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_mglParse, (void *) &SwigClassMglParse);
  rb_define_alloc_func(SwigClassMglParse.klass, _wrap_MglParse_allocate);
  rb_define_method(SwigClassMglParse.klass, "initialize", VALUEFUNC(_wrap_new_MglParse), -1);
  rb_define_method(SwigClassMglParse.klass, "self", VALUEFUNC(_wrap_MglParse_self), -1);
  rb_define_method(SwigClassMglParse.klass, "parse", VALUEFUNC(_wrap_MglParse_parse), -1);
  rb_define_method(SwigClassMglParse.klass, "execute", VALUEFUNC(_wrap_MglParse_execute), -1);
  rb_define_method(SwigClassMglParse.klass, "cmd_type", VALUEFUNC(_wrap_MglParse_cmd_type), -1);
  rb_define_method(SwigClassMglParse.klass, "cmd_format", VALUEFUNC(_wrap_MglParse_cmd_format), -1);
  rb_define_method(SwigClassMglParse.klass, "cmd_desc", VALUEFUNC(_wrap_MglParse_cmd_desc), -1);
  rb_define_method(SwigClassMglParse.klass, "get_cmd_name", VALUEFUNC(_wrap_MglParse_get_cmd_name), -1);
  rb_define_method(SwigClassMglParse.klass, "get_cmd_num", VALUEFUNC(_wrap_MglParse_get_cmd_num), -1);
  rb_define_method(SwigClassMglParse.klass, "add_param", VALUEFUNC(_wrap_MglParse_add_param), -1);
  rb_define_method(SwigClassMglParse.klass, "restore_once", VALUEFUNC(_wrap_MglParse_restore_once), -1);
  rb_define_method(SwigClassMglParse.klass, "allow_set_size", VALUEFUNC(_wrap_MglParse_allow_set_size), -1);
  rb_define_method(SwigClassMglParse.klass, "allow_file_io", VALUEFUNC(_wrap_MglParse_allow_file_io), -1);
  rb_define_method(SwigClassMglParse.klass, "stop", VALUEFUNC(_wrap_MglParse_stop), -1);
  rb_define_method(SwigClassMglParse.klass, "calc", VALUEFUNC(_wrap_MglParse_calc), -1);
  rb_define_method(SwigClassMglParse.klass, "add_var", VALUEFUNC(_wrap_MglParse_add_var), -1);
  rb_define_method(SwigClassMglParse.klass, "find_var", VALUEFUNC(_wrap_MglParse_find_var), -1);
  rb_define_method(SwigClassMglParse.klass, "get_var", VALUEFUNC(_wrap_MglParse_get_var), -1);
  rb_define_method(SwigClassMglParse.klass, "get_num_var", VALUEFUNC(_wrap_MglParse_get_num_var), -1);
  rb_define_method(SwigClassMglParse.klass, "delete_var", VALUEFUNC(_wrap_MglParse_delete_var), -1);
  rb_define_method(SwigClassMglParse.klass, "delete_all", VALUEFUNC(_wrap_MglParse_delete_all), -1);
  SwigClassMglParse.mark = 0;
  SwigClassMglParse.destroy = (void (*)(void *)) free_mglParse;
  SwigClassMglParse.trackObjects = 0;
}

